
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001656  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000246  00800060  00001656  000016ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001940  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  00001980  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000041a2  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d11  00000000  00000000  00005d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d45  00000000  00000000  00006a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e4  00000000  00000000  000087a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008c8  00000000  00000000  00008a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002045  00000000  00000000  0000934c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  0000b391  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	72 00       	.word	0x0072	; ????
      56:	76 00       	.word	0x0076	; ????
      58:	79 00       	.word	0x0079	; ????
      5a:	5d 00       	.word	0x005d	; ????
      5c:	60 00       	.word	0x0060	; ????
      5e:	63 00       	.word	0x0063	; ????
      60:	66 00       	.word	0x0066	; ????
      62:	69 00       	.word	0x0069	; ????
      64:	6c 00       	.word	0x006c	; ????
      66:	6f 00       	.word	0x006f	; ????

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	e6 e5       	ldi	r30, 0x56	; 86
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3a       	cpi	r26, 0xA6	; 166
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 ea       	ldi	r26, 0xA6	; 166
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3a       	cpi	r26, 0xA6	; 166
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 92 00 	call	0x124	; 0x124 <main>
      9e:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Str_toint>:
		y++;
		return 0;
		break;
	}
	return 1;
	}
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	fc 01       	movw	r30, r24
      aa:	f0 97       	sbiw	r30, 0x30	; 48
      ac:	ea 30       	cpi	r30, 0x0A	; 10
      ae:	f1 05       	cpc	r31, r1
      b0:	e0 f4       	brcc	.+56     	; 0xea <Str_toint+0x44>
      b2:	e6 5d       	subi	r30, 0xD6	; 214
      b4:	ff 4f       	sbci	r31, 0xFF	; 255
      b6:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__tablejump2__>
      ba:	83 e0       	ldi	r24, 0x03	; 3
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	08 95       	ret
      c0:	84 e0       	ldi	r24, 0x04	; 4
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	08 95       	ret
      c6:	85 e0       	ldi	r24, 0x05	; 5
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	08 95       	ret
      cc:	86 e0       	ldi	r24, 0x06	; 6
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	08 95       	ret
      d2:	87 e0       	ldi	r24, 0x07	; 7
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	08 95       	ret
      d8:	88 e0       	ldi	r24, 0x08	; 8
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	08 95       	ret
      de:	89 e0       	ldi	r24, 0x09	; 9
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	08 95       	ret
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	08 95       	ret
      ea:	08 95       	ret
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	08 95       	ret
      f2:	82 e0       	ldi	r24, 0x02	; 2
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	08 95       	ret

000000f8 <ui8ComparePass>:
uint8_t ui8ComparePass(const uint8_t* pass1,const uint8_t* pass2,const uint8_t size)
{
      f8:	dc 01       	movw	r26, r24
	uint8_t pin_counter=0;//the offset of the character of the pin
      fa:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t ret_value = 1;
	while (pin_counter<size)//loop till the pin is fully entered
      fc:	0d c0       	rjmp	.+26     	; 0x118 <ui8ComparePass+0x20>
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
      fe:	29 2f       	mov	r18, r25
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	fd 01       	movw	r30, r26
     104:	e2 0f       	add	r30, r18
     106:	f3 1f       	adc	r31, r19
     108:	50 81       	ld	r21, Z
     10a:	fb 01       	movw	r30, r22
     10c:	e2 0f       	add	r30, r18
     10e:	f3 1f       	adc	r31, r19
     110:	20 81       	ld	r18, Z
     112:	52 13       	cpse	r21, r18
     114:	05 c0       	rjmp	.+10     	; 0x120 <ui8ComparePass+0x28>
		{
			ret_value= 0;//returns false that means the two PINs are not equal
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
     116:	9f 5f       	subi	r25, 0xFF	; 255
	}
uint8_t ui8ComparePass(const uint8_t* pass1,const uint8_t* pass2,const uint8_t size)
{
	uint8_t pin_counter=0;//the offset of the character of the pin
	uint8_t ret_value = 1;
	while (pin_counter<size)//loop till the pin is fully entered
     118:	94 17       	cp	r25, r20
     11a:	88 f3       	brcs	.-30     	; 0xfe <ui8ComparePass+0x6>
	return 1;
	}
uint8_t ui8ComparePass(const uint8_t* pass1,const uint8_t* pass2,const uint8_t size)
{
	uint8_t pin_counter=0;//the offset of the character of the pin
	uint8_t ret_value = 1;
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	08 95       	ret
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
		{
			ret_value= 0;//returns false that means the two PINs are not equal
     120:	80 e0       	ldi	r24, 0x00	; 0
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}
     122:	08 95       	ret

00000124 <main>:
int main(void)
{	
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	ae 97       	sbiw	r28, 0x2e	; 46
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	f8 94       	cli
     132:	de bf       	out	0x3e, r29	; 62
     134:	0f be       	out	0x3f, r0	; 63
     136:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t Mode=NO_MODE;
	Uint16_t password_size=4,value=0;
	UART_Initialize(Asynchronous,Disable,Bit_2,Bits_8);
     138:	23 e0       	ldi	r18, 0x03	; 3
     13a:	41 e0       	ldi	r20, 0x01	; 1
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <UART_Initialize>
	Uint16_t x=0,Password_trials=3;
	uint8_t i=0,buffer[15],Guest_name[15],timeout=0;
	LCD_Initialize();
     144:	0e 94 3d 08 	call	0x107a	; 0x107a <LCD_Initialize>
	KEYPAD_Initialize();
     148:	0e 94 67 07 	call	0xece	; 0xece <KEYPAD_Initialize>
	uint8_t Admin_Password[4],Guest_password[4];
	SPI_Master_Initialize();
     14c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <SPI_Master_Initialize>
	
	uint8_t Mode=NO_MODE;
	Uint16_t password_size=4,value=0;
	UART_Initialize(Asynchronous,Disable,Bit_2,Bits_8);
	Uint16_t x=0,Password_trials=3;
	uint8_t i=0,buffer[15],Guest_name[15],timeout=0;
     150:	71 2c       	mov	r7, r1
     152:	00 e0       	ldi	r16, 0x00	; 0
{	
	
	uint8_t Mode=NO_MODE;
	Uint16_t password_size=4,value=0;
	UART_Initialize(Asynchronous,Disable,Bit_2,Bits_8);
	Uint16_t x=0,Password_trials=3;
     154:	0f 2e       	mov	r0, r31
     156:	f3 e0       	ldi	r31, 0x03	; 3
     158:	cf 2e       	mov	r12, r31
     15a:	d1 2c       	mov	r13, r1
     15c:	f0 2d       	mov	r31, r0
     15e:	e1 2c       	mov	r14, r1
     160:	f1 2c       	mov	r15, r1
}
int main(void)
{	
	
	uint8_t Mode=NO_MODE;
	Uint16_t password_size=4,value=0;
     162:	41 2c       	mov	r4, r1
     164:	51 2c       	mov	r5, r1
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}
int main(void)
{	
	
	uint8_t Mode=NO_MODE;
     166:	10 e0       	ldi	r17, 0x00	; 0
	KEYPAD_Initialize();
	uint8_t Admin_Password[4],Guest_password[4];
	SPI_Master_Initialize();
	uint8_t name_size_1, name_size_2;
	//******************************************************Admin Registration*************************************************************/
	while (value<1	){
     168:	f9 c3       	rjmp	.+2034   	; 0x95c <__stack+0xfd>
	if(eeprom_read_byte(ADMIN_PASS_STATUS_ADDRESS)!=1 || eeprom_read_byte(GUEST_PASS_STATUS_ADDRESS)!=1){
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	0e 94 04 0b 	call	0x1608	; 0x1608 <eeprom_read_byte>
     172:	81 30       	cpi	r24, 0x01	; 1
     174:	39 f4       	brne	.+14     	; 0x184 <main+0x60>
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 04 0b 	call	0x1608	; 0x1608 <eeprom_read_byte>
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	09 f4       	brne	.+2      	; 0x184 <main+0x60>
     182:	d6 c1       	rjmp	.+940    	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
		LCD_Clear();
     184:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
		LCD_String_xy(0,0,"1:Set Admin");LCD_String_xy(1,0,"2:Set Guest");
     188:	40 e6       	ldi	r20, 0x60	; 96
     18a:	50 e0       	ldi	r21, 0x00	; 0
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     194:	4c e6       	ldi	r20, 0x6C	; 108
     196:	50 e0       	ldi	r21, 0x00	; 0
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
		uint8_t Bluetooth_Mode=UART_Received();
     1a0:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a4:	2f ef       	ldi	r18, 0xFF	; 255
     1a6:	31 ee       	ldi	r19, 0xE1	; 225
     1a8:	94 e0       	ldi	r25, 0x04	; 4
     1aa:	21 50       	subi	r18, 0x01	; 1
     1ac:	30 40       	sbci	r19, 0x00	; 0
     1ae:	90 40       	sbci	r25, 0x00	; 0
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x86>
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x90>
     1b4:	00 00       	nop
		_delay_ms(100);
			switch (Bluetooth_Mode)
     1b6:	81 33       	cpi	r24, 0x31	; 49
     1b8:	21 f0       	breq	.+8      	; 0x1c2 <main+0x9e>
     1ba:	82 33       	cpi	r24, 0x32	; 50
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <main+0x9c>
     1be:	d6 c0       	rjmp	.+428    	; 0x36c <main+0x248>
     1c0:	b7 c1       	rjmp	.+878    	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
			{
			case '1' :
			
			i=KEYPAD_Read();
     1c2:	0e 94 b4 07 	call	0xf68	; 0xf68 <KEYPAD_Read>
     1c6:	08 2f       	mov	r16, r24
     1c8:	8f e3       	ldi	r24, 0x3F	; 63
     1ca:	9c e9       	ldi	r25, 0x9C	; 156
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0xa8>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0xae>
     1d2:	00 00       	nop
			_delay_ms(10);
		
			if(i!='0'){
     1d4:	00 33       	cpi	r16, 0x30	; 48
     1d6:	09 f4       	brne	.+2      	; 0x1da <main+0xb6>
     1d8:	c7 c0       	rjmp	.+398    	; 0x368 <main+0x244>
     1da:	8f e3       	ldi	r24, 0x3F	; 63
     1dc:	9c e9       	ldi	r25, 0x9C	; 156
     1de:	01 97       	sbiw	r24, 0x01	; 1
     1e0:	f1 f7       	brne	.-4      	; 0x1de <main+0xba>
     1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0xc0>
     1e4:	00 00       	nop
				_delay_ms(10);
				LCD_Clear();
     1e6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
				LCD_String_xy(0,0,"Name size: ");
     1ea:	48 e7       	ldi	r20, 0x78	; 120
     1ec:	50 e0       	ldi	r21, 0x00	; 0
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
				uint8_t name_size=UART_Received();
     1f6:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
     1fa:	b8 2e       	mov	r11, r24
     1fc:	9f ef       	ldi	r25, 0xFF	; 255
     1fe:	21 ee       	ldi	r18, 0xE1	; 225
     200:	34 e0       	ldi	r19, 0x04	; 4
     202:	91 50       	subi	r25, 0x01	; 1
     204:	20 40       	sbci	r18, 0x00	; 0
     206:	30 40       	sbci	r19, 0x00	; 0
     208:	e1 f7       	brne	.-8      	; 0x202 <main+0xde>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0xe8>
     20c:	00 00       	nop
				_delay_ms(100);
				name_size_1=Str_toint(name_size);
     20e:	0e 94 53 00 	call	0xa6	; 0xa6 <Str_toint>
     212:	1c 01       	movw	r2, r24
				LCD_Write_Number(name_size);
     214:	6b 2d       	mov	r22, r11
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_Write_Number>
				UART_Transmit("done");
     220:	84 e8       	ldi	r24, 0x84	; 132
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 84 0a 	call	0x1508	; 0x1508 <UART_Transmit>
				LCD_Clear();LCD_String_xy(0,0,"Name:");
     228:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     22c:	49 e8       	ldi	r20, 0x89	; 137
     22e:	50 e0       	ldi	r21, 0x00	; 0
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
				LCD_Write_Command(0xc0);
     238:	80 ec       	ldi	r24, 0xC0	; 192
     23a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_Write_Command>
				for(int i=0;i<=name_size_1;i++){
     23e:	a1 2c       	mov	r10, r1
     240:	b1 2c       	mov	r11, r1
     242:	0c c0       	rjmp	.+24     	; 0x25c <main+0x138>
					buffer[i]=UART_Received();		
     244:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
     248:	e1 e0       	ldi	r30, 0x01	; 1
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	ec 0f       	add	r30, r28
     24e:	fd 1f       	adc	r31, r29
     250:	ea 0d       	add	r30, r10
     252:	fb 1d       	adc	r31, r11
     254:	80 83       	st	Z, r24
				name_size_1=Str_toint(name_size);
				LCD_Write_Number(name_size);
				UART_Transmit("done");
				LCD_Clear();LCD_String_xy(0,0,"Name:");
				LCD_Write_Command(0xc0);
				for(int i=0;i<=name_size_1;i++){
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	a8 1a       	sub	r10, r24
     25a:	b8 0a       	sbc	r11, r24
     25c:	41 01       	movw	r8, r2
     25e:	99 24       	eor	r9, r9
     260:	8a 14       	cp	r8, r10
     262:	9b 04       	cpc	r9, r11
     264:	7c f7       	brge	.-34     	; 0x244 <main+0x120>
					buffer[i]=UART_Received();		
				}
				USART_SendString("Done");LCD_String_xy(0,5,buffer);LCD_String_xy(1,0,"Password:");
     266:	8f e8       	ldi	r24, 0x8F	; 143
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 8c 0a 	call	0x1518	; 0x1518 <USART_SendString>
     26e:	ae 01       	movw	r20, r28
     270:	4f 5f       	subi	r20, 0xFF	; 255
     272:	5f 4f       	sbci	r21, 0xFF	; 255
     274:	65 e0       	ldi	r22, 0x05	; 5
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     27c:	44 e9       	ldi	r20, 0x94	; 148
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
				while (x<password_size)
     288:	41 c0       	rjmp	.+130    	; 0x30c <main+0x1e8>
     28a:	8f e3       	ldi	r24, 0x3F	; 63
     28c:	9c e9       	ldi	r25, 0x9C	; 156
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <main+0x16a>
     292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x170>
     294:	00 00       	nop
				{
					_delay_ms(10);
					Bluetooth_Mode=UART_Received();
     296:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
					if(i!='0'){
     29a:	00 33       	cpi	r16, 0x30	; 48
     29c:	b9 f1       	breq	.+110    	; 0x30c <main+0x1e8>
						if(Bluetooth_Mode=='1'|| Bluetooth_Mode=='2'|| Bluetooth_Mode=='3'|| Bluetooth_Mode=='4' || Bluetooth_Mode=='5' || Bluetooth_Mode=='6' || Bluetooth_Mode== '7' || Bluetooth_Mode=='8' || Bluetooth_Mode=='9' || i=='1'|| i=='2'|| i=='3'|| i=='4' || i=='5' || i=='6' || i== '7' || i=='8' || i=='9'){
     29e:	9f ec       	ldi	r25, 0xCF	; 207
     2a0:	98 0f       	add	r25, r24
     2a2:	99 30       	cpi	r25, 0x09	; 9
     2a4:	90 f0       	brcs	.+36     	; 0x2ca <main+0x1a6>
     2a6:	01 33       	cpi	r16, 0x31	; 49
     2a8:	81 f0       	breq	.+32     	; 0x2ca <main+0x1a6>
     2aa:	02 33       	cpi	r16, 0x32	; 50
     2ac:	71 f0       	breq	.+28     	; 0x2ca <main+0x1a6>
     2ae:	03 33       	cpi	r16, 0x33	; 51
     2b0:	61 f0       	breq	.+24     	; 0x2ca <main+0x1a6>
     2b2:	04 33       	cpi	r16, 0x34	; 52
     2b4:	51 f0       	breq	.+20     	; 0x2ca <main+0x1a6>
     2b6:	05 33       	cpi	r16, 0x35	; 53
     2b8:	41 f0       	breq	.+16     	; 0x2ca <main+0x1a6>
     2ba:	06 33       	cpi	r16, 0x36	; 54
     2bc:	31 f0       	breq	.+12     	; 0x2ca <main+0x1a6>
     2be:	07 33       	cpi	r16, 0x37	; 55
     2c0:	21 f0       	breq	.+8      	; 0x2ca <main+0x1a6>
     2c2:	08 33       	cpi	r16, 0x38	; 56
     2c4:	11 f0       	breq	.+4      	; 0x2ca <main+0x1a6>
     2c6:	09 33       	cpi	r16, 0x39	; 57
     2c8:	09 f5       	brne	.+66     	; 0x30c <main+0x1e8>
							
							uint16_t counts =Str_toint(Bluetooth_Mode);
     2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <Str_toint>
							Admin_Password[x]=counts;
     2ce:	ef e1       	ldi	r30, 0x1F	; 31
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ec 0f       	add	r30, r28
     2d4:	fd 1f       	adc	r31, r29
     2d6:	ee 0d       	add	r30, r14
     2d8:	ff 1d       	adc	r31, r15
     2da:	80 83       	st	Z, r24
							LCD_Write_Number(counts);_delay_ms(50);
     2dc:	bc 01       	movw	r22, r24
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_Write_Number>
     2e6:	9f ef       	ldi	r25, 0xFF	; 255
     2e8:	20 e7       	ldi	r18, 0x70	; 112
     2ea:	32 e0       	ldi	r19, 0x02	; 2
     2ec:	91 50       	subi	r25, 0x01	; 1
     2ee:	20 40       	sbci	r18, 0x00	; 0
     2f0:	30 40       	sbci	r19, 0x00	; 0
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x1c8>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0x1d2>
     2f6:	00 00       	nop
							LCD_String_xy(1,9+x,"*");
     2f8:	69 e0       	ldi	r22, 0x09	; 9
     2fa:	6e 0d       	add	r22, r14
     2fc:	4e e9       	ldi	r20, 0x9E	; 158
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
							x++;
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	e8 1a       	sub	r14, r24
     30a:	f8 0a       	sbc	r15, r24
				LCD_Write_Command(0xc0);
				for(int i=0;i<=name_size_1;i++){
					buffer[i]=UART_Received();		
				}
				USART_SendString("Done");LCD_String_xy(0,5,buffer);LCD_String_xy(1,0,"Password:");
				while (x<password_size)
     30c:	94 e0       	ldi	r25, 0x04	; 4
     30e:	e9 16       	cp	r14, r25
     310:	f1 04       	cpc	r15, r1
     312:	08 f4       	brcc	.+2      	; 0x316 <main+0x1f2>
     314:	ba cf       	rjmp	.-140    	; 0x28a <main+0x166>
							x++;
						}
					}
					
				}
				eeprom_write_byte(EEPROM_ADMIN_NAME_SIZE,name_size_1);
     316:	62 2d       	mov	r22, r2
     318:	8e e2       	ldi	r24, 0x2E	; 46
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_write_byte>
				eeprom_write_block(buffer,EEPROM_ADMIN_NAME,name_size_1);
     320:	a4 01       	movw	r20, r8
     322:	68 e2       	ldi	r22, 0x28	; 40
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	ce 01       	movw	r24, r28
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_write_block>
				eeprom_write_block((const void*)Admin_Password,(void*)EEPROM_ADMIN_PASSWORD,sizeof(Admin_Password));
     32e:	44 e0       	ldi	r20, 0x04	; 4
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	63 e2       	ldi	r22, 0x23	; 35
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	ce 01       	movw	r24, r28
     338:	4f 96       	adiw	r24, 0x1f	; 31
     33a:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_write_block>
				eeprom_write_byte(ADMIN_PASS_STATUS_ADDRESS,1);
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_write_byte>
				LCD_Clear();LCD_Write_String("Admin Registered");_delay_ms(100);
     348:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     34c:	80 ea       	ldi	r24, 0xA0	; 160
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     354:	2f ef       	ldi	r18, 0xFF	; 255
     356:	31 ee       	ldi	r19, 0xE1	; 225
     358:	84 e0       	ldi	r24, 0x04	; 4
     35a:	21 50       	subi	r18, 0x01	; 1
     35c:	30 40       	sbci	r19, 0x00	; 0
     35e:	80 40       	sbci	r24, 0x00	; 0
     360:	e1 f7       	brne	.-8      	; 0x35a <main+0x236>
     362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x240>
     364:	00 00       	nop
     366:	e4 c0       	rjmp	.+456    	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
					break;
				
			}
				/********************************************************Guest Registeration***************************************************/
				LCD_Clear();
     368:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
				case '2':
				
				
				i=KEYPAD_Read();
     36c:	0e 94 b4 07 	call	0xf68	; 0xf68 <KEYPAD_Read>
     370:	08 2f       	mov	r16, r24
     372:	8f e3       	ldi	r24, 0x3F	; 63
     374:	9c e9       	ldi	r25, 0x9C	; 156
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <main+0x252>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x258>
     37c:	00 00       	nop
				_delay_ms(10);
				x=0;
				if(i!='0'){
     37e:	00 33       	cpi	r16, 0x30	; 48
     380:	09 f4       	brne	.+2      	; 0x384 <main+0x260>
     382:	d4 c0       	rjmp	.+424    	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
     384:	8f e3       	ldi	r24, 0x3F	; 63
     386:	9c e9       	ldi	r25, 0x9C	; 156
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <main+0x264>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <main+0x26a>
     38e:	00 00       	nop
					_delay_ms(10);
					LCD_Clear();
     390:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
					LCD_String_xy(0,0,"Name size: ");
     394:	48 e7       	ldi	r20, 0x78	; 120
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
					uint8_t name_size=UART_Received();
     3a0:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
     3a4:	f8 2e       	mov	r15, r24
     3a6:	9f ef       	ldi	r25, 0xFF	; 255
     3a8:	21 ee       	ldi	r18, 0xE1	; 225
     3aa:	34 e0       	ldi	r19, 0x04	; 4
     3ac:	91 50       	subi	r25, 0x01	; 1
     3ae:	20 40       	sbci	r18, 0x00	; 0
     3b0:	30 40       	sbci	r19, 0x00	; 0
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x288>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x292>
     3b6:	00 00       	nop
					_delay_ms(100);
					name_size_2=Str_toint(name_size);
     3b8:	0e 94 53 00 	call	0xa6	; 0xa6 <Str_toint>
     3bc:	4c 01       	movw	r8, r24
					LCD_Write_Number(name_size);
     3be:	6f 2d       	mov	r22, r15
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_Write_Number>
					UART_Transmit("done");
     3ca:	84 e8       	ldi	r24, 0x84	; 132
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 84 0a 	call	0x1508	; 0x1508 <UART_Transmit>
					LCD_Clear();LCD_String_xy(0,0,"Name:");
     3d2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     3d6:	49 e8       	ldi	r20, 0x89	; 137
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
					LCD_Write_Command(0xc0);
     3e2:	80 ec       	ldi	r24, 0xC0	; 192
     3e4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_Write_Command>
					for(int i=0;i<=name_size_2;i++){
     3e8:	e1 2c       	mov	r14, r1
     3ea:	f1 2c       	mov	r15, r1
     3ec:	0c c0       	rjmp	.+24     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
						Guest_name[i]=UART_Received();
     3ee:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
     3f2:	e0 e1       	ldi	r30, 0x10	; 16
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	ec 0f       	add	r30, r28
     3f8:	fd 1f       	adc	r31, r29
     3fa:	ee 0d       	add	r30, r14
     3fc:	ff 1d       	adc	r31, r15
     3fe:	80 83       	st	Z, r24
					name_size_2=Str_toint(name_size);
					LCD_Write_Number(name_size);
					UART_Transmit("done");
					LCD_Clear();LCD_String_xy(0,0,"Name:");
					LCD_Write_Command(0xc0);
					for(int i=0;i<=name_size_2;i++){
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	e8 1a       	sub	r14, r24
     404:	f8 0a       	sbc	r15, r24
     406:	54 01       	movw	r10, r8
     408:	bb 24       	eor	r11, r11
     40a:	ae 14       	cp	r10, r14
     40c:	bf 04       	cpc	r11, r15
     40e:	7c f7       	brge	.-34     	; 0x3ee <main+0x2ca>
						Guest_name[i]=UART_Received();
					}
					USART_SendString("Done");LCD_String_xy(0,5,Guest_name);LCD_String_xy(1,0,"Password:");_delay_ms(100);
     410:	8f e8       	ldi	r24, 0x8F	; 143
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 8c 0a 	call	0x1518	; 0x1518 <USART_SendString>
     418:	ae 01       	movw	r20, r28
     41a:	40 5f       	subi	r20, 0xF0	; 240
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	65 e0       	ldi	r22, 0x05	; 5
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     426:	44 e9       	ldi	r20, 0x94	; 148
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     432:	9f ef       	ldi	r25, 0xFF	; 255
     434:	21 ee       	ldi	r18, 0xE1	; 225
     436:	34 e0       	ldi	r19, 0x04	; 4
     438:	91 50       	subi	r25, 0x01	; 1
     43a:	20 40       	sbci	r18, 0x00	; 0
     43c:	30 40       	sbci	r19, 0x00	; 0
     43e:	e1 f7       	brne	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     442:	00 00       	nop
				case '2':
				
				
				i=KEYPAD_Read();
				_delay_ms(10);
				x=0;
     444:	e1 2c       	mov	r14, r1
     446:	f1 2c       	mov	r15, r1
     448:	41 c0       	rjmp	.+130    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     44a:	8f e3       	ldi	r24, 0x3F	; 63
     44c:	9c e9       	ldi	r25, 0x9C	; 156
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     452:	00 c0       	rjmp	.+0      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     454:	00 00       	nop
					}
					USART_SendString("Done");LCD_String_xy(0,5,Guest_name);LCD_String_xy(1,0,"Password:");_delay_ms(100);
					while (x<password_size)
					{
						_delay_ms(10);
						uint8_t Bluetooth_Mode=UART_Received();
     456:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
						if(i!='0'){
     45a:	00 33       	cpi	r16, 0x30	; 48
     45c:	b9 f1       	breq	.+110    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
							if(Bluetooth_Mode=='1'|| Bluetooth_Mode=='2'|| Bluetooth_Mode=='3'|| Bluetooth_Mode=='4' || Bluetooth_Mode=='5' || Bluetooth_Mode=='6' || Bluetooth_Mode== '7' || Bluetooth_Mode=='8' || Bluetooth_Mode=='9' || i=='1'|| i=='2'|| i=='3'|| i=='4' || i=='5' || i=='6' || i== '7' || i=='8' || i=='9'){
     45e:	9f ec       	ldi	r25, 0xCF	; 207
     460:	98 0f       	add	r25, r24
     462:	99 30       	cpi	r25, 0x09	; 9
     464:	90 f0       	brcs	.+36     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     466:	01 33       	cpi	r16, 0x31	; 49
     468:	81 f0       	breq	.+32     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     46a:	02 33       	cpi	r16, 0x32	; 50
     46c:	71 f0       	breq	.+28     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     46e:	03 33       	cpi	r16, 0x33	; 51
     470:	61 f0       	breq	.+24     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     472:	04 33       	cpi	r16, 0x34	; 52
     474:	51 f0       	breq	.+20     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     476:	05 33       	cpi	r16, 0x35	; 53
     478:	41 f0       	breq	.+16     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     47a:	06 33       	cpi	r16, 0x36	; 54
     47c:	31 f0       	breq	.+12     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     47e:	07 33       	cpi	r16, 0x37	; 55
     480:	21 f0       	breq	.+8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     482:	08 33       	cpi	r16, 0x38	; 56
     484:	11 f0       	breq	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     486:	09 33       	cpi	r16, 0x39	; 57
     488:	09 f5       	brne	.+66     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
								uint16_t counts =Str_toint(Bluetooth_Mode);
     48a:	0e 94 53 00 	call	0xa6	; 0xa6 <Str_toint>
								Guest_password[x]=counts;
     48e:	e3 e2       	ldi	r30, 0x23	; 35
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	ec 0f       	add	r30, r28
     494:	fd 1f       	adc	r31, r29
     496:	ee 0d       	add	r30, r14
     498:	ff 1d       	adc	r31, r15
     49a:	80 83       	st	Z, r24
								LCD_Write_Number(counts);_delay_ms(50);
     49c:	bc 01       	movw	r22, r24
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_Write_Number>
     4a6:	9f ef       	ldi	r25, 0xFF	; 255
     4a8:	20 e7       	ldi	r18, 0x70	; 112
     4aa:	32 e0       	ldi	r19, 0x02	; 2
     4ac:	91 50       	subi	r25, 0x01	; 1
     4ae:	20 40       	sbci	r18, 0x00	; 0
     4b0:	30 40       	sbci	r19, 0x00	; 0
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b6:	00 00       	nop
								LCD_String_xy(1,9+x,"*");
     4b8:	69 e0       	ldi	r22, 0x09	; 9
     4ba:	6e 0d       	add	r22, r14
     4bc:	4e e9       	ldi	r20, 0x9E	; 158
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
								
								
								x++;
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	e8 1a       	sub	r14, r24
     4ca:	f8 0a       	sbc	r15, r24
					LCD_Write_Command(0xc0);
					for(int i=0;i<=name_size_2;i++){
						Guest_name[i]=UART_Received();
					}
					USART_SendString("Done");LCD_String_xy(0,5,Guest_name);LCD_String_xy(1,0,"Password:");_delay_ms(100);
					while (x<password_size)
     4cc:	94 e0       	ldi	r25, 0x04	; 4
     4ce:	e9 16       	cp	r14, r25
     4d0:	f1 04       	cpc	r15, r1
     4d2:	08 f4       	brcc	.+2      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     4d4:	ba cf       	rjmp	.-140    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
								x++;
							}
						}
						
					}
					eeprom_write_byte(EEPROM_GUEST_NAME_SIZE,name_size_2);
     4d6:	68 2d       	mov	r22, r8
     4d8:	8c e3       	ldi	r24, 0x3C	; 60
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_write_byte>
					eeprom_write_block((const void *)Guest_name,(void *)EEPROM_GUEST_NAME,name_size_2);
     4e0:	a5 01       	movw	r20, r10
     4e2:	62 e3       	ldi	r22, 0x32	; 50
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	ce 01       	movw	r24, r28
     4e8:	40 96       	adiw	r24, 0x10	; 16
     4ea:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_write_block>
					eeprom_write_block((const void *)Guest_password,(void *)EEPROM_GUEST_PASSWORD,sizeof(Guest_password));
     4ee:	44 e0       	ldi	r20, 0x04	; 4
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	67 e3       	ldi	r22, 0x37	; 55
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	ce 01       	movw	r24, r28
     4f8:	83 96       	adiw	r24, 0x23	; 35
     4fa:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_write_block>
					eeprom_write_byte((uint8_t*)GUEST_PASS_STATUS_ADDRESS,(uint8_t)1);
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 1c 0b 	call	0x1638	; 0x1638 <eeprom_write_byte>
					LCD_Clear();LCD_Write_String("Guest Registered");_delay_ms(250);LCD_Clear();
     508:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     50c:	81 eb       	ldi	r24, 0xB1	; 177
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     514:	2f ef       	ldi	r18, 0xFF	; 255
     516:	34 e3       	ldi	r19, 0x34	; 52
     518:	8c e0       	ldi	r24, 0x0C	; 12
     51a:	21 50       	subi	r18, 0x01	; 1
     51c:	30 40       	sbci	r19, 0x00	; 0
     51e:	80 40       	sbci	r24, 0x00	; 0
     520:	e1 f7       	brne	.-8      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     522:	00 c0       	rjmp	.+0      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
     524:	00 00       	nop
     526:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
				case '2':
				
				
				i=KEYPAD_Read();
				_delay_ms(10);
				x=0;
     52c:	e1 2c       	mov	r14, r1
     52e:	f1 2c       	mov	r15, r1
				break;
			}
		}
		//\\ ***************************************************Check for Password *************************************************************//\\			
		else if(eeprom_read_byte(ADMIN_PASS_STATUS_ADDRESS)==1 || eeprom_read_byte(GUEST_PASS_STATUS_ADDRESS)==1) {
			LCD_Clear();LCD_String_xy(0,0,"1:Admin 2: Guest");
     530:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     534:	42 ec       	ldi	r20, 0xC2	; 194
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
			uint8_t s=UART_Received();
     540:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
     544:	b8 2e       	mov	r11, r24
		while(timeout<3 && Mode==NO_MODE){
     546:	e5 c1       	rjmp	.+970    	; 0x912 <__stack+0xb3>
			if(s=='1'){
     548:	91 e3       	ldi	r25, 0x31	; 49
     54a:	b9 12       	cpse	r11, r25
     54c:	f0 c0       	rjmp	.+480    	; 0x72e <__EEPROM_REGION_LENGTH__+0x32e>
				//******************************************************Admin login***********************************************************
				LCD_Clear();LCD_Write_String("Admin Mode");LCD_Clear();LCD_String_xy(0,0,"Name:");
     54e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     552:	83 ed       	ldi	r24, 0xD3	; 211
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     55a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     55e:	49 e8       	ldi	r20, 0x89	; 137
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
				name_size_1= eeprom_read_word((uint8_t*)EEPROM_ADMIN_NAME_SIZE);
     56a:	8e e2       	ldi	r24, 0x2E	; 46
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <eeprom_read_word>
				  eeprom_read_block((void*)&buffer,(const void*)EEPROM_ADMIN_NAME,name_size_1);
     572:	ac 01       	movw	r20, r24
     574:	55 27       	eor	r21, r21
     576:	68 e2       	ldi	r22, 0x28	; 40
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	ce 01       	movw	r24, r28
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <eeprom_read_block>
				LCD_String_xy(0,6,buffer);_delay_ms(10);
     582:	ae 01       	movw	r20, r28
     584:	4f 5f       	subi	r20, 0xFF	; 255
     586:	5f 4f       	sbci	r21, 0xFF	; 255
     588:	66 e0       	ldi	r22, 0x06	; 6
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     590:	8f e3       	ldi	r24, 0x3F	; 63
     592:	9c e9       	ldi	r25, 0x9C	; 156
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
     598:	00 c0       	rjmp	.+0      	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
     59a:	00 00       	nop
				LCD_String_xy(1,0,"Password:");x=0;uint8_t pass_check[4]={0,0,0,0};
     59c:	44 e9       	ldi	r20, 0x94	; 148
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     5a8:	1b a6       	std	Y+43, r1	; 0x2b
     5aa:	1c a6       	std	Y+44, r1	; 0x2c
     5ac:	1d a6       	std	Y+45, r1	; 0x2d
     5ae:	1e a6       	std	Y+46, r1	; 0x2e
     5b0:	e1 2c       	mov	r14, r1
     5b2:	f1 2c       	mov	r15, r1
				while (x<password_size)
     5b4:	41 c0       	rjmp	.+130    	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
     5b6:	8f e3       	ldi	r24, 0x3F	; 63
     5b8:	9c e9       	ldi	r25, 0x9C	; 156
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
     5c0:	00 00       	nop
				{
					_delay_ms(10);
					uint8_t Bluetooth_Mode=UART_Received();
     5c2:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
					if(i!='0'){
     5c6:	00 33       	cpi	r16, 0x30	; 48
     5c8:	b9 f1       	breq	.+110    	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
						if(Bluetooth_Mode=='1'|| Bluetooth_Mode=='2'|| Bluetooth_Mode=='3'|| Bluetooth_Mode=='4' || Bluetooth_Mode=='5' || Bluetooth_Mode=='6' || Bluetooth_Mode== '7' || Bluetooth_Mode=='8' || Bluetooth_Mode=='9' || i=='1'|| i=='2'|| i=='3'|| i=='4' || i=='5' || i=='6' || i== '7' || i=='8' || i=='9'){
     5ca:	9f ec       	ldi	r25, 0xCF	; 207
     5cc:	98 0f       	add	r25, r24
     5ce:	99 30       	cpi	r25, 0x09	; 9
     5d0:	90 f0       	brcs	.+36     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5d2:	01 33       	cpi	r16, 0x31	; 49
     5d4:	81 f0       	breq	.+32     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5d6:	02 33       	cpi	r16, 0x32	; 50
     5d8:	71 f0       	breq	.+28     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5da:	03 33       	cpi	r16, 0x33	; 51
     5dc:	61 f0       	breq	.+24     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5de:	04 33       	cpi	r16, 0x34	; 52
     5e0:	51 f0       	breq	.+20     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5e2:	05 33       	cpi	r16, 0x35	; 53
     5e4:	41 f0       	breq	.+16     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5e6:	06 33       	cpi	r16, 0x36	; 54
     5e8:	31 f0       	breq	.+12     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5ea:	07 33       	cpi	r16, 0x37	; 55
     5ec:	21 f0       	breq	.+8      	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5ee:	08 33       	cpi	r16, 0x38	; 56
     5f0:	11 f0       	breq	.+4      	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
     5f2:	09 33       	cpi	r16, 0x39	; 57
     5f4:	09 f5       	brne	.+66     	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
							pass_check[x]=Str_toint(Bluetooth_Mode);
     5f6:	0e 94 53 00 	call	0xa6	; 0xa6 <Str_toint>
     5fa:	eb e2       	ldi	r30, 0x2B	; 43
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	ec 0f       	add	r30, r28
     600:	fd 1f       	adc	r31, r29
     602:	ee 0d       	add	r30, r14
     604:	ff 1d       	adc	r31, r15
     606:	80 83       	st	Z, r24
							uint16_t counts =Str_toint(Bluetooth_Mode);
							LCD_Write_Number(counts);_delay_ms(50);
     608:	bc 01       	movw	r22, r24
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_Write_Number>
     612:	9f ef       	ldi	r25, 0xFF	; 255
     614:	20 e7       	ldi	r18, 0x70	; 112
     616:	32 e0       	ldi	r19, 0x02	; 2
     618:	91 50       	subi	r25, 0x01	; 1
     61a:	20 40       	sbci	r18, 0x00	; 0
     61c:	30 40       	sbci	r19, 0x00	; 0
     61e:	e1 f7       	brne	.-8      	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
     620:	00 c0       	rjmp	.+0      	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
     622:	00 00       	nop
							LCD_String_xy(1,9+x,"*");
     624:	69 e0       	ldi	r22, 0x09	; 9
     626:	6e 0d       	add	r22, r14
     628:	4e e9       	ldi	r20, 0x9E	; 158
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
							x++;
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	e8 1a       	sub	r14, r24
     636:	f8 0a       	sbc	r15, r24
				LCD_Clear();LCD_Write_String("Admin Mode");LCD_Clear();LCD_String_xy(0,0,"Name:");
				name_size_1= eeprom_read_word((uint8_t*)EEPROM_ADMIN_NAME_SIZE);
				  eeprom_read_block((void*)&buffer,(const void*)EEPROM_ADMIN_NAME,name_size_1);
				LCD_String_xy(0,6,buffer);_delay_ms(10);
				LCD_String_xy(1,0,"Password:");x=0;uint8_t pass_check[4]={0,0,0,0};
				while (x<password_size)
     638:	94 e0       	ldi	r25, 0x04	; 4
     63a:	e9 16       	cp	r14, r25
     63c:	f1 04       	cpc	r15, r1
     63e:	08 f4       	brcc	.+2      	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
     640:	ba cf       	rjmp	.-140    	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
							x++;
						}
					}
					
				}
				uint8_t stored_pass[4]={1,2,4,3}; 
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	8f a3       	std	Y+39, r24	; 0x27
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	88 a7       	std	Y+40, r24	; 0x28
     64a:	84 e0       	ldi	r24, 0x04	; 4
     64c:	89 a7       	std	Y+41, r24	; 0x29
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	8a a7       	std	Y+42, r24	; 0x2a
				LCD_Clear();
     652:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
				eeprom_read_block((void*)&stored_pass,(const void*)EEPROM_ADMIN_PASSWORD,sizeof(stored_pass));
     656:	44 e0       	ldi	r20, 0x04	; 4
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	63 e2       	ldi	r22, 0x23	; 35
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	ce 01       	movw	r24, r28
     660:	87 96       	adiw	r24, 0x27	; 39
     662:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <eeprom_read_block>
				
				
				if(ui8ComparePass(pass_check,stored_pass,password_size)==1){
     666:	44 e0       	ldi	r20, 0x04	; 4
     668:	be 01       	movw	r22, r28
     66a:	69 5d       	subi	r22, 0xD9	; 217
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	ce 01       	movw	r24, r28
     670:	8b 96       	adiw	r24, 0x2b	; 43
     672:	0e 94 7c 00 	call	0xf8	; 0xf8 <ui8ComparePass>
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	b9 f4       	brne	.+46     	; 0x6a8 <__EEPROM_REGION_LENGTH__+0x2a8>
					LCD_Clear();LCD_Write_String("Correct pass");LCD_String_xy(1,0,"Welcome sir");_delay_ms(250);
     67a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     67e:	8e ed       	ldi	r24, 0xDE	; 222
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     686:	4b ee       	ldi	r20, 0xEB	; 235
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     692:	2f ef       	ldi	r18, 0xFF	; 255
     694:	34 e3       	ldi	r19, 0x34	; 52
     696:	8c e0       	ldi	r24, 0x0C	; 12
     698:	21 50       	subi	r18, 0x01	; 1
     69a:	30 40       	sbci	r19, 0x00	; 0
     69c:	80 40       	sbci	r24, 0x00	; 0
     69e:	e1 f7       	brne	.-8      	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <__EEPROM_REGION_LENGTH__+0x2a2>
     6a2:	00 00       	nop
					Mode=ADMIN_MODE;
     6a4:	11 e0       	ldi	r17, 0x01	; 1
     6a6:	35 c1       	rjmp	.+618    	; 0x912 <__stack+0xb3>
				}else if(ui8ComparePass(pass_check,stored_pass,4)==0){
     6a8:	81 11       	cpse	r24, r1
     6aa:	33 c1       	rjmp	.+614    	; 0x912 <__stack+0xb3>
					LCD_Write_String(" Wrong pass");
     6ac:	87 ef       	ldi	r24, 0xF7	; 247
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
					timeout++;
     6b4:	73 94       	inc	r7
					LCD_Clear();LCD_Write_String("please reenter ");LCD_String_xy(1,0,"the password");_delay_ms(150);
     6b6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     6c2:	43 e1       	ldi	r20, 0x13	; 19
     6c4:	51 e0       	ldi	r21, 0x01	; 1
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     6ce:	9f ef       	ldi	r25, 0xFF	; 255
     6d0:	22 e5       	ldi	r18, 0x52	; 82
     6d2:	37 e0       	ldi	r19, 0x07	; 7
     6d4:	91 50       	subi	r25, 0x01	; 1
     6d6:	20 40       	sbci	r18, 0x00	; 0
     6d8:	30 40       	sbci	r19, 0x00	; 0
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <__EEPROM_REGION_LENGTH__+0x2d4>
     6dc:	00 c0       	rjmp	.+0      	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
     6de:	00 00       	nop
					Mode=NO_MODE;
					LCD_Clear();LCD_Write_String("Number of Trials");
     6e0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     6e4:	80 e2       	ldi	r24, 0x20	; 32
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	92 e5       	ldi	r25, 0x52	; 82
     6f0:	27 e0       	ldi	r18, 0x07	; 7
     6f2:	81 50       	subi	r24, 0x01	; 1
     6f4:	90 40       	sbci	r25, 0x00	; 0
     6f6:	20 40       	sbci	r18, 0x00	; 0
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <__EEPROM_REGION_LENGTH__+0x2f2>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <__EEPROM_REGION_LENGTH__+0x2fc>
     6fc:	00 00       	nop
					_delay_ms(150);
					LCD_String_xy(1,0,"NOF: ");
     6fe:	41 e3       	ldi	r20, 0x31	; 49
     700:	51 e0       	ldi	r21, 0x01	; 1
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
					LCD_Write_Number(Password_trials);_delay_ms(150);
     70a:	b6 01       	movw	r22, r12
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_Write_Number>
     714:	3f ef       	ldi	r19, 0xFF	; 255
     716:	82 e5       	ldi	r24, 0x52	; 82
     718:	97 e0       	ldi	r25, 0x07	; 7
     71a:	31 50       	subi	r19, 0x01	; 1
     71c:	80 40       	sbci	r24, 0x00	; 0
     71e:	90 40       	sbci	r25, 0x00	; 0
     720:	e1 f7       	brne	.-8      	; 0x71a <__EEPROM_REGION_LENGTH__+0x31a>
     722:	00 c0       	rjmp	.+0      	; 0x724 <__EEPROM_REGION_LENGTH__+0x324>
     724:	00 00       	nop
					Password_trials--;
     726:	21 e0       	ldi	r18, 0x01	; 1
     728:	c2 1a       	sub	r12, r18
     72a:	d1 08       	sbc	r13, r1
     72c:	f2 c0       	rjmp	.+484    	; 0x912 <__stack+0xb3>
				}
			}
			//***************************************************Guest Login*****************************************************
			else if(s=='2'){
     72e:	32 e3       	ldi	r19, 0x32	; 50
     730:	b3 12       	cpse	r11, r19
     732:	ef c0       	rjmp	.+478    	; 0x912 <__stack+0xb3>
				
				LCD_Clear();LCD_Write_String("Guest Mode");LCD_Clear();LCD_String_xy(0,0,"Name:");
     734:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     738:	87 e3       	ldi	r24, 0x37	; 55
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     740:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     744:	49 e8       	ldi	r20, 0x89	; 137
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
				name_size_2= eeprom_read_word((uint8_t*)EEPROM_GUEST_NAME_SIZE);
     750:	8c e3       	ldi	r24, 0x3C	; 60
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 0c 0b 	call	0x1618	; 0x1618 <eeprom_read_word>
				eeprom_read_block((void*)&Guest_name,(const void*)EEPROM_GUEST_NAME,name_size_2);
     758:	ac 01       	movw	r20, r24
     75a:	55 27       	eor	r21, r21
     75c:	62 e3       	ldi	r22, 0x32	; 50
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	ce 01       	movw	r24, r28
     762:	40 96       	adiw	r24, 0x10	; 16
     764:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <eeprom_read_block>
				LCD_String_xy(0,6,Guest_name);_delay_ms(10);
     768:	ae 01       	movw	r20, r28
     76a:	40 5f       	subi	r20, 0xF0	; 240
     76c:	5f 4f       	sbci	r21, 0xFF	; 255
     76e:	66 e0       	ldi	r22, 0x06	; 6
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     776:	8f e3       	ldi	r24, 0x3F	; 63
     778:	9c e9       	ldi	r25, 0x9C	; 156
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	f1 f7       	brne	.-4      	; 0x77a <__EEPROM_REGION_LENGTH__+0x37a>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <__EEPROM_REGION_LENGTH__+0x380>
     780:	00 00       	nop
				LCD_String_xy(1,0,"Password:");x=0;uint8_t pass_check[4]={0,0,0,0};
     782:	44 e9       	ldi	r20, 0x94	; 148
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     78e:	1b a6       	std	Y+43, r1	; 0x2b
     790:	1c a6       	std	Y+44, r1	; 0x2c
     792:	1d a6       	std	Y+45, r1	; 0x2d
     794:	1e a6       	std	Y+46, r1	; 0x2e
     796:	e1 2c       	mov	r14, r1
     798:	f1 2c       	mov	r15, r1
				while (x<password_size)
     79a:	41 c0       	rjmp	.+130    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     79c:	8f e3       	ldi	r24, 0x3F	; 63
     79e:	9c e9       	ldi	r25, 0x9C	; 156
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <__EEPROM_REGION_LENGTH__+0x3a0>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <__EEPROM_REGION_LENGTH__+0x3a6>
     7a6:	00 00       	nop
				{
					_delay_ms(10);
					uint8_t Bluetooth_Mode=UART_Received();
     7a8:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
					if(i!='0'){
     7ac:	00 33       	cpi	r16, 0x30	; 48
     7ae:	b9 f1       	breq	.+110    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
						if(Bluetooth_Mode=='1'|| Bluetooth_Mode=='2'|| Bluetooth_Mode=='3'|| Bluetooth_Mode=='4' || Bluetooth_Mode=='5' || Bluetooth_Mode=='6' || Bluetooth_Mode== '7' || Bluetooth_Mode=='8' || Bluetooth_Mode=='9' || i=='1'|| i=='2'|| i=='3'|| i=='4' || i=='5' || i=='6' || i== '7' || i=='8' || i=='9'){
     7b0:	9f ec       	ldi	r25, 0xCF	; 207
     7b2:	98 0f       	add	r25, r24
     7b4:	99 30       	cpi	r25, 0x09	; 9
     7b6:	90 f0       	brcs	.+36     	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
     7b8:	01 33       	cpi	r16, 0x31	; 49
     7ba:	81 f0       	breq	.+32     	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
     7bc:	02 33       	cpi	r16, 0x32	; 50
     7be:	71 f0       	breq	.+28     	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
     7c0:	03 33       	cpi	r16, 0x33	; 51
     7c2:	61 f0       	breq	.+24     	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
     7c4:	04 33       	cpi	r16, 0x34	; 52
     7c6:	51 f0       	breq	.+20     	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
     7c8:	05 33       	cpi	r16, 0x35	; 53
     7ca:	41 f0       	breq	.+16     	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
     7cc:	06 33       	cpi	r16, 0x36	; 54
     7ce:	31 f0       	breq	.+12     	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
     7d0:	07 33       	cpi	r16, 0x37	; 55
     7d2:	21 f0       	breq	.+8      	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
     7d4:	08 33       	cpi	r16, 0x38	; 56
     7d6:	11 f0       	breq	.+4      	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
     7d8:	09 33       	cpi	r16, 0x39	; 57
     7da:	09 f5       	brne	.+66     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
							pass_check[x]=Str_toint(Bluetooth_Mode);
     7dc:	0e 94 53 00 	call	0xa6	; 0xa6 <Str_toint>
     7e0:	eb e2       	ldi	r30, 0x2B	; 43
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	ec 0f       	add	r30, r28
     7e6:	fd 1f       	adc	r31, r29
     7e8:	ee 0d       	add	r30, r14
     7ea:	ff 1d       	adc	r31, r15
     7ec:	80 83       	st	Z, r24
							uint16_t counts =Str_toint(Bluetooth_Mode);
							LCD_Write_Number(counts);_delay_ms(50);
     7ee:	bc 01       	movw	r22, r24
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_Write_Number>
     7f8:	9f ef       	ldi	r25, 0xFF	; 255
     7fa:	20 e7       	ldi	r18, 0x70	; 112
     7fc:	32 e0       	ldi	r19, 0x02	; 2
     7fe:	91 50       	subi	r25, 0x01	; 1
     800:	20 40       	sbci	r18, 0x00	; 0
     802:	30 40       	sbci	r19, 0x00	; 0
     804:	e1 f7       	brne	.-8      	; 0x7fe <__EEPROM_REGION_LENGTH__+0x3fe>
     806:	00 c0       	rjmp	.+0      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     808:	00 00       	nop
							LCD_String_xy(1,9+x,"*");
     80a:	69 e0       	ldi	r22, 0x09	; 9
     80c:	6e 0d       	add	r22, r14
     80e:	4e e9       	ldi	r20, 0x9E	; 158
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
							x++;
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	e8 1a       	sub	r14, r24
     81c:	f8 0a       	sbc	r15, r24
				LCD_Clear();LCD_Write_String("Guest Mode");LCD_Clear();LCD_String_xy(0,0,"Name:");
				name_size_2= eeprom_read_word((uint8_t*)EEPROM_GUEST_NAME_SIZE);
				eeprom_read_block((void*)&Guest_name,(const void*)EEPROM_GUEST_NAME,name_size_2);
				LCD_String_xy(0,6,Guest_name);_delay_ms(10);
				LCD_String_xy(1,0,"Password:");x=0;uint8_t pass_check[4]={0,0,0,0};
				while (x<password_size)
     81e:	94 e0       	ldi	r25, 0x04	; 4
     820:	e9 16       	cp	r14, r25
     822:	f1 04       	cpc	r15, r1
     824:	08 f4       	brcc	.+2      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     826:	ba cf       	rjmp	.-140    	; 0x79c <__EEPROM_REGION_LENGTH__+0x39c>
							x++;
						}
					}
					
				}
				uint8_t stored_pass[4]={1,2,4,3};
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	8f a3       	std	Y+39, r24	; 0x27
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	88 a7       	std	Y+40, r24	; 0x28
     830:	84 e0       	ldi	r24, 0x04	; 4
     832:	89 a7       	std	Y+41, r24	; 0x29
     834:	83 e0       	ldi	r24, 0x03	; 3
     836:	8a a7       	std	Y+42, r24	; 0x2a
				LCD_Clear();
     838:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
				eeprom_read_block((void*)&stored_pass,(const void*)EEPROM_GUEST_PASSWORD,sizeof(stored_pass));
     83c:	44 e0       	ldi	r20, 0x04	; 4
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	67 e3       	ldi	r22, 0x37	; 55
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	ce 01       	movw	r24, r28
     846:	87 96       	adiw	r24, 0x27	; 39
     848:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <eeprom_read_block>
				
				
				if(ui8ComparePass(pass_check,stored_pass,password_size)==1){
     84c:	44 e0       	ldi	r20, 0x04	; 4
     84e:	be 01       	movw	r22, r28
     850:	69 5d       	subi	r22, 0xD9	; 217
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	ce 01       	movw	r24, r28
     856:	8b 96       	adiw	r24, 0x2b	; 43
     858:	0e 94 7c 00 	call	0xf8	; 0xf8 <ui8ComparePass>
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	b9 f4       	brne	.+46     	; 0x88e <__stack+0x2f>
					LCD_Clear();LCD_Write_String("Correct pass");LCD_String_xy(1,0,"Welcome sir");_delay_ms(250);
     860:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     864:	8e ed       	ldi	r24, 0xDE	; 222
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     86c:	4b ee       	ldi	r20, 0xEB	; 235
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     878:	2f ef       	ldi	r18, 0xFF	; 255
     87a:	34 e3       	ldi	r19, 0x34	; 52
     87c:	8c e0       	ldi	r24, 0x0C	; 12
     87e:	21 50       	subi	r18, 0x01	; 1
     880:	30 40       	sbci	r19, 0x00	; 0
     882:	80 40       	sbci	r24, 0x00	; 0
     884:	e1 f7       	brne	.-8      	; 0x87e <__stack+0x1f>
     886:	00 c0       	rjmp	.+0      	; 0x888 <__stack+0x29>
     888:	00 00       	nop
					Mode=GUEST_MODE;
     88a:	12 e0       	ldi	r17, 0x02	; 2
     88c:	42 c0       	rjmp	.+132    	; 0x912 <__stack+0xb3>
					}else if(ui8ComparePass(pass_check,stored_pass,4)==0){
     88e:	81 11       	cpse	r24, r1
     890:	40 c0       	rjmp	.+128    	; 0x912 <__stack+0xb3>
					LCD_Write_String(" Wrong pass");
     892:	87 ef       	ldi	r24, 0xF7	; 247
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
					timeout++;
     89a:	73 94       	inc	r7
					LCD_Clear();LCD_Write_String("please reenter ");LCD_String_xy(1,0,"the password");_delay_ms(150);
     89c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     8a8:	43 e1       	ldi	r20, 0x13	; 19
     8aa:	51 e0       	ldi	r21, 0x01	; 1
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     8b4:	9f ef       	ldi	r25, 0xFF	; 255
     8b6:	22 e5       	ldi	r18, 0x52	; 82
     8b8:	37 e0       	ldi	r19, 0x07	; 7
     8ba:	91 50       	subi	r25, 0x01	; 1
     8bc:	20 40       	sbci	r18, 0x00	; 0
     8be:	30 40       	sbci	r19, 0x00	; 0
     8c0:	e1 f7       	brne	.-8      	; 0x8ba <__stack+0x5b>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <__stack+0x65>
     8c4:	00 00       	nop
					Mode=NO_MODE;
					LCD_Clear();LCD_Write_String("Number of Trials");
     8c6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     8ca:	80 e2       	ldi	r24, 0x20	; 32
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	92 e5       	ldi	r25, 0x52	; 82
     8d6:	27 e0       	ldi	r18, 0x07	; 7
     8d8:	81 50       	subi	r24, 0x01	; 1
     8da:	90 40       	sbci	r25, 0x00	; 0
     8dc:	20 40       	sbci	r18, 0x00	; 0
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <__stack+0x79>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <__stack+0x83>
     8e2:	00 00       	nop
					_delay_ms(150);
					LCD_String_xy(1,0,"NOF: ");
     8e4:	41 e3       	ldi	r20, 0x31	; 49
     8e6:	51 e0       	ldi	r21, 0x01	; 1
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
					LCD_Write_Number(Password_trials);_delay_ms(150);
     8f0:	b6 01       	movw	r22, r12
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_Write_Number>
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	82 e5       	ldi	r24, 0x52	; 82
     8fe:	97 e0       	ldi	r25, 0x07	; 7
     900:	31 50       	subi	r19, 0x01	; 1
     902:	80 40       	sbci	r24, 0x00	; 0
     904:	90 40       	sbci	r25, 0x00	; 0
     906:	e1 f7       	brne	.-8      	; 0x900 <__stack+0xa1>
     908:	00 c0       	rjmp	.+0      	; 0x90a <__stack+0xab>
     90a:	00 00       	nop
					Password_trials--;
     90c:	21 e0       	ldi	r18, 0x01	; 1
     90e:	c2 1a       	sub	r12, r18
     910:	d1 08       	sbc	r13, r1
		}
		//\\ ***************************************************Check for Password *************************************************************//\\			
		else if(eeprom_read_byte(ADMIN_PASS_STATUS_ADDRESS)==1 || eeprom_read_byte(GUEST_PASS_STATUS_ADDRESS)==1) {
			LCD_Clear();LCD_String_xy(0,0,"1:Admin 2: Guest");
			uint8_t s=UART_Received();
		while(timeout<3 && Mode==NO_MODE){
     912:	32 e0       	ldi	r19, 0x02	; 2
     914:	37 15       	cp	r19, r7
     916:	18 f0       	brcs	.+6      	; 0x91e <__stack+0xbf>
     918:	11 23       	and	r17, r17
     91a:	09 f4       	brne	.+2      	; 0x91e <__stack+0xbf>
     91c:	15 ce       	rjmp	.-982    	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
				

			}
				}
				//***************************************************Trials Number**********************************************
				if(timeout==3){
     91e:	83 e0       	ldi	r24, 0x03	; 3
     920:	78 12       	cpse	r7, r24
     922:	19 c0       	rjmp	.+50     	; 0x956 <__stack+0xf7>
					LCD_Clear();
     924:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
					LCD_Write_String("Wrong Password");
     928:	82 e4       	ldi	r24, 0x42	; 66
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
					LCD_String_xy(1,0,"Entered 3 Times");LCD_Clear();LCD_Write_String("i will call 911 ");LCD_String_xy(1,0,":):):(:(");
     930:	41 e5       	ldi	r20, 0x51	; 81
     932:	51 e0       	ldi	r21, 0x01	; 1
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     93c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     940:	81 e6       	ldi	r24, 0x61	; 97
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     948:	42 e7       	ldi	r20, 0x72	; 114
     94a:	51 e0       	ldi	r21, 0x01	; 1
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
					Mode=NO_MODE;
     954:	10 e0       	ldi	r17, 0x00	; 0
					}
			//******************************************************Guest Password********************************************************************
				
		
		value++;
     956:	9f ef       	ldi	r25, 0xFF	; 255
     958:	49 1a       	sub	r4, r25
     95a:	59 0a       	sbc	r5, r25
	KEYPAD_Initialize();
	uint8_t Admin_Password[4],Guest_password[4];
	SPI_Master_Initialize();
	uint8_t name_size_1, name_size_2;
	//******************************************************Admin Registration*************************************************************/
	while (value<1	){
     95c:	41 14       	cp	r4, r1
     95e:	51 04       	cpc	r5, r1
     960:	09 f4       	brne	.+2      	; 0x964 <__stack+0x105>
     962:	03 cc       	rjmp	.-2042   	; 0x16a <main+0x46>
	
	
					
//**************************************************************** CONTROL OF THE HOUSE***************************************************\/
	while (1){
		switch (Mode)
     964:	11 30       	cpi	r17, 0x01	; 1
     966:	21 f0       	breq	.+8      	; 0x970 <__stack+0x111>
     968:	12 30       	cpi	r17, 0x02	; 2
     96a:	09 f4       	brne	.+2      	; 0x96e <__stack+0x10f>
     96c:	76 c1       	rjmp	.+748    	; 0xc5a <__stack+0x3fb>
     96e:	a5 c2       	rjmp	.+1354   	; 0xeba <__stack+0x65b>
		{
		case ADMIN_MODE :
		LCD_Clear();
     970:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
		
		LCD_String_xy(0,0,"1:Room1  2:Room2");LCD_String_xy(1,0,"3:Door  4:AC");_delay_ms(500);
     974:	4b e7       	ldi	r20, 0x7B	; 123
     976:	51 e0       	ldi	r21, 0x01	; 1
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     980:	4c e8       	ldi	r20, 0x8C	; 140
     982:	51 e0       	ldi	r21, 0x01	; 1
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     98c:	2f ef       	ldi	r18, 0xFF	; 255
     98e:	39 e6       	ldi	r19, 0x69	; 105
     990:	88 e1       	ldi	r24, 0x18	; 24
     992:	21 50       	subi	r18, 0x01	; 1
     994:	30 40       	sbci	r19, 0x00	; 0
     996:	80 40       	sbci	r24, 0x00	; 0
     998:	e1 f7       	brne	.-8      	; 0x992 <__stack+0x133>
     99a:	00 c0       	rjmp	.+0      	; 0x99c <__stack+0x13d>
     99c:	00 00       	nop
		
		uint8_t pressed_number=UART_Received();
     99e:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
     9a2:	08 2f       	mov	r16, r24
		uint8_t responce =SPI_TranCeive(0);
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
		switch (pressed_number)
     9aa:	02 33       	cpi	r16, 0x32	; 50
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <__stack+0x151>
     9ae:	6a c0       	rjmp	.+212    	; 0xa84 <__stack+0x225>
     9b0:	18 f4       	brcc	.+6      	; 0x9b8 <__stack+0x159>
     9b2:	01 33       	cpi	r16, 0x31	; 49
     9b4:	41 f0       	breq	.+16     	; 0x9c6 <__stack+0x167>
     9b6:	81 c2       	rjmp	.+1282   	; 0xeba <__stack+0x65b>
     9b8:	03 33       	cpi	r16, 0x33	; 51
     9ba:	09 f4       	brne	.+2      	; 0x9be <__stack+0x15f>
     9bc:	c2 c0       	rjmp	.+388    	; 0xb42 <__stack+0x2e3>
     9be:	04 33       	cpi	r16, 0x34	; 52
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <__stack+0x165>
     9c2:	03 c1       	rjmp	.+518    	; 0xbca <__stack+0x36b>
     9c4:	7a c2       	rjmp	.+1268   	; 0xeba <__stack+0x65b>
		{
		case '1'://************************************Room 1 control ***************************************
			 responce=SPI_TranCeive(1);
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
			 LCD_Clear();LCD_String_xy(0,0,"Room 1");_delay_ms(100);
     9cc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     9d0:	49 e9       	ldi	r20, 0x99	; 153
     9d2:	51 e0       	ldi	r21, 0x01	; 1
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     9dc:	9f ef       	ldi	r25, 0xFF	; 255
     9de:	21 ee       	ldi	r18, 0xE1	; 225
     9e0:	34 e0       	ldi	r19, 0x04	; 4
     9e2:	91 50       	subi	r25, 0x01	; 1
     9e4:	20 40       	sbci	r18, 0x00	; 0
     9e6:	30 40       	sbci	r19, 0x00	; 0
     9e8:	e1 f7       	brne	.-8      	; 0x9e2 <__stack+0x183>
     9ea:	00 c0       	rjmp	.+0      	; 0x9ec <__stack+0x18d>
     9ec:	00 00       	nop
			 
			 LCD_Clear();LCD_String_xy(0,0,"1:Status 2:Open light");LCD_String_xy(1,0,"3:Turn OFF Light");
     9ee:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     9f2:	40 ea       	ldi	r20, 0xA0	; 160
     9f4:	51 e0       	ldi	r21, 0x01	; 1
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     9fe:	46 eb       	ldi	r20, 0xB6	; 182
     a00:	51 e0       	ldi	r21, 0x01	; 1
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
			 pressed_number=UART_Received();
     a0a:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
			 if(pressed_number=='2'){responce=SPI_TranCeive(2);LCD_Clear();LCD_String_xy(0,0,"Lights are ON");}
     a0e:	82 33       	cpi	r24, 0x32	; 50
     a10:	61 f4       	brne	.+24     	; 0xa2a <__stack+0x1cb>
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
     a18:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     a1c:	47 ec       	ldi	r20, 0xC7	; 199
     a1e:	51 e0       	ldi	r21, 0x01	; 1
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     a28:	48 c2       	rjmp	.+1168   	; 0xeba <__stack+0x65b>
				 else if(pressed_number=='1'){
     a2a:	81 33       	cpi	r24, 0x31	; 49
     a2c:	21 f5       	brne	.+72     	; 0xa76 <__stack+0x217>
					 responce=SPI_TranCeive(1);
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
					 LCD_Clear();
     a34:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
					 responce=SPI_TranCeive(1);
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
					 if(responce==1)LCD_String_xy(0,0,"lights are on");else if(responce==0)LCD_String_xy(0,0,"lights are off");
     a3e:	81 30       	cpi	r24, 0x01	; 1
     a40:	39 f4       	brne	.+14     	; 0xa50 <__stack+0x1f1>
     a42:	45 ed       	ldi	r20, 0xD5	; 213
     a44:	51 e0       	ldi	r21, 0x01	; 1
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     a4e:	07 c0       	rjmp	.+14     	; 0xa5e <__stack+0x1ff>
     a50:	81 11       	cpse	r24, r1
     a52:	05 c0       	rjmp	.+10     	; 0xa5e <__stack+0x1ff>
     a54:	43 ee       	ldi	r20, 0xE3	; 227
     a56:	51 e0       	ldi	r21, 0x01	; 1
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	99 e6       	ldi	r25, 0x69	; 105
     a62:	28 e1       	ldi	r18, 0x18	; 24
     a64:	81 50       	subi	r24, 0x01	; 1
     a66:	90 40       	sbci	r25, 0x00	; 0
     a68:	20 40       	sbci	r18, 0x00	; 0
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <__stack+0x205>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <__stack+0x20f>
     a6e:	00 00       	nop
					 _delay_ms(500);
					 LCD_Clear();
     a70:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     a74:	22 c2       	rjmp	.+1092   	; 0xeba <__stack+0x65b>
				 }else if(pressed_number=='3')responce=SPI_TranCeive(3);
     a76:	83 33       	cpi	r24, 0x33	; 51
     a78:	09 f0       	breq	.+2      	; 0xa7c <__stack+0x21d>
     a7a:	1f c2       	rjmp	.+1086   	; 0xeba <__stack+0x65b>
     a7c:	83 e0       	ldi	r24, 0x03	; 3
     a7e:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
     a82:	1b c2       	rjmp	.+1078   	; 0xeba <__stack+0x65b>
			break;
		case '2'://************************************Room 2 control ***************************************
			 LCD_Clear();LCD_String_xy(0,0,"Room 2");_delay_ms(500);
     a84:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     a88:	42 ef       	ldi	r20, 0xF2	; 242
     a8a:	51 e0       	ldi	r21, 0x01	; 1
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     a94:	3f ef       	ldi	r19, 0xFF	; 255
     a96:	89 e6       	ldi	r24, 0x69	; 105
     a98:	98 e1       	ldi	r25, 0x18	; 24
     a9a:	31 50       	subi	r19, 0x01	; 1
     a9c:	80 40       	sbci	r24, 0x00	; 0
     a9e:	90 40       	sbci	r25, 0x00	; 0
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <__stack+0x23b>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <__stack+0x245>
     aa4:	00 00       	nop
			 responce=SPI_TranCeive(2);
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
			 LCD_Clear();LCD_String_xy(0,0,"1:Status 2:Open light");LCD_String_xy(1,0,"3:Turn OFF Light");
     aac:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     ab0:	40 ea       	ldi	r20, 0xA0	; 160
     ab2:	51 e0       	ldi	r21, 0x01	; 1
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     abc:	46 eb       	ldi	r20, 0xB6	; 182
     abe:	51 e0       	ldi	r21, 0x01	; 1
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
			 pressed_number=UART_Received();
     ac8:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
			 if(pressed_number=='2'){responce=SPI_TranCeive(2);LCD_Clear();LCD_String_xy(0,0,"Lights are ON");}
     acc:	82 33       	cpi	r24, 0x32	; 50
     ace:	61 f4       	brne	.+24     	; 0xae8 <__stack+0x289>
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
     ad6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     ada:	47 ec       	ldi	r20, 0xC7	; 199
     adc:	51 e0       	ldi	r21, 0x01	; 1
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     ae6:	e9 c1       	rjmp	.+978    	; 0xeba <__stack+0x65b>
			 else if(pressed_number=='1'){
     ae8:	81 33       	cpi	r24, 0x31	; 49
     aea:	21 f5       	brne	.+72     	; 0xb34 <__stack+0x2d5>
				 responce=SPI_TranCeive(1);
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
				 LCD_Clear();
     af2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
				 responce=SPI_TranCeive(1);
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
				 if(responce==1)LCD_String_xy(0,0,"Room lights on");else if(responce==0)LCD_String_xy(0,0,"Room lights off");
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	39 f4       	brne	.+14     	; 0xb0e <__stack+0x2af>
     b00:	49 ef       	ldi	r20, 0xF9	; 249
     b02:	51 e0       	ldi	r21, 0x01	; 1
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     b0c:	07 c0       	rjmp	.+14     	; 0xb1c <__stack+0x2bd>
     b0e:	81 11       	cpse	r24, r1
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__stack+0x2bd>
     b12:	48 e0       	ldi	r20, 0x08	; 8
     b14:	52 e0       	ldi	r21, 0x02	; 2
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     b1c:	2f ef       	ldi	r18, 0xFF	; 255
     b1e:	39 e6       	ldi	r19, 0x69	; 105
     b20:	88 e1       	ldi	r24, 0x18	; 24
     b22:	21 50       	subi	r18, 0x01	; 1
     b24:	30 40       	sbci	r19, 0x00	; 0
     b26:	80 40       	sbci	r24, 0x00	; 0
     b28:	e1 f7       	brne	.-8      	; 0xb22 <__stack+0x2c3>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <__stack+0x2cd>
     b2c:	00 00       	nop
				 _delay_ms(500);
				 LCD_Clear();
     b2e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     b32:	c3 c1       	rjmp	.+902    	; 0xeba <__stack+0x65b>
			 }else if(pressed_number=='3')responce=SPI_TranCeive(3);
     b34:	83 33       	cpi	r24, 0x33	; 51
     b36:	09 f0       	breq	.+2      	; 0xb3a <__stack+0x2db>
     b38:	c0 c1       	rjmp	.+896    	; 0xeba <__stack+0x65b>
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
     b40:	bc c1       	rjmp	.+888    	; 0xeba <__stack+0x65b>
		 
			break;
		case '3':
		 responce =SPI_TranCeive(3);
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
			
			LCD_Clear();
     b48:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
			LCD_String_xy(0,0,"1:Open door");
     b4c:	48 e1       	ldi	r20, 0x18	; 24
     b4e:	52 e0       	ldi	r21, 0x02	; 2
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
			LCD_String_xy(1,0,"2:Close Door");
     b58:	44 e2       	ldi	r20, 0x24	; 36
     b5a:	52 e0       	ldi	r21, 0x02	; 2
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     b64:	9f ef       	ldi	r25, 0xFF	; 255
     b66:	29 e6       	ldi	r18, 0x69	; 105
     b68:	38 e1       	ldi	r19, 0x18	; 24
     b6a:	91 50       	subi	r25, 0x01	; 1
     b6c:	20 40       	sbci	r18, 0x00	; 0
     b6e:	30 40       	sbci	r19, 0x00	; 0
     b70:	e1 f7       	brne	.-8      	; 0xb6a <__stack+0x30b>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <__stack+0x315>
     b74:	00 00       	nop
			_delay_ms(500);
			pressed_number=UART_Received();
     b76:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
     b7a:	9f ef       	ldi	r25, 0xFF	; 255
     b7c:	21 ee       	ldi	r18, 0xE1	; 225
     b7e:	34 e0       	ldi	r19, 0x04	; 4
     b80:	91 50       	subi	r25, 0x01	; 1
     b82:	20 40       	sbci	r18, 0x00	; 0
     b84:	30 40       	sbci	r19, 0x00	; 0
     b86:	e1 f7       	brne	.-8      	; 0xb80 <__stack+0x321>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <__stack+0x32b>
     b8a:	00 00       	nop
			_delay_ms(100);
			if(pressed_number=='1'){
     b8c:	81 33       	cpi	r24, 0x31	; 49
     b8e:	51 f4       	brne	.+20     	; 0xba4 <__stack+0x345>
				responce=SPI_TranCeive(1);
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
				LCD_Clear();
     b96:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
				LCD_Write_String("Doors Open!");
     b9a:	81 e3       	ldi	r24, 0x31	; 49
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     ba2:	09 c0       	rjmp	.+18     	; 0xbb6 <__stack+0x357>
				
				}
			else if(pressed_number=='2'){
     ba4:	82 33       	cpi	r24, 0x32	; 50
     ba6:	39 f4       	brne	.+14     	; 0xbb6 <__stack+0x357>
				responce=SPI_TranCeive(2);
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
				LCD_Write_String("Doors Closed!");
     bae:	8d e3       	ldi	r24, 0x3D	; 61
     bb0:	92 e0       	ldi	r25, 0x02	; 2
     bb2:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	99 e6       	ldi	r25, 0x69	; 105
     bba:	28 e1       	ldi	r18, 0x18	; 24
     bbc:	81 50       	subi	r24, 0x01	; 1
     bbe:	90 40       	sbci	r25, 0x00	; 0
     bc0:	20 40       	sbci	r18, 0x00	; 0
     bc2:	e1 f7       	brne	.-8      	; 0xbbc <__stack+0x35d>
     bc4:	00 c0       	rjmp	.+0      	; 0xbc6 <__stack+0x367>
     bc6:	00 00       	nop
     bc8:	78 c1       	rjmp	.+752    	; 0xeba <__stack+0x65b>
					}
			_delay_ms(500);
			break;
		case '4':
		 responce =SPI_TranCeive(4);LCD_Clear();_delay_ms(100);
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
     bd0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     bd4:	3f ef       	ldi	r19, 0xFF	; 255
     bd6:	81 ee       	ldi	r24, 0xE1	; 225
     bd8:	94 e0       	ldi	r25, 0x04	; 4
     bda:	31 50       	subi	r19, 0x01	; 1
     bdc:	80 40       	sbci	r24, 0x00	; 0
     bde:	90 40       	sbci	r25, 0x00	; 0
     be0:	e1 f7       	brne	.-8      	; 0xbda <__stack+0x37b>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <__stack+0x385>
     be4:	00 00       	nop
		 LCD_String_xy(0,0,"1:Turn on Ac");LCD_String_xy(1,0,"2:Turn off Ac");pressed_number=UART_Received();_delay_ms(100);
     be6:	4b e4       	ldi	r20, 0x4B	; 75
     be8:	52 e0       	ldi	r21, 0x02	; 2
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     bf2:	48 e5       	ldi	r20, 0x58	; 88
     bf4:	52 e0       	ldi	r21, 0x02	; 2
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     bfe:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
     c02:	2f ef       	ldi	r18, 0xFF	; 255
     c04:	31 ee       	ldi	r19, 0xE1	; 225
     c06:	94 e0       	ldi	r25, 0x04	; 4
     c08:	21 50       	subi	r18, 0x01	; 1
     c0a:	30 40       	sbci	r19, 0x00	; 0
     c0c:	90 40       	sbci	r25, 0x00	; 0
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <__stack+0x3a9>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <__stack+0x3b3>
     c12:	00 00       	nop
		 if(pressed_number=='1'){
     c14:	81 33       	cpi	r24, 0x31	; 49
     c16:	79 f4       	brne	.+30     	; 0xc36 <__stack+0x3d7>
			 LCD_Clear();LCD_String_xy(0,0,"Temp Higher");
     c18:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     c1c:	46 e6       	ldi	r20, 0x66	; 102
     c1e:	52 e0       	ldi	r21, 0x02	; 2
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
			 LCD_String_xy(1,0,"than 30^C");
     c28:	42 e7       	ldi	r20, 0x72	; 114
     c2a:	52 e0       	ldi	r21, 0x02	; 2
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     c34:	42 c1       	rjmp	.+644    	; 0xeba <__stack+0x65b>
			 }else if(pressed_number=='2'){
     c36:	82 33       	cpi	r24, 0x32	; 50
     c38:	09 f0       	breq	.+2      	; 0xc3c <__stack+0x3dd>
     c3a:	3f c1       	rjmp	.+638    	; 0xeba <__stack+0x65b>
				LCD_Clear();LCD_String_xy(0,0,"Temp Lower");
     c3c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     c40:	4c e7       	ldi	r20, 0x7C	; 124
     c42:	52 e0       	ldi	r21, 0x02	; 2
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
				LCD_String_xy(1,0,"than 21^C");
     c4c:	47 e8       	ldi	r20, 0x87	; 135
     c4e:	52 e0       	ldi	r21, 0x02	; 2
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     c58:	30 c1       	rjmp	.+608    	; 0xeba <__stack+0x65b>
		}
		break;
//********************************************************Guest Mode*******************************************************
		
			case GUEST_MODE:
				LCD_Clear();
     c5a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
		
		LCD_String_xy(0,0,"1:Room1  2:Room2");LCD_String_xy(1,0,"3:AC");_delay_ms(500);
     c5e:	4b e7       	ldi	r20, 0x7B	; 123
     c60:	51 e0       	ldi	r21, 0x01	; 1
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     c6a:	41 e9       	ldi	r20, 0x91	; 145
     c6c:	52 e0       	ldi	r21, 0x02	; 2
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     c76:	2f ef       	ldi	r18, 0xFF	; 255
     c78:	39 e6       	ldi	r19, 0x69	; 105
     c7a:	88 e1       	ldi	r24, 0x18	; 24
     c7c:	21 50       	subi	r18, 0x01	; 1
     c7e:	30 40       	sbci	r19, 0x00	; 0
     c80:	80 40       	sbci	r24, 0x00	; 0
     c82:	e1 f7       	brne	.-8      	; 0xc7c <__stack+0x41d>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <__stack+0x427>
     c86:	00 00       	nop
		
		pressed_number=UART_Received();
     c88:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
     c8c:	08 2f       	mov	r16, r24
		responce =SPI_TranCeive(0);
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
		switch (pressed_number)
     c94:	02 33       	cpi	r16, 0x32	; 50
     c96:	09 f4       	brne	.+2      	; 0xc9a <__stack+0x43b>
     c98:	65 c0       	rjmp	.+202    	; 0xd64 <__stack+0x505>
     c9a:	03 33       	cpi	r16, 0x33	; 51
     c9c:	09 f4       	brne	.+2      	; 0xca0 <__stack+0x441>
     c9e:	c1 c0       	rjmp	.+386    	; 0xe22 <__stack+0x5c3>
     ca0:	01 33       	cpi	r16, 0x31	; 49
     ca2:	09 f0       	breq	.+2      	; 0xca6 <__stack+0x447>
     ca4:	0a c1       	rjmp	.+532    	; 0xeba <__stack+0x65b>
		{
		case '1'://************************************Room 1 control ***************************************
			 responce=SPI_TranCeive(1);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
			 LCD_Clear();LCD_String_xy(0,0,"Room 1");_delay_ms(100);
     cac:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     cb0:	49 e9       	ldi	r20, 0x99	; 153
     cb2:	51 e0       	ldi	r21, 0x01	; 1
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     cbc:	9f ef       	ldi	r25, 0xFF	; 255
     cbe:	21 ee       	ldi	r18, 0xE1	; 225
     cc0:	34 e0       	ldi	r19, 0x04	; 4
     cc2:	91 50       	subi	r25, 0x01	; 1
     cc4:	20 40       	sbci	r18, 0x00	; 0
     cc6:	30 40       	sbci	r19, 0x00	; 0
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <__stack+0x463>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <__stack+0x46d>
     ccc:	00 00       	nop
			 
			 LCD_Clear();LCD_String_xy(0,0,"1:Status 2:Open light");LCD_String_xy(1,0,"3:Turn OFF Light");
     cce:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     cd2:	40 ea       	ldi	r20, 0xA0	; 160
     cd4:	51 e0       	ldi	r21, 0x01	; 1
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     cde:	46 eb       	ldi	r20, 0xB6	; 182
     ce0:	51 e0       	ldi	r21, 0x01	; 1
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
			 pressed_number=UART_Received();
     cea:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
			 if(pressed_number=='2'){responce=SPI_TranCeive(2);LCD_Clear();LCD_String_xy(0,0,"Lights are ON");}
     cee:	82 33       	cpi	r24, 0x32	; 50
     cf0:	61 f4       	brne	.+24     	; 0xd0a <__stack+0x4ab>
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
     cf8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     cfc:	47 ec       	ldi	r20, 0xC7	; 199
     cfe:	51 e0       	ldi	r21, 0x01	; 1
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     d08:	d8 c0       	rjmp	.+432    	; 0xeba <__stack+0x65b>
				 else if(pressed_number=='1'){
     d0a:	81 33       	cpi	r24, 0x31	; 49
     d0c:	21 f5       	brne	.+72     	; 0xd56 <__stack+0x4f7>
					 responce=SPI_TranCeive(1);
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
					 LCD_Clear();
     d14:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
					 responce=SPI_TranCeive(1);
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
					 if(responce==1)LCD_String_xy(0,0,"lights are on");else if(responce==0)LCD_String_xy(0,0,"lights are off");
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	39 f4       	brne	.+14     	; 0xd30 <__stack+0x4d1>
     d22:	45 ed       	ldi	r20, 0xD5	; 213
     d24:	51 e0       	ldi	r21, 0x01	; 1
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     d2e:	07 c0       	rjmp	.+14     	; 0xd3e <__stack+0x4df>
     d30:	81 11       	cpse	r24, r1
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__stack+0x4df>
     d34:	43 ee       	ldi	r20, 0xE3	; 227
     d36:	51 e0       	ldi	r21, 0x01	; 1
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     d3e:	8f ef       	ldi	r24, 0xFF	; 255
     d40:	99 e6       	ldi	r25, 0x69	; 105
     d42:	28 e1       	ldi	r18, 0x18	; 24
     d44:	81 50       	subi	r24, 0x01	; 1
     d46:	90 40       	sbci	r25, 0x00	; 0
     d48:	20 40       	sbci	r18, 0x00	; 0
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <__stack+0x4e5>
     d4c:	00 c0       	rjmp	.+0      	; 0xd4e <__stack+0x4ef>
     d4e:	00 00       	nop
					 _delay_ms(500);
					 LCD_Clear();
     d50:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     d54:	b2 c0       	rjmp	.+356    	; 0xeba <__stack+0x65b>
				 }else if(pressed_number=='3')responce=SPI_TranCeive(3);
     d56:	83 33       	cpi	r24, 0x33	; 51
     d58:	09 f0       	breq	.+2      	; 0xd5c <__stack+0x4fd>
     d5a:	af c0       	rjmp	.+350    	; 0xeba <__stack+0x65b>
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
     d62:	ab c0       	rjmp	.+342    	; 0xeba <__stack+0x65b>
			break;
		case '2'://************************************Room 2 control ***************************************
			 LCD_Clear();LCD_String_xy(0,0,"Room 2");_delay_ms(500);
     d64:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     d68:	42 ef       	ldi	r20, 0xF2	; 242
     d6a:	51 e0       	ldi	r21, 0x01	; 1
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     d74:	3f ef       	ldi	r19, 0xFF	; 255
     d76:	89 e6       	ldi	r24, 0x69	; 105
     d78:	98 e1       	ldi	r25, 0x18	; 24
     d7a:	31 50       	subi	r19, 0x01	; 1
     d7c:	80 40       	sbci	r24, 0x00	; 0
     d7e:	90 40       	sbci	r25, 0x00	; 0
     d80:	e1 f7       	brne	.-8      	; 0xd7a <__stack+0x51b>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <__stack+0x525>
     d84:	00 00       	nop
			 responce=SPI_TranCeive(2);
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
			 LCD_Clear();LCD_String_xy(0,0,"1:Status 2:Open light");LCD_String_xy(1,0,"3:Turn OFF Light");
     d8c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     d90:	40 ea       	ldi	r20, 0xA0	; 160
     d92:	51 e0       	ldi	r21, 0x01	; 1
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     d9c:	46 eb       	ldi	r20, 0xB6	; 182
     d9e:	51 e0       	ldi	r21, 0x01	; 1
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
			 pressed_number=UART_Received();
     da8:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
			 if(pressed_number=='2'){responce=SPI_TranCeive(2);LCD_Clear();LCD_String_xy(0,0,"Lights are ON");}
     dac:	82 33       	cpi	r24, 0x32	; 50
     dae:	61 f4       	brne	.+24     	; 0xdc8 <__stack+0x569>
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
     db6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     dba:	47 ec       	ldi	r20, 0xC7	; 199
     dbc:	51 e0       	ldi	r21, 0x01	; 1
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     dc6:	79 c0       	rjmp	.+242    	; 0xeba <__stack+0x65b>
			 else if(pressed_number=='1'){
     dc8:	81 33       	cpi	r24, 0x31	; 49
     dca:	21 f5       	brne	.+72     	; 0xe14 <__stack+0x5b5>
				 responce=SPI_TranCeive(1);
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
				 LCD_Clear();
     dd2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
				 responce=SPI_TranCeive(1);
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
				 if(responce==1)LCD_String_xy(0,0,"Room lights on");else if(responce==0)LCD_String_xy(0,0,"Room lights off");
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	39 f4       	brne	.+14     	; 0xdee <__stack+0x58f>
     de0:	49 ef       	ldi	r20, 0xF9	; 249
     de2:	51 e0       	ldi	r21, 0x01	; 1
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <__stack+0x59d>
     dee:	81 11       	cpse	r24, r1
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <__stack+0x59d>
     df2:	48 e0       	ldi	r20, 0x08	; 8
     df4:	52 e0       	ldi	r21, 0x02	; 2
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     dfc:	2f ef       	ldi	r18, 0xFF	; 255
     dfe:	39 e6       	ldi	r19, 0x69	; 105
     e00:	88 e1       	ldi	r24, 0x18	; 24
     e02:	21 50       	subi	r18, 0x01	; 1
     e04:	30 40       	sbci	r19, 0x00	; 0
     e06:	80 40       	sbci	r24, 0x00	; 0
     e08:	e1 f7       	brne	.-8      	; 0xe02 <__stack+0x5a3>
     e0a:	00 c0       	rjmp	.+0      	; 0xe0c <__stack+0x5ad>
     e0c:	00 00       	nop
				 _delay_ms(500);
				 LCD_Clear();
     e0e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     e12:	53 c0       	rjmp	.+166    	; 0xeba <__stack+0x65b>
			 }else if(pressed_number=='3')responce=SPI_TranCeive(3);
     e14:	83 33       	cpi	r24, 0x33	; 51
     e16:	09 f0       	breq	.+2      	; 0xe1a <__stack+0x5bb>
     e18:	50 c0       	rjmp	.+160    	; 0xeba <__stack+0x65b>
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
     e20:	4c c0       	rjmp	.+152    	; 0xeba <__stack+0x65b>
		 
			break;
			
		case '3':
		responce =SPI_TranCeive(4);LCD_Clear();_delay_ms(100);
     e22:	84 e0       	ldi	r24, 0x04	; 4
     e24:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
     e28:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     e2c:	9f ef       	ldi	r25, 0xFF	; 255
     e2e:	21 ee       	ldi	r18, 0xE1	; 225
     e30:	34 e0       	ldi	r19, 0x04	; 4
     e32:	91 50       	subi	r25, 0x01	; 1
     e34:	20 40       	sbci	r18, 0x00	; 0
     e36:	30 40       	sbci	r19, 0x00	; 0
     e38:	e1 f7       	brne	.-8      	; 0xe32 <__stack+0x5d3>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <__stack+0x5dd>
     e3c:	00 00       	nop
		LCD_String_xy(0,0,"1:Turn on Ac");LCD_String_xy(1,0,"2:Turn off Ac");pressed_number=UART_Received();_delay_ms(100);
     e3e:	4b e4       	ldi	r20, 0x4B	; 75
     e40:	52 e0       	ldi	r21, 0x02	; 2
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     e4a:	48 e5       	ldi	r20, 0x58	; 88
     e4c:	52 e0       	ldi	r21, 0x02	; 2
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
     e56:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Received>
     e5a:	9f ef       	ldi	r25, 0xFF	; 255
     e5c:	21 ee       	ldi	r18, 0xE1	; 225
     e5e:	34 e0       	ldi	r19, 0x04	; 4
     e60:	91 50       	subi	r25, 0x01	; 1
     e62:	20 40       	sbci	r18, 0x00	; 0
     e64:	30 40       	sbci	r19, 0x00	; 0
     e66:	e1 f7       	brne	.-8      	; 0xe60 <__stack+0x601>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <__stack+0x60b>
     e6a:	00 00       	nop
		if(pressed_number=='1'){
     e6c:	81 33       	cpi	r24, 0x31	; 49
     e6e:	91 f4       	brne	.+36     	; 0xe94 <__stack+0x635>
			LCD_Clear();LCD_String_xy(0,0,"Temp Higher");
     e70:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     e74:	46 e6       	ldi	r20, 0x66	; 102
     e76:	52 e0       	ldi	r21, 0x02	; 2
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
			LCD_String_xy(1,0,"than 30^C");
     e80:	42 e7       	ldi	r20, 0x72	; 114
     e82:	52 e0       	ldi	r21, 0x02	; 2
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
			responce=SPI_TranCeive(4);
     e8c:	84 e0       	ldi	r24, 0x04	; 4
     e8e:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
     e92:	13 c0       	rjmp	.+38     	; 0xeba <__stack+0x65b>
			}else if(pressed_number=='2'){
     e94:	82 33       	cpi	r24, 0x32	; 50
     e96:	89 f4       	brne	.+34     	; 0xeba <__stack+0x65b>
			LCD_Clear();LCD_String_xy(0,0,"Temp Lower");
     e98:	0e 94 7f 08 	call	0x10fe	; 0x10fe <LCD_Clear>
     e9c:	4c e7       	ldi	r20, 0x7C	; 124
     e9e:	52 e0       	ldi	r21, 0x02	; 2
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
			LCD_String_xy(1,0,"than 21^C");
     ea8:	47 e8       	ldi	r20, 0x87	; 135
     eaa:	52 e0       	ldi	r21, 0x02	; 2
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_String_xy>
			responce=SPI_TranCeive(4);
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	0e 94 6f 0a 	call	0x14de	; 0x14de <SPI_TranCeive>
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	93 ec       	ldi	r25, 0xC3	; 195
     ebe:	29 e0       	ldi	r18, 0x09	; 9
     ec0:	81 50       	subi	r24, 0x01	; 1
     ec2:	90 40       	sbci	r25, 0x00	; 0
     ec4:	20 40       	sbci	r18, 0x00	; 0
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <__stack+0x661>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <__stack+0x66b>
     eca:	00 00       	nop
     ecc:	4b cd       	rjmp	.-1386   	; 0x964 <__stack+0x105>

00000ece <KEYPAD_Initialize>:
	{'+', '-', 'C', '/'}
};
void KEYPAD_Initialize(void)
{
	//Define direction for pins
	DIO_SetPin_Direction(KEYPAD_PRT, KEYPAD_PIN_OUT0, KEYPAD_OUT);
     ece:	41 e0       	ldi	r20, 0x01	; 1
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KEYPAD_PRT, KEYPAD_PIN_OUT1, KEYPAD_OUT);
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KEYPAD_PRT, KEYPAD_PIN_OUT2, KEYPAD_OUT);
     ee2:	41 e0       	ldi	r20, 0x01	; 1
     ee4:	62 e0       	ldi	r22, 0x02	; 2
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KEYPAD_PRT, KEYPAD_PIN_OUT3, KEYPAD_OUT);
     eec:	41 e0       	ldi	r20, 0x01	; 1
     eee:	63 e0       	ldi	r22, 0x03	; 3
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
	//Set logic to high
	DIO_SetPin_Value(KEYPAD_PRT, KEYPAD_PIN_OUT0, KEYPAD_HIGH);
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
	DIO_SetPin_Value(KEYPAD_PRT, KEYPAD_PIN_OUT1, KEYPAD_HIGH);
     f00:	41 e0       	ldi	r20, 0x01	; 1
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
	DIO_SetPin_Value(KEYPAD_PRT, KEYPAD_PIN_OUT2, KEYPAD_HIGH);
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	62 e0       	ldi	r22, 0x02	; 2
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
	DIO_SetPin_Value(KEYPAD_PRT, KEYPAD_PIN_OUT3, KEYPAD_HIGH);
     f14:	41 e0       	ldi	r20, 0x01	; 1
     f16:	63 e0       	ldi	r22, 0x03	; 3
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
	//Define direction for pins
	DIO_SetPin_Direction(KEYPAD_PRT, KEYPAD_PIN_INP0, KEYPAD_INP);
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	64 e0       	ldi	r22, 0x04	; 4
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KEYPAD_PRT, KEYPAD_PIN_INP1, KEYPAD_INP);
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	65 e0       	ldi	r22, 0x05	; 5
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KEYPAD_PRT, KEYPAD_PIN_INP2, KEYPAD_INP);
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	66 e0       	ldi	r22, 0x06	; 6
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
	DIO_SetPin_Direction(KEYPAD_PRT, KEYPAD_PIN_INP3, KEYPAD_INP);
     f3c:	40 e0       	ldi	r20, 0x00	; 0
     f3e:	67 e0       	ldi	r22, 0x07	; 7
     f40:	82 e0       	ldi	r24, 0x02	; 2
     f42:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
	//Activate internal pull up
	DIO_SetPin_PullUp(KEYPAD_PRT, KEYPAD_PIN_INP0);
     f46:	64 e0       	ldi	r22, 0x04	; 4
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_SetPin_PullUp>
	DIO_SetPin_PullUp(KEYPAD_PRT, KEYPAD_PIN_INP1);
     f4e:	65 e0       	ldi	r22, 0x05	; 5
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_SetPin_PullUp>
	DIO_SetPin_PullUp(KEYPAD_PRT, KEYPAD_PIN_INP2);
     f56:	66 e0       	ldi	r22, 0x06	; 6
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_SetPin_PullUp>
	DIO_SetPin_PullUp(KEYPAD_PRT, KEYPAD_PIN_INP3);
     f5e:	67 e0       	ldi	r22, 0x07	; 7
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	0e 94 2c 0a 	call	0x1458	; 0x1458 <DIO_SetPin_PullUp>
     f66:	08 95       	ret

00000f68 <KEYPAD_Read>:
}
uint8_t KEYPAD_Read(void)
{
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
	uint8_t val = 0;
	uint8_t btn = 0;
	uint8_t Row_Loc = 0; //counter for rows
	uint8_t Col_Loc = 0; //counter for columns 
	for (Col_Loc = KEYPAD_COL_START; Col_Loc <= KEYPAD_COL_END; Col_Loc++) //loop for columns 
     f6e:	d0 e0       	ldi	r29, 0x00	; 0
	DIO_SetPin_PullUp(KEYPAD_PRT, KEYPAD_PIN_INP3);
}
uint8_t KEYPAD_Read(void)
{
	uint8_t val = 0;
	uint8_t btn = 0;
     f70:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t Row_Loc = 0; //counter for rows
	uint8_t Col_Loc = 0; //counter for columns 
	for (Col_Loc = KEYPAD_COL_START; Col_Loc <= KEYPAD_COL_END; Col_Loc++) //loop for columns 
     f72:	2f c0       	rjmp	.+94     	; 0xfd2 <KEYPAD_Read+0x6a>
	{
		DIO_SetPin_Value(KEYPAD_PRT, Col_Loc, KEYPAD_LOW);
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	6d 2f       	mov	r22, r29
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
		for (Row_Loc = KEYPAD_ROW_START; Row_Loc <= KEYPAD_ROW_END; Row_Loc++) //loop for rows
     f7e:	c4 e0       	ldi	r28, 0x04	; 4
     f80:	20 c0       	rjmp	.+64     	; 0xfc2 <KEYPAD_Read+0x5a>
		{
			val = DIO_GetPin_Value(KEYPAD_PRT, Row_Loc);
     f82:	6c 2f       	mov	r22, r28
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	0e 94 fe 09 	call	0x13fc	; 0x13fc <DIO_GetPin_Value>
			if(val == KEYPAD_PRESSED)
     f8a:	81 11       	cpse	r24, r1
     f8c:	19 c0       	rjmp	.+50     	; 0xfc0 <KEYPAD_Read+0x58>
			{
				btn = keypad[Row_Loc - KEYPAD_ROW_START][Col_Loc - KEYPAD_COL_START];
     f8e:	ec 2f       	mov	r30, r28
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	34 97       	sbiw	r30, 0x04	; 4
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	ee 0f       	add	r30, r30
     f9a:	ff 1f       	adc	r31, r31
     f9c:	ea 56       	subi	r30, 0x6A	; 106
     f9e:	fd 4f       	sbci	r31, 0xFD	; 253
     fa0:	ed 0f       	add	r30, r29
     fa2:	f1 1d       	adc	r31, r1
     fa4:	10 81       	ld	r17, Z
				while (val == KEYPAD_PRESSED)
     fa6:	04 c0       	rjmp	.+8      	; 0xfb0 <KEYPAD_Read+0x48>
				{
					val = DIO_GetPin_Value(KEYPAD_PRT, Row_Loc);
     fa8:	6c 2f       	mov	r22, r28
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	0e 94 fe 09 	call	0x13fc	; 0x13fc <DIO_GetPin_Value>
		{
			val = DIO_GetPin_Value(KEYPAD_PRT, Row_Loc);
			if(val == KEYPAD_PRESSED)
			{
				btn = keypad[Row_Loc - KEYPAD_ROW_START][Col_Loc - KEYPAD_COL_START];
				while (val == KEYPAD_PRESSED)
     fb0:	88 23       	and	r24, r24
     fb2:	d1 f3       	breq	.-12     	; 0xfa8 <KEYPAD_Read+0x40>
     fb4:	8f e3       	ldi	r24, 0x3F	; 63
     fb6:	9c e9       	ldi	r25, 0x9C	; 156
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <KEYPAD_Read+0x50>
     fbc:	00 c0       	rjmp	.+0      	; 0xfbe <KEYPAD_Read+0x56>
     fbe:	00 00       	nop
	uint8_t Row_Loc = 0; //counter for rows
	uint8_t Col_Loc = 0; //counter for columns 
	for (Col_Loc = KEYPAD_COL_START; Col_Loc <= KEYPAD_COL_END; Col_Loc++) //loop for columns 
	{
		DIO_SetPin_Value(KEYPAD_PRT, Col_Loc, KEYPAD_LOW);
		for (Row_Loc = KEYPAD_ROW_START; Row_Loc <= KEYPAD_ROW_END; Row_Loc++) //loop for rows
     fc0:	cf 5f       	subi	r28, 0xFF	; 255
     fc2:	c8 30       	cpi	r28, 0x08	; 8
     fc4:	f0 f2       	brcs	.-68     	; 0xf82 <KEYPAD_Read+0x1a>
					val = DIO_GetPin_Value(KEYPAD_PRT, Row_Loc);
				}
				_delay_ms(10);
			}
		}
		DIO_SetPin_Value(KEYPAD_PRT, Col_Loc, KEYPAD_HIGH);
     fc6:	41 e0       	ldi	r20, 0x01	; 1
     fc8:	6d 2f       	mov	r22, r29
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
{
	uint8_t val = 0;
	uint8_t btn = 0;
	uint8_t Row_Loc = 0; //counter for rows
	uint8_t Col_Loc = 0; //counter for columns 
	for (Col_Loc = KEYPAD_COL_START; Col_Loc <= KEYPAD_COL_END; Col_Loc++) //loop for columns 
     fd0:	df 5f       	subi	r29, 0xFF	; 255
     fd2:	d4 30       	cpi	r29, 0x04	; 4
     fd4:	78 f2       	brcs	.-98     	; 0xf74 <KEYPAD_Read+0xc>
			}
		}
		DIO_SetPin_Value(KEYPAD_PRT, Col_Loc, KEYPAD_HIGH);
	}
	return btn;
}
     fd6:	81 2f       	mov	r24, r17
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	08 95       	ret

00000fe0 <LCD_Write_Command>:
	{
		LCD_Write_Command(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
		LCD_Write_Character(msg[i]);
	}
}
     fe0:	cf 93       	push	r28
     fe2:	c8 2f       	mov	r28, r24
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	62 e0       	ldi	r22, 0x02	; 2
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	63 e0       	ldi	r22, 0x03	; 3
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
    1002:	8f e9       	ldi	r24, 0x9F	; 159
    1004:	9f e0       	ldi	r25, 0x0F	; 15
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <LCD_Write_Command+0x26>
    100a:	00 c0       	rjmp	.+0      	; 0x100c <LCD_Write_Command+0x2c>
    100c:	00 00       	nop
    100e:	8b b3       	in	r24, 0x1b	; 27
    1010:	9c 2f       	mov	r25, r28
    1012:	90 7f       	andi	r25, 0xF0	; 240
    1014:	8f 70       	andi	r24, 0x0F	; 15
    1016:	89 2b       	or	r24, r25
    1018:	8b bb       	out	0x1b, r24	; 27
    101a:	41 e0       	ldi	r20, 0x01	; 1
    101c:	63 e0       	ldi	r22, 0x03	; 3
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
    1024:	8f e9       	ldi	r24, 0x9F	; 159
    1026:	9f e0       	ldi	r25, 0x0F	; 15
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <LCD_Write_Command+0x48>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <LCD_Write_Command+0x4e>
    102e:	00 00       	nop
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	63 e0       	ldi	r22, 0x03	; 3
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
    103a:	20 e1       	ldi	r18, 0x10	; 16
    103c:	c2 9f       	mul	r28, r18
    103e:	c0 01       	movw	r24, r0
    1040:	11 24       	eor	r1, r1
    1042:	9b b3       	in	r25, 0x1b	; 27
    1044:	9f 70       	andi	r25, 0x0F	; 15
    1046:	89 2b       	or	r24, r25
    1048:	8b bb       	out	0x1b, r24	; 27
    104a:	41 e0       	ldi	r20, 0x01	; 1
    104c:	63 e0       	ldi	r22, 0x03	; 3
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
    1054:	8f e9       	ldi	r24, 0x9F	; 159
    1056:	9f e0       	ldi	r25, 0x0F	; 15
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	f1 f7       	brne	.-4      	; 0x1058 <LCD_Write_Command+0x78>
    105c:	00 c0       	rjmp	.+0      	; 0x105e <LCD_Write_Command+0x7e>
    105e:	00 00       	nop
    1060:	40 e0       	ldi	r20, 0x00	; 0
    1062:	63 e0       	ldi	r22, 0x03	; 3
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
    106a:	8f e3       	ldi	r24, 0x3F	; 63
    106c:	9f e1       	ldi	r25, 0x1F	; 31
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <LCD_Write_Command+0x8e>
    1072:	00 c0       	rjmp	.+0      	; 0x1074 <LCD_Write_Command+0x94>
    1074:	00 00       	nop
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <LCD_Initialize>:
    107a:	41 e0       	ldi	r20, 0x01	; 1
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
    1084:	41 e0       	ldi	r20, 0x01	; 1
    1086:	62 e0       	ldi	r22, 0x02	; 2
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
    108e:	41 e0       	ldi	r20, 0x01	; 1
    1090:	63 e0       	ldi	r22, 0x03	; 3
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
    1098:	41 e0       	ldi	r20, 0x01	; 1
    109a:	64 e0       	ldi	r22, 0x04	; 4
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
    10a2:	41 e0       	ldi	r20, 0x01	; 1
    10a4:	65 e0       	ldi	r22, 0x05	; 5
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	66 e0       	ldi	r22, 0x06	; 6
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
    10b6:	41 e0       	ldi	r20, 0x01	; 1
    10b8:	67 e0       	ldi	r22, 0x07	; 7
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_SetPin_Direction>
    10c0:	8f e3       	ldi	r24, 0x3F	; 63
    10c2:	9f e1       	ldi	r25, 0x1F	; 31
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <LCD_Initialize+0x4a>
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <LCD_Initialize+0x50>
    10ca:	00 00       	nop
    10cc:	83 e3       	ldi	r24, 0x33	; 51
    10ce:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_Write_Command>
    10d2:	82 e3       	ldi	r24, 0x32	; 50
    10d4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_Write_Command>
    10d8:	88 e2       	ldi	r24, 0x28	; 40
    10da:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_Write_Command>
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_Write_Command>
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_Write_Command>
    10ea:	8c e0       	ldi	r24, 0x0C	; 12
    10ec:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_Write_Command>
    10f0:	8f e1       	ldi	r24, 0x1F	; 31
    10f2:	9e e4       	ldi	r25, 0x4E	; 78
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <LCD_Initialize+0x7a>
    10f8:	00 c0       	rjmp	.+0      	; 0x10fa <LCD_Initialize+0x80>
    10fa:	00 00       	nop
    10fc:	08 95       	ret

000010fe <LCD_Clear>:
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_Write_Command>
    1104:	08 95       	ret

00001106 <LCD_Write_Character>:
    1106:	cf 93       	push	r28
    1108:	c8 2f       	mov	r28, r24
    110a:	41 e0       	ldi	r20, 0x01	; 1
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	62 e0       	ldi	r22, 0x02	; 2
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	63 e0       	ldi	r22, 0x03	; 3
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
    1128:	8f e9       	ldi	r24, 0x9F	; 159
    112a:	9f e0       	ldi	r25, 0x0F	; 15
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <LCD_Write_Character+0x26>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <LCD_Write_Character+0x2c>
    1132:	00 00       	nop
    1134:	8b b3       	in	r24, 0x1b	; 27
    1136:	9c 2f       	mov	r25, r28
    1138:	90 7f       	andi	r25, 0xF0	; 240
    113a:	8f 70       	andi	r24, 0x0F	; 15
    113c:	89 2b       	or	r24, r25
    113e:	8b bb       	out	0x1b, r24	; 27
    1140:	41 e0       	ldi	r20, 0x01	; 1
    1142:	63 e0       	ldi	r22, 0x03	; 3
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
    114a:	8f e9       	ldi	r24, 0x9F	; 159
    114c:	9f e0       	ldi	r25, 0x0F	; 15
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	f1 f7       	brne	.-4      	; 0x114e <LCD_Write_Character+0x48>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <LCD_Write_Character+0x4e>
    1154:	00 00       	nop
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	63 e0       	ldi	r22, 0x03	; 3
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
    1160:	20 e1       	ldi	r18, 0x10	; 16
    1162:	c2 9f       	mul	r28, r18
    1164:	c0 01       	movw	r24, r0
    1166:	11 24       	eor	r1, r1
    1168:	9b b3       	in	r25, 0x1b	; 27
    116a:	9f 70       	andi	r25, 0x0F	; 15
    116c:	89 2b       	or	r24, r25
    116e:	8b bb       	out	0x1b, r24	; 27
    1170:	41 e0       	ldi	r20, 0x01	; 1
    1172:	63 e0       	ldi	r22, 0x03	; 3
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
    117a:	8f e9       	ldi	r24, 0x9F	; 159
    117c:	9f e0       	ldi	r25, 0x0F	; 15
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <LCD_Write_Character+0x78>
    1182:	00 c0       	rjmp	.+0      	; 0x1184 <LCD_Write_Character+0x7e>
    1184:	00 00       	nop
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	63 e0       	ldi	r22, 0x03	; 3
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	0e 94 8e 09 	call	0x131c	; 0x131c <DIO_SetPin_Value>
    1190:	8f e3       	ldi	r24, 0x3F	; 63
    1192:	9f e1       	ldi	r25, 0x1F	; 31
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <LCD_Write_Character+0x8e>
    1198:	00 c0       	rjmp	.+0      	; 0x119a <LCD_Write_Character+0x94>
    119a:	00 00       	nop
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <LCD_Write_String>:
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	ec 01       	movw	r28, r24
    11a6:	09 c0       	rjmp	.+18     	; 0x11ba <LCD_Write_String+0x1a>
    11a8:	0e 94 83 08 	call	0x1106	; 0x1106 <LCD_Write_Character>
    11ac:	8f e3       	ldi	r24, 0x3F	; 63
    11ae:	9f e1       	ldi	r25, 0x1F	; 31
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <LCD_Write_String+0x10>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <LCD_Write_String+0x16>
    11b6:	00 00       	nop
    11b8:	21 96       	adiw	r28, 0x01	; 1
    11ba:	88 81       	ld	r24, Y
    11bc:	81 11       	cpse	r24, r1
    11be:	f4 cf       	rjmp	.-24     	; 0x11a8 <LCD_Write_String+0x8>
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <LCD_Write_Number>:
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	2a 97       	sbiw	r28, 0x0a	; 10
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	2a e0       	ldi	r18, 0x0A	; 10
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	ae 01       	movw	r20, r28
    11e0:	4f 5f       	subi	r20, 0xFF	; 255
    11e2:	5f 4f       	sbci	r21, 0xFF	; 255
    11e4:	0e 94 a8 0a 	call	0x1550	; 0x1550 <ltoa>
    11e8:	ce 01       	movw	r24, r28
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
    11f0:	2a 96       	adiw	r28, 0x0a	; 10
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <LCD_String_xy>:
void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
    1208:	81 11       	cpse	r24, r1
    120a:	08 c0       	rjmp	.+16     	; 0x121c <LCD_String_xy+0x1a>
    120c:	60 31       	cpi	r22, 0x10	; 16
    120e:	30 f4       	brcc	.+12     	; 0x121c <LCD_String_xy+0x1a>
	LCD_Write_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    1210:	86 2f       	mov	r24, r22
    1212:	8f 70       	andi	r24, 0x0F	; 15
    1214:	80 68       	ori	r24, 0x80	; 128
    1216:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_Write_Command>
    121a:	09 c0       	rjmp	.+18     	; 0x122e <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	39 f4       	brne	.+14     	; 0x122e <LCD_String_xy+0x2c>
    1220:	60 31       	cpi	r22, 0x10	; 16
    1222:	28 f4       	brcc	.+10     	; 0x122e <LCD_String_xy+0x2c>
	LCD_Write_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    1224:	86 2f       	mov	r24, r22
    1226:	8f 70       	andi	r24, 0x0F	; 15
    1228:	80 6c       	ori	r24, 0xC0	; 192
    122a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_Write_Command>
	LCD_Write_String(str);		/* Call LCD string function */
    122e:	ce 01       	movw	r24, r28
    1230:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <LCD_Write_String>
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <DIO_SetPin_Direction>:
			break;
			case DIO_PORTC:
			DDRC = 0xFF;
			break;
			case DIO_PORTD:
			DDRD = 0xFF;
    123a:	44 23       	and	r20, r20
    123c:	b9 f1       	breq	.+110    	; 0x12ac <DIO_SetPin_Direction+0x72>
    123e:	41 30       	cpi	r20, 0x01	; 1
    1240:	09 f0       	breq	.+2      	; 0x1244 <DIO_SetPin_Direction+0xa>
    1242:	6b c0       	rjmp	.+214    	; 0x131a <DIO_SetPin_Direction+0xe0>
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	89 f0       	breq	.+34     	; 0x126a <DIO_SetPin_Direction+0x30>
    1248:	28 f0       	brcs	.+10     	; 0x1254 <DIO_SetPin_Direction+0x1a>
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	c9 f0       	breq	.+50     	; 0x1280 <DIO_SetPin_Direction+0x46>
    124e:	83 30       	cpi	r24, 0x03	; 3
    1250:	11 f1       	breq	.+68     	; 0x1296 <DIO_SetPin_Direction+0x5c>
    1252:	08 95       	ret
    1254:	2a b3       	in	r18, 0x1a	; 26
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_SetPin_Direction+0x26>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	6a 95       	dec	r22
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_SetPin_Direction+0x22>
    1264:	82 2b       	or	r24, r18
    1266:	8a bb       	out	0x1a, r24	; 26
    1268:	08 95       	ret
    126a:	27 b3       	in	r18, 0x17	; 23
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_SetPin_Direction+0x3c>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	6a 95       	dec	r22
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_SetPin_Direction+0x38>
    127a:	82 2b       	or	r24, r18
    127c:	87 bb       	out	0x17, r24	; 23
    127e:	08 95       	ret
    1280:	24 b3       	in	r18, 0x14	; 20
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 c0       	rjmp	.+4      	; 0x128c <DIO_SetPin_Direction+0x52>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	6a 95       	dec	r22
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <DIO_SetPin_Direction+0x4e>
    1290:	82 2b       	or	r24, r18
    1292:	84 bb       	out	0x14, r24	; 20
    1294:	08 95       	ret
    1296:	21 b3       	in	r18, 0x11	; 17
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <DIO_SetPin_Direction+0x68>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	6a 95       	dec	r22
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <DIO_SetPin_Direction+0x64>
    12a6:	82 2b       	or	r24, r18
    12a8:	81 bb       	out	0x11, r24	; 17
    12aa:	08 95       	ret
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 f0       	breq	.+36     	; 0x12d4 <DIO_SetPin_Direction+0x9a>
    12b0:	28 f0       	brcs	.+10     	; 0x12bc <DIO_SetPin_Direction+0x82>
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	d9 f0       	breq	.+54     	; 0x12ec <DIO_SetPin_Direction+0xb2>
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	29 f1       	breq	.+74     	; 0x1304 <DIO_SetPin_Direction+0xca>
    12ba:	08 95       	ret
    12bc:	2a b3       	in	r18, 0x1a	; 26
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_SetPin_Direction+0x8e>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	6a 95       	dec	r22
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_SetPin_Direction+0x8a>
    12cc:	80 95       	com	r24
    12ce:	82 23       	and	r24, r18
    12d0:	8a bb       	out	0x1a, r24	; 26
    12d2:	08 95       	ret
    12d4:	27 b3       	in	r18, 0x17	; 23
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_SetPin_Direction+0xa6>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	6a 95       	dec	r22
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_SetPin_Direction+0xa2>
    12e4:	80 95       	com	r24
    12e6:	82 23       	and	r24, r18
    12e8:	87 bb       	out	0x17, r24	; 23
    12ea:	08 95       	ret
    12ec:	24 b3       	in	r18, 0x14	; 20
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_SetPin_Direction+0xbe>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	6a 95       	dec	r22
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <DIO_SetPin_Direction+0xba>
    12fc:	80 95       	com	r24
    12fe:	82 23       	and	r24, r18
    1300:	84 bb       	out	0x14, r24	; 20
    1302:	08 95       	ret
    1304:	21 b3       	in	r18, 0x11	; 17
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_SetPin_Direction+0xd6>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	6a 95       	dec	r22
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_SetPin_Direction+0xd2>
    1314:	80 95       	com	r24
    1316:	82 23       	and	r24, r18
    1318:	81 bb       	out	0x11, r24	; 17
    131a:	08 95       	ret

0000131c <DIO_SetPin_Value>:
    131c:	41 30       	cpi	r20, 0x01	; 1
    131e:	a1 f5       	brne	.+104    	; 0x1388 <DIO_SetPin_Value+0x6c>
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	89 f0       	breq	.+34     	; 0x1346 <DIO_SetPin_Value+0x2a>
    1324:	28 f0       	brcs	.+10     	; 0x1330 <DIO_SetPin_Value+0x14>
    1326:	82 30       	cpi	r24, 0x02	; 2
    1328:	c9 f0       	breq	.+50     	; 0x135c <DIO_SetPin_Value+0x40>
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	11 f1       	breq	.+68     	; 0x1372 <DIO_SetPin_Value+0x56>
    132e:	08 95       	ret
    1330:	2b b3       	in	r18, 0x1b	; 27
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_SetPin_Value+0x20>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	6a 95       	dec	r22
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_SetPin_Value+0x1c>
    1340:	82 2b       	or	r24, r18
    1342:	8b bb       	out	0x1b, r24	; 27
    1344:	08 95       	ret
    1346:	28 b3       	in	r18, 0x18	; 24
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_SetPin_Value+0x36>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	6a 95       	dec	r22
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_SetPin_Value+0x32>
    1356:	82 2b       	or	r24, r18
    1358:	88 bb       	out	0x18, r24	; 24
    135a:	08 95       	ret
    135c:	25 b3       	in	r18, 0x15	; 21
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_SetPin_Value+0x4c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	6a 95       	dec	r22
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_SetPin_Value+0x48>
    136c:	82 2b       	or	r24, r18
    136e:	85 bb       	out	0x15, r24	; 21
    1370:	08 95       	ret
    1372:	22 b3       	in	r18, 0x12	; 18
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_SetPin_Value+0x62>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	6a 95       	dec	r22
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_SetPin_Value+0x5e>
    1382:	82 2b       	or	r24, r18
    1384:	82 bb       	out	0x12, r24	; 18
    1386:	08 95       	ret
    1388:	41 11       	cpse	r20, r1
    138a:	37 c0       	rjmp	.+110    	; 0x13fa <DIO_SetPin_Value+0xde>
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 f0       	breq	.+36     	; 0x13b4 <DIO_SetPin_Value+0x98>
    1390:	28 f0       	brcs	.+10     	; 0x139c <DIO_SetPin_Value+0x80>
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	d9 f0       	breq	.+54     	; 0x13cc <DIO_SetPin_Value+0xb0>
    1396:	83 30       	cpi	r24, 0x03	; 3
    1398:	29 f1       	breq	.+74     	; 0x13e4 <DIO_SetPin_Value+0xc8>
    139a:	08 95       	ret
    139c:	2b b3       	in	r18, 0x1b	; 27
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_SetPin_Value+0x8c>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	6a 95       	dec	r22
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_SetPin_Value+0x88>
    13ac:	80 95       	com	r24
    13ae:	82 23       	and	r24, r18
    13b0:	8b bb       	out	0x1b, r24	; 27
    13b2:	08 95       	ret
    13b4:	28 b3       	in	r18, 0x18	; 24
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_SetPin_Value+0xa4>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	6a 95       	dec	r22
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <DIO_SetPin_Value+0xa0>
    13c4:	80 95       	com	r24
    13c6:	82 23       	and	r24, r18
    13c8:	88 bb       	out	0x18, r24	; 24
    13ca:	08 95       	ret
    13cc:	25 b3       	in	r18, 0x15	; 21
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_SetPin_Value+0xbc>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	6a 95       	dec	r22
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_SetPin_Value+0xb8>
    13dc:	80 95       	com	r24
    13de:	82 23       	and	r24, r18
    13e0:	85 bb       	out	0x15, r24	; 21
    13e2:	08 95       	ret
    13e4:	22 b3       	in	r18, 0x12	; 18
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_SetPin_Value+0xd4>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	6a 95       	dec	r22
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_SetPin_Value+0xd0>
    13f4:	80 95       	com	r24
    13f6:	82 23       	and	r24, r18
    13f8:	82 bb       	out	0x12, r24	; 18
    13fa:	08 95       	ret

000013fc <DIO_GetPin_Value>:
}

Uint8_t DIO_GetPin_Value(DIO_PORT PORT, DIO_PIN PIN)
{
	uint8_t reading = 0;
	switch(PORT)
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	79 f0       	breq	.+30     	; 0x141e <DIO_GetPin_Value+0x22>
    1400:	28 f0       	brcs	.+10     	; 0x140c <DIO_GetPin_Value+0x10>
    1402:	82 30       	cpi	r24, 0x02	; 2
    1404:	a9 f0       	breq	.+42     	; 0x1430 <DIO_GetPin_Value+0x34>
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	e1 f0       	breq	.+56     	; 0x1442 <DIO_GetPin_Value+0x46>
    140a:	24 c0       	rjmp	.+72     	; 0x1454 <DIO_GetPin_Value+0x58>
	{
		case DIO_PORTA:
		reading = get_bit(PINA, PIN);
    140c:	89 b3       	in	r24, 0x19	; 25
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_GetPin_Value+0x1a>
    1412:	95 95       	asr	r25
    1414:	87 95       	ror	r24
    1416:	6a 95       	dec	r22
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_GetPin_Value+0x16>
    141a:	81 70       	andi	r24, 0x01	; 1
		break;
    141c:	08 95       	ret
		case DIO_PORTB:
		reading = get_bit(PINB, PIN);
    141e:	86 b3       	in	r24, 0x16	; 22
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_GetPin_Value+0x2c>
    1424:	95 95       	asr	r25
    1426:	87 95       	ror	r24
    1428:	6a 95       	dec	r22
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_GetPin_Value+0x28>
    142c:	81 70       	andi	r24, 0x01	; 1
		break;
    142e:	08 95       	ret
		case DIO_PORTC:
		reading = get_bit(PINC, PIN);
    1430:	83 b3       	in	r24, 0x13	; 19
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 c0       	rjmp	.+4      	; 0x143a <DIO_GetPin_Value+0x3e>
    1436:	95 95       	asr	r25
    1438:	87 95       	ror	r24
    143a:	6a 95       	dec	r22
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <DIO_GetPin_Value+0x3a>
    143e:	81 70       	andi	r24, 0x01	; 1
		break;
    1440:	08 95       	ret
		case DIO_PORTD:
		reading = get_bit(PIND, PIN);
    1442:	80 b3       	in	r24, 0x10	; 16
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_GetPin_Value+0x50>
    1448:	95 95       	asr	r25
    144a:	87 95       	ror	r24
    144c:	6a 95       	dec	r22
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_GetPin_Value+0x4c>
    1450:	81 70       	andi	r24, 0x01	; 1
		break;
    1452:	08 95       	ret
	}
}

Uint8_t DIO_GetPin_Value(DIO_PORT PORT, DIO_PIN PIN)
{
	uint8_t reading = 0;
    1454:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTD:
		reading = get_bit(PIND, PIN);
		break;
	}
	return reading;
}
    1456:	08 95       	ret

00001458 <DIO_SetPin_PullUp>:

void DIO_SetPin_PullUp(DIO_PORT PORT, DIO_PIN PIN)
{
	switch(PORT)
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	89 f0       	breq	.+34     	; 0x147e <DIO_SetPin_PullUp+0x26>
    145c:	28 f0       	brcs	.+10     	; 0x1468 <DIO_SetPin_PullUp+0x10>
    145e:	82 30       	cpi	r24, 0x02	; 2
    1460:	c9 f0       	breq	.+50     	; 0x1494 <DIO_SetPin_PullUp+0x3c>
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	11 f1       	breq	.+68     	; 0x14aa <DIO_SetPin_PullUp+0x52>
    1466:	08 95       	ret
	{
		case DIO_PORTA:
		set_bit(PORTA, PIN);
    1468:	2b b3       	in	r18, 0x1b	; 27
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_SetPin_PullUp+0x1c>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	6a 95       	dec	r22
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_SetPin_PullUp+0x18>
    1478:	82 2b       	or	r24, r18
    147a:	8b bb       	out	0x1b, r24	; 27
		break;
    147c:	08 95       	ret
		case DIO_PORTB:
		set_bit(PORTB, PIN);
    147e:	28 b3       	in	r18, 0x18	; 24
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <DIO_SetPin_PullUp+0x32>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	6a 95       	dec	r22
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <DIO_SetPin_PullUp+0x2e>
    148e:	82 2b       	or	r24, r18
    1490:	88 bb       	out	0x18, r24	; 24
		break;
    1492:	08 95       	ret
		case DIO_PORTC:
		set_bit(PORTC, PIN);
    1494:	25 b3       	in	r18, 0x15	; 21
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_SetPin_PullUp+0x48>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	6a 95       	dec	r22
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_SetPin_PullUp+0x44>
    14a4:	82 2b       	or	r24, r18
    14a6:	85 bb       	out	0x15, r24	; 21
		break;
    14a8:	08 95       	ret
		case DIO_PORTD:
		set_bit(PORTD, PIN);
    14aa:	22 b3       	in	r18, 0x12	; 18
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <DIO_SetPin_PullUp+0x5e>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	6a 95       	dec	r22
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <DIO_SetPin_PullUp+0x5a>
    14ba:	82 2b       	or	r24, r18
    14bc:	82 bb       	out	0x12, r24	; 18
    14be:	08 95       	ret

000014c0 <SPI_Master_Initialize>:
{
	//Two Lines
	
	while (get_bit(SPSR, SPIF) != 1);
	return SPDR;
}
    14c0:	87 b3       	in	r24, 0x17	; 23
    14c2:	80 62       	ori	r24, 0x20	; 32
    14c4:	87 bb       	out	0x17, r24	; 23
    14c6:	87 b3       	in	r24, 0x17	; 23
    14c8:	8f 7b       	andi	r24, 0xBF	; 191
    14ca:	87 bb       	out	0x17, r24	; 23
    14cc:	87 b3       	in	r24, 0x17	; 23
    14ce:	80 68       	ori	r24, 0x80	; 128
    14d0:	87 bb       	out	0x17, r24	; 23
    14d2:	87 b3       	in	r24, 0x17	; 23
    14d4:	80 61       	ori	r24, 0x10	; 16
    14d6:	87 bb       	out	0x17, r24	; 23
    14d8:	83 e5       	ldi	r24, 0x53	; 83
    14da:	8d b9       	out	0x0d, r24	; 13
    14dc:	08 95       	ret

000014de <SPI_TranCeive>:
uint8_t SPI_TranCeive(uint8_t data)
{
	SPDR = data;
    14de:	8f b9       	out	0x0f, r24	; 15
	while (get_bit(SPSR, SPIF) != 1);
    14e0:	77 9b       	sbis	0x0e, 7	; 14
    14e2:	fe cf       	rjmp	.-4      	; 0x14e0 <SPI_TranCeive+0x2>
	return SPDR;
    14e4:	8f b1       	in	r24, 0x0f	; 15
}
    14e6:	08 95       	ret

000014e8 <UART_Initialize>:
*/

void UART_Initialize(UART_Mode mode, UART_Parity parity, UART_StopBits stop, UART_DataMode data)
{
	uint16_t UBRR_Val = 0;	
	DDRD &=~(1<<PD0);//CLR_BIT(DDRD, PD0);//Define direction for RX pin as input	
    14e8:	81 b3       	in	r24, 0x11	; 17
    14ea:	8e 7f       	andi	r24, 0xFE	; 254
    14ec:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1<<PD1);//SET_BIT(DDRD, PD1);//Define direction for TX pin as output DDRD |= 0x02;//0000 0010	
    14ee:	81 b3       	in	r24, 0x11	; 17
    14f0:	82 60       	ori	r24, 0x02	; 2
    14f2:	81 bb       	out	0x11, r24	; 17
	UCSRB |= (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);//Enable receive, transmit //USCRB = 0x18;
    14f4:	8a b1       	in	r24, 0x0a	; 10
    14f6:	88 69       	ori	r24, 0x98	; 152
    14f8:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL) | (1 << UCSZ1) | (1 << UCSZ0);//Enable UCSRC, Choose 8 bit mode //UCSRC = 0x86;
    14fa:	80 b5       	in	r24, 0x20	; 32
    14fc:	86 68       	ori	r24, 0x86	; 134
    14fe:	80 bd       	out	0x20, r24	; 32
	UBRR_Val = (((FRQ / (BaudRate * 16))) - 1);//Calculate Baud Rate register value
	UBRRL = UBRR_Val;
    1500:	83 e3       	ldi	r24, 0x33	; 51
    1502:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_Val >> 8;
    1504:	10 bc       	out	0x20, r1	; 32
    1506:	08 95       	ret

00001508 <UART_Transmit>:
}
void UART_Transmit(uint8_t dataTransmit){

	UDR = dataTransmit;
    1508:	8c b9       	out	0x0c, r24	; 12
	while(get_bit(UCSRA, TXC) != 1);
    150a:	5e 9b       	sbis	0x0b, 6	; 11
    150c:	fe cf       	rjmp	.-4      	; 0x150a <UART_Transmit+0x2>
}
    150e:	08 95       	ret

00001510 <UART_Received>:
uint8_t UART_Received(void)
{
	//uint8_t dataReceived = 0;
	while(get_bit(UCSRA, RXC) != 1);
    1510:	5f 9b       	sbis	0x0b, 7	; 11
    1512:	fe cf       	rjmp	.-4      	; 0x1510 <UART_Received>
	 
	return UDR;
    1514:	8c b1       	in	r24, 0x0c	; 12
}
    1516:	08 95       	ret

00001518 <USART_SendString>:
void USART_SendString(char *str)					/* Send string of USART data function */
{
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	8c 01       	movw	r16, r24
	unsigned int i=0;
    1522:	c0 e0       	ldi	r28, 0x00	; 0
    1524:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i]!=0)
    1526:	03 c0       	rjmp	.+6      	; 0x152e <USART_SendString+0x16>
	{
		UART_Transmit(str[i]);						/* Send each char of string till the NULL */
    1528:	0e 94 84 0a 	call	0x1508	; 0x1508 <UART_Transmit>
		i++;
    152c:	21 96       	adiw	r28, 0x01	; 1
	return UDR;
}
void USART_SendString(char *str)					/* Send string of USART data function */
{
	unsigned int i=0;
	while (str[i]!=0)
    152e:	f8 01       	movw	r30, r16
    1530:	ec 0f       	add	r30, r28
    1532:	fd 1f       	adc	r31, r29
    1534:	80 81       	ld	r24, Z
    1536:	81 11       	cpse	r24, r1
    1538:	f7 cf       	rjmp	.-18     	; 0x1528 <USART_SendString+0x10>
	{
		UART_Transmit(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	08 95       	ret

00001544 <__tablejump2__>:
    1544:	ee 0f       	add	r30, r30
    1546:	ff 1f       	adc	r31, r31
    1548:	05 90       	lpm	r0, Z+
    154a:	f4 91       	lpm	r31, Z
    154c:	e0 2d       	mov	r30, r0
    154e:	09 94       	ijmp

00001550 <ltoa>:
    1550:	25 32       	cpi	r18, 0x25	; 37
    1552:	31 05       	cpc	r19, r1
    1554:	20 f4       	brcc	.+8      	; 0x155e <ltoa+0xe>
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	10 f0       	brcs	.+4      	; 0x155e <ltoa+0xe>
    155a:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__ltoa_ncheck>
    155e:	fa 01       	movw	r30, r20
    1560:	10 82       	st	Z, r1
    1562:	ca 01       	movw	r24, r20
    1564:	08 95       	ret

00001566 <__ltoa_ncheck>:
    1566:	bb 27       	eor	r27, r27
    1568:	2a 30       	cpi	r18, 0x0A	; 10
    156a:	51 f4       	brne	.+20     	; 0x1580 <__ltoa_ncheck+0x1a>
    156c:	99 23       	and	r25, r25
    156e:	42 f4       	brpl	.+16     	; 0x1580 <__ltoa_ncheck+0x1a>
    1570:	bd e2       	ldi	r27, 0x2D	; 45
    1572:	90 95       	com	r25
    1574:	80 95       	com	r24
    1576:	70 95       	com	r23
    1578:	61 95       	neg	r22
    157a:	7f 4f       	sbci	r23, 0xFF	; 255
    157c:	8f 4f       	sbci	r24, 0xFF	; 255
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__ultoa_common>

00001584 <__ultoa_ncheck>:
    1584:	bb 27       	eor	r27, r27

00001586 <__ultoa_common>:
    1586:	fa 01       	movw	r30, r20
    1588:	a6 2f       	mov	r26, r22
    158a:	62 17       	cp	r22, r18
    158c:	71 05       	cpc	r23, r1
    158e:	81 05       	cpc	r24, r1
    1590:	91 05       	cpc	r25, r1
    1592:	33 0b       	sbc	r19, r19
    1594:	30 fb       	bst	r19, 0
    1596:	66 f0       	brts	.+24     	; 0x15b0 <__ultoa_common+0x2a>
    1598:	aa 27       	eor	r26, r26
    159a:	66 0f       	add	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	88 1f       	adc	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	aa 1f       	adc	r26, r26
    15a4:	a2 17       	cp	r26, r18
    15a6:	10 f0       	brcs	.+4      	; 0x15ac <__ultoa_common+0x26>
    15a8:	a2 1b       	sub	r26, r18
    15aa:	63 95       	inc	r22
    15ac:	38 50       	subi	r19, 0x08	; 8
    15ae:	a9 f7       	brne	.-22     	; 0x159a <__ultoa_common+0x14>
    15b0:	a0 5d       	subi	r26, 0xD0	; 208
    15b2:	aa 33       	cpi	r26, 0x3A	; 58
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <__ultoa_common+0x32>
    15b6:	a9 5d       	subi	r26, 0xD9	; 217
    15b8:	a1 93       	st	Z+, r26
    15ba:	36 f7       	brtc	.-52     	; 0x1588 <__ultoa_common+0x2>
    15bc:	b1 11       	cpse	r27, r1
    15be:	b1 93       	st	Z+, r27
    15c0:	10 82       	st	Z, r1
    15c2:	ca 01       	movw	r24, r20
    15c4:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <strrev>

000015c8 <strrev>:
    15c8:	dc 01       	movw	r26, r24
    15ca:	fc 01       	movw	r30, r24
    15cc:	67 2f       	mov	r22, r23
    15ce:	71 91       	ld	r23, Z+
    15d0:	77 23       	and	r23, r23
    15d2:	e1 f7       	brne	.-8      	; 0x15cc <strrev+0x4>
    15d4:	32 97       	sbiw	r30, 0x02	; 2
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <strrev+0x18>
    15d8:	7c 91       	ld	r23, X
    15da:	6d 93       	st	X+, r22
    15dc:	70 83       	st	Z, r23
    15de:	62 91       	ld	r22, -Z
    15e0:	ae 17       	cp	r26, r30
    15e2:	bf 07       	cpc	r27, r31
    15e4:	c8 f3       	brcs	.-14     	; 0x15d8 <strrev+0x10>
    15e6:	08 95       	ret

000015e8 <eeprom_read_block>:
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22

000015ec <eeprom_read_blraw>:
    15ec:	fc 01       	movw	r30, r24
    15ee:	e1 99       	sbic	0x1c, 1	; 28
    15f0:	fe cf       	rjmp	.-4      	; 0x15ee <eeprom_read_blraw+0x2>
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <eeprom_read_blraw+0x14>
    15f4:	ff bb       	out	0x1f, r31	; 31
    15f6:	ee bb       	out	0x1e, r30	; 30
    15f8:	e0 9a       	sbi	0x1c, 0	; 28
    15fa:	31 96       	adiw	r30, 0x01	; 1
    15fc:	0d b2       	in	r0, 0x1d	; 29
    15fe:	0d 92       	st	X+, r0
    1600:	41 50       	subi	r20, 0x01	; 1
    1602:	50 40       	sbci	r21, 0x00	; 0
    1604:	b8 f7       	brcc	.-18     	; 0x15f4 <eeprom_read_blraw+0x8>
    1606:	08 95       	ret

00001608 <eeprom_read_byte>:
    1608:	e1 99       	sbic	0x1c, 1	; 28
    160a:	fe cf       	rjmp	.-4      	; 0x1608 <eeprom_read_byte>
    160c:	9f bb       	out	0x1f, r25	; 31
    160e:	8e bb       	out	0x1e, r24	; 30
    1610:	e0 9a       	sbi	0x1c, 0	; 28
    1612:	99 27       	eor	r25, r25
    1614:	8d b3       	in	r24, 0x1d	; 29
    1616:	08 95       	ret

00001618 <eeprom_read_word>:
    1618:	a8 e1       	ldi	r26, 0x18	; 24
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	42 e0       	ldi	r20, 0x02	; 2
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <eeprom_read_blraw>

00001624 <eeprom_write_block>:
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <eeprom_write_block+0xc>
    162a:	2d 91       	ld	r18, X+
    162c:	0e 94 1d 0b 	call	0x163a	; 0x163a <eeprom_write_r18>
    1630:	41 50       	subi	r20, 0x01	; 1
    1632:	50 40       	sbci	r21, 0x00	; 0
    1634:	d0 f7       	brcc	.-12     	; 0x162a <eeprom_write_block+0x6>
    1636:	08 95       	ret

00001638 <eeprom_write_byte>:
    1638:	26 2f       	mov	r18, r22

0000163a <eeprom_write_r18>:
    163a:	e1 99       	sbic	0x1c, 1	; 28
    163c:	fe cf       	rjmp	.-4      	; 0x163a <eeprom_write_r18>
    163e:	9f bb       	out	0x1f, r25	; 31
    1640:	8e bb       	out	0x1e, r24	; 30
    1642:	2d bb       	out	0x1d, r18	; 29
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	e2 9a       	sbi	0x1c, 2	; 28
    164a:	e1 9a       	sbi	0x1c, 1	; 28
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	08 95       	ret

00001652 <_exit>:
    1652:	f8 94       	cli

00001654 <__stop_program>:
    1654:	ff cf       	rjmp	.-2      	; 0x1654 <__stop_program>
