
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fdc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000fdc  00001050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000298  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002889  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e80  00000000  00000000  00003bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000017e1  00000000  00000000  00004a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a8  00000000  00000000  00006260  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a05  00000000  00000000  00006708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000114a  00000000  00000000  0000710d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  00008257  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_2>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	88 03       	fmulsu	r16, r16
  56:	92 03       	fmuls	r17, r18
  58:	9c 03       	fmulsu	r17, r20
  5a:	a6 03       	fmuls	r18, r22
  5c:	b0 03       	fmuls	r19, r16
  5e:	ba 03       	fmulsu	r19, r18
  60:	c4 03       	fmuls	r20, r20
  62:	ce 03       	fmulsu	r20, r22
  64:	ee 03       	fmulsu	r22, r22
  66:	fe 03       	fmulsu	r23, r22
  68:	0e 04       	cpc	r0, r14
  6a:	1e 04       	cpc	r1, r14
  6c:	2e 04       	cpc	r2, r14
  6e:	3e 04       	cpc	r3, r14
  70:	4e 04       	cpc	r4, r14
  72:	5e 04       	cpc	r5, r14

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ec ed       	ldi	r30, 0xDC	; 220
  88:	ff e0       	ldi	r31, 0x0F	; 15
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	ae 37       	cpi	r26, 0x7E	; 126
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  9a:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <temperature_Read>:
#include "main.h"

uint8_t temperature_Read(void){
  a2:	cf 92       	push	r12
  a4:	df 92       	push	r13
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
	uint16_t temperuture=ADC_Read(2);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <ADC_Read>
	uint16_t Celcuis= (temperuture*4.88)/10;
  b4:	bc 01       	movw	r22, r24
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 77 06 	call	0xcee	; 0xcee <__floatunsisf>
  be:	26 ef       	ldi	r18, 0xF6	; 246
  c0:	38 e2       	ldi	r19, 0x28	; 40
  c2:	4c e9       	ldi	r20, 0x9C	; 156
  c4:	50 e4       	ldi	r21, 0x40	; 64
  c6:	0e 94 05 07 	call	0xe0a	; 0xe0a <__mulsf3>
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	40 e2       	ldi	r20, 0x20	; 32
  d0:	51 e4       	ldi	r21, 0x41	; 65
  d2:	0e 94 d6 05 	call	0xbac	; 0xbac <__divsf3>
  d6:	0e 94 48 06 	call	0xc90	; 0xc90 <__fixunssfsi>
  da:	6b 01       	movw	r12, r22
  dc:	7c 01       	movw	r14, r24
  de:	eb 01       	movw	r28, r22
	LCD_Write_Number(Celcuis);LCD_Write_String("^C");_delay_ms(500);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_Write_Number>
  e8:	80 e6       	ldi	r24, 0x60	; 96
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 e6       	ldi	r24, 0x69	; 105
  f4:	98 e1       	ldi	r25, 0x18	; 24
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <temperature_Read+0x54>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <temperature_Read+0x5e>
 100:	00 00       	nop
	if(Celcuis >28){
 102:	cd 31       	cpi	r28, 0x1D	; 29
 104:	d1 05       	cpc	r29, r1
 106:	28 f0       	brcs	.+10     	; 0x112 <temperature_Read+0x70>
		Motor_Start(Motor1,Motor_CW);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 a6 02 	call	0x54c	; 0x54c <Motor_Start>
 110:	05 c0       	rjmp	.+10     	; 0x11c <temperature_Read+0x7a>
	}else if(Celcuis <=21)Motor_Stop(Motor1);
 112:	66 97       	sbiw	r28, 0x16	; 22
 114:	18 f4       	brcc	.+6      	; 0x11c <temperature_Read+0x7a>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Motor_Stop>
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	9c e9       	ldi	r25, 0x9C	; 156
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <temperature_Read+0x7e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <temperature_Read+0x84>
 126:	00 00       	nop
	_delay_ms(10);
	return Celcuis;
}
 128:	8c 2d       	mov	r24, r12
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	df 90       	pop	r13
 134:	cf 90       	pop	r12
 136:	08 95       	ret

00000138 <Dimming_LED>:
void Dimming_LED(void){
	uint16_t ADC_Data=ADC_Read(1);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <ADC_Read>
	ADC_Data=ADC_Data/4;
 13e:	96 95       	lsr	r25
 140:	87 95       	ror	r24
 142:	96 95       	lsr	r25
 144:	87 95       	ror	r24
	OCR2=ADC_Data;
 146:	83 bd       	out	0x23, r24	; 35
	FAST_PWM_set_duty(FAST_OC0_NON_INVERTING,ADC_Data);
 148:	68 2f       	mov	r22, r24
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 8a 05 	call	0xb14	; 0xb14 <FAST_PWM_set_duty>
 150:	8f e3       	ldi	r24, 0x3F	; 63
 152:	9c e9       	ldi	r25, 0x9C	; 156
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <Dimming_LED+0x1c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <Dimming_LED+0x22>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <Rotate_Servo>:
	_delay_ms(10);
	
}
void Rotate_Servo(uint8_t angle){
			ServoMotor_Rotate(angle);
 15e:	0e 94 21 03 	call	0x642	; 0x642 <ServoMotor_Rotate>
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	83 ed       	ldi	r24, 0xD3	; 211
 166:	90 e3       	ldi	r25, 0x30	; 48
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <Rotate_Servo+0xa>
 170:	00 c0       	rjmp	.+0      	; 0x172 <Rotate_Servo+0x14>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <External_interupt>:
			_delay_ms(1000);
}
void External_interupt(void){
	MCUCR=(1<<ISC01);
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	85 bf       	out	0x35, r24	; 53
	PORTD=(1<<7);
 17a:	80 e8       	ldi	r24, 0x80	; 128
 17c:	82 bb       	out	0x12, r24	; 18
	GICR=(1<<7)|(1<<6)|(1<<5);
 17e:	80 ee       	ldi	r24, 0xE0	; 224
 180:	8b bf       	out	0x3b, r24	; 59
 182:	08 95       	ret

00000184 <main>:
}

int main(void)
{
	
	LCD_Initialize(); SPI_SLave_Initialize(); LED0_Initialize(); LED1_Initialize(); LED2_Initialize();PWM_init();
 184:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_Initialize>
 188:	0e 94 c2 05 	call	0xb84	; 0xb84 <SPI_SLave_Initialize>
 18c:	0e 94 44 03 	call	0x688	; 0x688 <LED0_Initialize>
 190:	0e 94 25 03 	call	0x64a	; 0x64a <LED1_Initialize>
 194:	0e 94 4a 03 	call	0x694	; 0x694 <LED2_Initialize>
 198:	0e 94 84 05 	call	0xb08	; 0xb08 <PWM_init>
	ADC_Initialization(AVCC,ADC_PRE128);
 19c:	67 e0       	ldi	r22, 0x07	; 7
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <ADC_Initialization>
	Motor_Initialization();
 1a4:	0e 94 8c 02 	call	0x518	; 0x518 <Motor_Initialization>
	ServoMotor_Initialization();
 1a8:	0e 94 13 03 	call	0x626	; 0x626 <ServoMotor_Initialization>
	External_interupt();
 1ac:	0e 94 bb 00 	call	0x176	; 0x176 <External_interupt>
	sei();
 1b0:	78 94       	sei
	uint8_t status=DEFAULT;
	uint16_t ADC_Data;
	
	
	while(1){
		LCD_Clear();
 1b2:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_Clear>
		// Receive reading from THe first micro controller
		responce=SPI_TranCeive(DEFAULT);
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	0e 94 d1 05 	call	0xba2	; 0xba2 <SPI_TranCeive>
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	31 ee       	ldi	r19, 0xE1	; 225
 1c0:	94 e0       	ldi	r25, 0x04	; 4
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	30 40       	sbci	r19, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x3e>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x48>
 1cc:	00 00       	nop
		
		_delay_ms(100);
		if(responce==1){//***********************Room 1**********************************
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	b1 f4       	brne	.+44     	; 0x1fe <main+0x7a>
			uint8_t x=Room1_status();
 1d2:	0e 94 37 03 	call	0x66e	; 0x66e <Room1_status>
 1d6:	c8 2f       	mov	r28, r24
			responce=SPI_TranCeive(0);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 d1 05 	call	0xba2	; 0xba2 <SPI_TranCeive>
			if(responce==2)LED1_ON();else if(responce==1)responce=SPI_TranCeive(x);else if(responce==3)LED1_OFF();
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	19 f4       	brne	.+6      	; 0x1e8 <main+0x64>
 1e2:	0e 94 2b 03 	call	0x656	; 0x656 <LED1_ON>
 1e6:	e5 cf       	rjmp	.-54     	; 0x1b2 <main+0x2e>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	21 f4       	brne	.+8      	; 0x1f4 <main+0x70>
 1ec:	8c 2f       	mov	r24, r28
 1ee:	0e 94 d1 05 	call	0xba2	; 0xba2 <SPI_TranCeive>
 1f2:	df cf       	rjmp	.-66     	; 0x1b2 <main+0x2e>
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	e9 f6       	brne	.-70     	; 0x1b2 <main+0x2e>
 1f8:	0e 94 31 03 	call	0x662	; 0x662 <LED1_OFF>
 1fc:	da cf       	rjmp	.-76     	; 0x1b2 <main+0x2e>
		}else if(responce ==2){
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	b1 f4       	brne	.+44     	; 0x22e <main+0xaa>
			
			uint8_t x=Room2_status();//******************************Room 2****************************
 202:	0e 94 56 03 	call	0x6ac	; 0x6ac <Room2_status>
 206:	c8 2f       	mov	r28, r24
			responce=SPI_TranCeive(8);
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	0e 94 d1 05 	call	0xba2	; 0xba2 <SPI_TranCeive>
			if(responce==2){
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	19 f4       	brne	.+6      	; 0x218 <main+0x94>
				
				Dimming_LED();
 212:	0e 94 9c 00 	call	0x138	; 0x138 <Dimming_LED>
 216:	cd cf       	rjmp	.-102    	; 0x1b2 <main+0x2e>
				
				}
				else if(responce==1)responce=SPI_TranCeive(x);else if(responce==3)LED2_OFF();
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	21 f4       	brne	.+8      	; 0x224 <main+0xa0>
 21c:	8c 2f       	mov	r24, r28
 21e:	0e 94 d1 05 	call	0xba2	; 0xba2 <SPI_TranCeive>
 222:	c7 cf       	rjmp	.-114    	; 0x1b2 <main+0x2e>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	29 f6       	brne	.-118    	; 0x1b2 <main+0x2e>
 228:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LED2_OFF>
 22c:	c2 cf       	rjmp	.-124    	; 0x1b2 <main+0x2e>
		}else if(responce==3){//***************************Door*****************************
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	51 f5       	brne	.+84     	; 0x286 <main+0x102>
			responce=SPI_TranCeive(0);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 d1 05 	call	0xba2	; 0xba2 <SPI_TranCeive>
			
			if(responce==1){
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	89 f4       	brne	.+34     	; 0x25e <main+0xda>
				Rotate_Servo(186.2);
 23c:	8a eb       	ldi	r24, 0xBA	; 186
 23e:	0e 94 af 00 	call	0x15e	; 0x15e <Rotate_Servo>
				LCD_Write_String("Doors Opened");_delay_ms(250);
 242:	83 e6       	ldi	r24, 0x63	; 99
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_Write_String>
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	34 e3       	ldi	r19, 0x34	; 52
 24e:	8c e0       	ldi	r24, 0x0C	; 12
 250:	21 50       	subi	r18, 0x01	; 1
 252:	30 40       	sbci	r19, 0x00	; 0
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0xcc>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0xd6>
 25a:	00 00       	nop
 25c:	aa cf       	rjmp	.-172    	; 0x1b2 <main+0x2e>
				
			}else if(responce==2){
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	09 f0       	breq	.+2      	; 0x264 <main+0xe0>
 262:	a7 cf       	rjmp	.-178    	; 0x1b2 <main+0x2e>
				Rotate_Servo(-186);
 264:	86 e4       	ldi	r24, 0x46	; 70
 266:	0e 94 af 00 	call	0x15e	; 0x15e <Rotate_Servo>
				LCD_Write_String("Doors Closed");_delay_ms(250);
 26a:	80 e7       	ldi	r24, 0x70	; 112
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_Write_String>
 272:	9f ef       	ldi	r25, 0xFF	; 255
 274:	24 e3       	ldi	r18, 0x34	; 52
 276:	3c e0       	ldi	r19, 0x0C	; 12
 278:	91 50       	subi	r25, 0x01	; 1
 27a:	20 40       	sbci	r18, 0x00	; 0
 27c:	30 40       	sbci	r19, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0xf4>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0xfe>
 282:	00 00       	nop
 284:	96 cf       	rjmp	.-212    	; 0x1b2 <main+0x2e>
			}
			
			}
			else if(responce==4){
 286:	84 30       	cpi	r24, 0x04	; 4
 288:	09 f0       	breq	.+2      	; 0x28c <main+0x108>
 28a:	93 cf       	rjmp	.-218    	; 0x1b2 <main+0x2e>
				uint16_t x=temperature_Read();
 28c:	0e 94 51 00 	call	0xa2	; 0xa2 <temperature_Read>
 290:	90 e0       	ldi	r25, 0x00	; 0
				//****************AC ON************************
				if(x>28)responce=SPI_TranCeive(0);
 292:	8d 31       	cpi	r24, 0x1D	; 29
 294:	91 05       	cpc	r25, r1
 296:	20 f0       	brcs	.+8      	; 0x2a0 <main+0x11c>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 d1 05 	call	0xba2	; 0xba2 <SPI_TranCeive>
 29e:	89 cf       	rjmp	.-238    	; 0x1b2 <main+0x2e>
				//*****************AC OFF****************
				else if(x<21)responce=SPI_TranCeive(1);
 2a0:	45 97       	sbiw	r24, 0x15	; 21
 2a2:	08 f0       	brcs	.+2      	; 0x2a6 <main+0x122>
 2a4:	86 cf       	rjmp	.-244    	; 0x1b2 <main+0x2e>
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 d1 05 	call	0xba2	; 0xba2 <SPI_TranCeive>
 2ac:	82 cf       	rjmp	.-252    	; 0x1b2 <main+0x2e>

000002ae <__vector_2>:
		
	
	}
	return 0;
}
ISR(INT1_vect){
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
	Dimming_LED();
 2d0:	0e 94 9c 00 	call	0x138	; 0x138 <Dimming_LED>
}
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <LCD_Write_Command>:
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);//Clear Display
}
void LCD_Write_Command(uint8_t command)
{
 2f6:	cf 93       	push	r28
 2f8:	c8 2f       	mov	r28, r24
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RS, LCD_LOW);//Choose Control Register
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RW, LCD_LOW);//Choose Write on LCD
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
 318:	8f e9       	ldi	r24, 0x9F	; 159
 31a:	9f e0       	ldi	r25, 0x0F	; 15
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_Write_Command+0x26>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCD_Write_Command+0x2c>
 322:	00 00       	nop
	_delay_ms(1);
	//Send High Nibble First
	PORTA = ((command)& 0xF0) | (PORTA & 0x0F);
 324:	8b b3       	in	r24, 0x1b	; 27
 326:	9c 2f       	mov	r25, r28
 328:	90 7f       	andi	r25, 0xF0	; 240
 32a:	8f 70       	andi	r24, 0x0F	; 15
 32c:	89 2b       	or	r24, r25
 32e:	8b bb       	out	0x1b, r24	; 27
	//Send High to Low Pulse
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//enable LCD
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	63 e0       	ldi	r22, 0x03	; 3
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
 33a:	8f e9       	ldi	r24, 0x9F	; 159
 33c:	9f e0       	ldi	r25, 0x0F	; 15
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_Write_Command+0x48>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_Write_Command+0x4e>
 344:	00 00       	nop
	_delay_ms(1); //3shan ydmn enha msh noise
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	63 e0       	ldi	r22, 0x03	; 3
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
	//Send Low Nibble second
	PORTA = ((command<<4)& 0xF0) | (PORTA & 0x0F);
 350:	20 e1       	ldi	r18, 0x10	; 16
 352:	c2 9f       	mul	r28, r18
 354:	c0 01       	movw	r24, r0
 356:	11 24       	eor	r1, r1
 358:	9b b3       	in	r25, 0x1b	; 27
 35a:	9f 70       	andi	r25, 0x0F	; 15
 35c:	89 2b       	or	r24, r25
 35e:	8b bb       	out	0x1b, r24	; 27
	//Send High to Low Pulse
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	63 e0       	ldi	r22, 0x03	; 3
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
 36a:	8f e9       	ldi	r24, 0x9F	; 159
 36c:	9f e0       	ldi	r25, 0x0F	; 15
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCD_Write_Command+0x78>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_Write_Command+0x7e>
 374:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	63 e0       	ldi	r22, 0x03	; 3
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
 380:	8f e3       	ldi	r24, 0x3F	; 63
 382:	9f e1       	ldi	r25, 0x1F	; 31
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <LCD_Write_Command+0x8e>
 388:	00 c0       	rjmp	.+0      	; 0x38a <LCD_Write_Command+0x94>
 38a:	00 00       	nop
	_delay_ms(2);
}
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <LCD_Initialize>:

#include "LCD_Private.h"

void LCD_Initialize(void)
{
	DIO_SetPin_Direction(LCD_CTRL_PRT, LCD_RS, LCD_OUT);
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CTRL_PRT, LCD_RW, LCD_OUT);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	62 e0       	ldi	r22, 0x02	; 2
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_CTRL_PRT, LCD_EN, LCD_OUT);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	63 e0       	ldi	r22, 0x03	; 3
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
			  
	DIO_SetPin_Direction(LCD_DATA_PRT, LCD_D4, LCD_OUT);
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	64 e0       	ldi	r22, 0x04	; 4
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PRT, LCD_D5, LCD_OUT);
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	65 e0       	ldi	r22, 0x05	; 5
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PRT, LCD_D6, LCD_OUT);
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	66 e0       	ldi	r22, 0x06	; 6
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_DATA_PRT, LCD_D7, LCD_OUT);
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	67 e0       	ldi	r22, 0x07	; 7
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
 3d6:	8f e3       	ldi	r24, 0x3F	; 63
 3d8:	9f e1       	ldi	r25, 0x1F	; 31
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <LCD_Initialize+0x4a>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCD_Initialize+0x50>
 3e0:	00 00       	nop
	
	_delay_ms(2); //3shan mc bta3 kit asra3 mn mc bta3 lcd
	
	LCD_Write_Command(0x33);
 3e2:	83 e3       	ldi	r24, 0x33	; 51
 3e4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_Write_Command>
	LCD_Write_Command(0x32);
 3e8:	82 e3       	ldi	r24, 0x32	; 50
 3ea:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_Write_Command>
	LCD_Write_Command(0x28);//4-Bit Mode
 3ee:	88 e2       	ldi	r24, 0x28	; 40
 3f0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_Write_Command>
	LCD_Write_Command(0x01);//Clear Display
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_Write_Command>
	LCD_Write_Command(0x02);//Return Home
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_Write_Command>
	//LCD_Write_Command(0x06);//Return Home
	LCD_Write_Command(0x0C);//Display on, Cursor off
 400:	8c e0       	ldi	r24, 0x0C	; 12
 402:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_Write_Command>
 406:	8f e1       	ldi	r24, 0x1F	; 31
 408:	9e e4       	ldi	r25, 0x4E	; 78
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
 412:	08 95       	ret

00000414 <LCD_Clear>:
	
	_delay_ms(5);
}
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);//Clear Display
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_Write_Command>
 41a:	08 95       	ret

0000041c <LCD_Write_Character>:
	_delay_ms(1);
	DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
	_delay_ms(2);
}
void LCD_Write_Character(uint8_t character)
{
 41c:	cf 93       	push	r28
 41e:	c8 2f       	mov	r28, r24
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RS, LCD_HIGH);//Choose Data Register
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_RW, LCD_LOW);//Choose Write on LCD
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	63 e0       	ldi	r22, 0x03	; 3
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
 43e:	8f e9       	ldi	r24, 0x9F	; 159
 440:	9f e0       	ldi	r25, 0x0F	; 15
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <LCD_Write_Character+0x26>
 446:	00 c0       	rjmp	.+0      	; 0x448 <LCD_Write_Character+0x2c>
 448:	00 00       	nop
		_delay_ms(1);
		//Send High Nibble First
		PORTA = ((character)& 0xF0) | (PORTA & 0x0F);
 44a:	8b b3       	in	r24, 0x1b	; 27
 44c:	9c 2f       	mov	r25, r28
 44e:	90 7f       	andi	r25, 0xF0	; 240
 450:	8f 70       	andi	r24, 0x0F	; 15
 452:	89 2b       	or	r24, r25
 454:	8b bb       	out	0x1b, r24	; 27
		//Send High to Low Pulse
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	63 e0       	ldi	r22, 0x03	; 3
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
 460:	8f e9       	ldi	r24, 0x9F	; 159
 462:	9f e0       	ldi	r25, 0x0F	; 15
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <LCD_Write_Character+0x48>
 468:	00 c0       	rjmp	.+0      	; 0x46a <LCD_Write_Character+0x4e>
 46a:	00 00       	nop
		_delay_ms(1);
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
 46c:	40 e0       	ldi	r20, 0x00	; 0
 46e:	63 e0       	ldi	r22, 0x03	; 3
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
		//Send Low Nibble First
		PORTA = ((character<<4)& 0xF0) | (PORTA & 0x0F);
 476:	20 e1       	ldi	r18, 0x10	; 16
 478:	c2 9f       	mul	r28, r18
 47a:	c0 01       	movw	r24, r0
 47c:	11 24       	eor	r1, r1
 47e:	9b b3       	in	r25, 0x1b	; 27
 480:	9f 70       	andi	r25, 0x0F	; 15
 482:	89 2b       	or	r24, r25
 484:	8b bb       	out	0x1b, r24	; 27
		//Send High to Low Pulse
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_HIGH);//Disable LCD
 486:	41 e0       	ldi	r20, 0x01	; 1
 488:	63 e0       	ldi	r22, 0x03	; 3
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
 490:	8f e9       	ldi	r24, 0x9F	; 159
 492:	9f e0       	ldi	r25, 0x0F	; 15
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <LCD_Write_Character+0x78>
 498:	00 c0       	rjmp	.+0      	; 0x49a <LCD_Write_Character+0x7e>
 49a:	00 00       	nop
		_delay_ms(1);
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
 49c:	40 e0       	ldi	r20, 0x00	; 0
 49e:	63 e0       	ldi	r22, 0x03	; 3
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
 4a6:	8f e3       	ldi	r24, 0x3F	; 63
 4a8:	9f e1       	ldi	r25, 0x1F	; 31
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <LCD_Write_Character+0x8e>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <LCD_Write_Character+0x94>
 4b0:	00 00       	nop
		_delay_ms(2);
}
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <LCD_Write_String>:
void LCD_Write_String(uint8_t* str)
{
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	ec 01       	movw	r28, r24
	while (*str != '\0')//Termination of any string, NULL character
 4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <LCD_Write_String+0x1a>
	{
		LCD_Write_Character(*str);
 4be:	0e 94 0e 02 	call	0x41c	; 0x41c <LCD_Write_Character>
 4c2:	8f e3       	ldi	r24, 0x3F	; 63
 4c4:	9f e1       	ldi	r25, 0x1F	; 31
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_Write_String+0x10>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_Write_String+0x16>
 4cc:	00 00       	nop
		_delay_ms(2);
		str++;
 4ce:	21 96       	adiw	r28, 0x01	; 1
		DIO_SetPin_Value(LCD_CTRL_PRT, LCD_EN, LCD_LOW);//Disable LCD
		_delay_ms(2);
}
void LCD_Write_String(uint8_t* str)
{
	while (*str != '\0')//Termination of any string, NULL character
 4d0:	88 81       	ld	r24, Y
 4d2:	81 11       	cpse	r24, r1
 4d4:	f4 cf       	rjmp	.-24     	; 0x4be <LCD_Write_String+0x8>
	{
		LCD_Write_Character(*str);
		_delay_ms(2);
		str++;
	}
}
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <LCD_Write_Number>:
void LCD_Write_Number(uint32_t number)
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
 4e4:	2a 97       	sbiw	r28, 0x0a	; 10
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
	char num[10];
	ltoa(number, (uint8_t*)num, 10);  //long to ASCII 
 4f0:	2a e0       	ldi	r18, 0x0A	; 10
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	ae 01       	movw	r20, r28
 4f6:	4f 5f       	subi	r20, 0xFF	; 255
 4f8:	5f 4f       	sbci	r21, 0xFF	; 255
 4fa:	0e 94 a0 07 	call	0xf40	; 0xf40 <ltoa>
	LCD_Write_String((uint8_t*) num);
 4fe:	ce 01       	movw	r24, r28
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_Write_String>
}
 506:	2a 96       	adiw	r28, 0x0a	; 10
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	f8 94       	cli
 50c:	de bf       	out	0x3e, r29	; 62
 50e:	0f be       	out	0x3f, r0	; 63
 510:	cd bf       	out	0x3d, r28	; 61
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <Motor_Initialization>:
#include "DC_Motor.h"

void Motor_Initialization(void)
{
	//Define direction for control pins
	DIO_SetPin_Direction(Motor_ControlPort, Motor_EN1, Motor_Out);
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	64 e0       	ldi	r22, 0x04	; 4
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
	//DIO_SetPin_Direction(Motor_ControlPort, Motor_EN2, Motor_Out);
	//Define Direction for data pins
	DIO_SetPin_Direction(Motor_DataPort, Motor_A1, Motor_Out);
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	62 e0       	ldi	r22, 0x02	; 2
 526:	83 e0       	ldi	r24, 0x03	; 3
 528:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
	DIO_SetPin_Direction(Motor_DataPort, Motor_A2, Motor_Out);
 52c:	41 e0       	ldi	r20, 0x01	; 1
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
	DIO_SetPin_Direction(Motor_DataPort, Motor_B1, Motor_Out);
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	63 e0       	ldi	r22, 0x03	; 3
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
	DIO_SetPin_Direction(Motor_DataPort, Motor_B2, Motor_Out);
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	66 e0       	ldi	r22, 0x06	; 6
 544:	83 e0       	ldi	r24, 0x03	; 3
 546:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
 54a:	08 95       	ret

0000054c <Motor_Start>:
}
void Motor_Start(Motor motor, Motor_Dir direction)
{	
 54c:	cf 93       	push	r28
 54e:	c6 2f       	mov	r28, r22
	switch(motor)//Switch on which motor you want to start
 550:	88 23       	and	r24, r24
 552:	19 f0       	breq	.+6      	; 0x55a <Motor_Start+0xe>
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	09 f1       	breq	.+66     	; 0x59a <Motor_Start+0x4e>
 558:	3f c0       	rjmp	.+126    	; 0x5d8 <Motor_Start+0x8c>
	{
		case Motor1:
		DIO_SetPin_Value(Motor_ControlPort, Motor_EN1, Motor_On);
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	64 e0       	ldi	r22, 0x04	; 4
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
		switch (direction)//Switch on which direction
 564:	cc 23       	and	r28, r28
 566:	19 f0       	breq	.+6      	; 0x56e <Motor_Start+0x22>
 568:	c1 30       	cpi	r28, 0x01	; 1
 56a:	61 f0       	breq	.+24     	; 0x584 <Motor_Start+0x38>
 56c:	35 c0       	rjmp	.+106    	; 0x5d8 <Motor_Start+0x8c>
		{
			case Motor_CW:
			DIO_SetPin_Value(Motor_DataPort, Motor_A1, Motor_High);
 56e:	41 e0       	ldi	r20, 0x01	; 1
 570:	62 e0       	ldi	r22, 0x02	; 2
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
			DIO_SetPin_Value(Motor_DataPort, Motor_A2, Motor_Low);
 578:	40 e0       	ldi	r20, 0x00	; 0
 57a:	61 e0       	ldi	r22, 0x01	; 1
 57c:	83 e0       	ldi	r24, 0x03	; 3
 57e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
			break;
 582:	2a c0       	rjmp	.+84     	; 0x5d8 <Motor_Start+0x8c>
			case Motor_CCW:
			DIO_SetPin_Value(Motor_DataPort, Motor_A1, Motor_Low);
 584:	40 e0       	ldi	r20, 0x00	; 0
 586:	62 e0       	ldi	r22, 0x02	; 2
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
			DIO_SetPin_Value(Motor_DataPort, Motor_A2, Motor_High);
 58e:	41 e0       	ldi	r20, 0x01	; 1
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	83 e0       	ldi	r24, 0x03	; 3
 594:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
			break;
 598:	1f c0       	rjmp	.+62     	; 0x5d8 <Motor_Start+0x8c>
		}
		break;
		case Motor2:
		DIO_SetPin_Value(Motor_ControlPort, Motor_EN2, Motor_On);
 59a:	41 e0       	ldi	r20, 0x01	; 1
 59c:	65 e0       	ldi	r22, 0x05	; 5
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
		switch (direction)//Switch on which direction
 5a4:	cc 23       	and	r28, r28
 5a6:	19 f0       	breq	.+6      	; 0x5ae <Motor_Start+0x62>
 5a8:	c1 30       	cpi	r28, 0x01	; 1
 5aa:	61 f0       	breq	.+24     	; 0x5c4 <Motor_Start+0x78>
 5ac:	15 c0       	rjmp	.+42     	; 0x5d8 <Motor_Start+0x8c>
		{
			case Motor_CW:
			DIO_SetPin_Value(Motor_DataPort, Motor_B1, Motor_High);
 5ae:	41 e0       	ldi	r20, 0x01	; 1
 5b0:	63 e0       	ldi	r22, 0x03	; 3
 5b2:	83 e0       	ldi	r24, 0x03	; 3
 5b4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
			DIO_SetPin_Value(Motor_DataPort, Motor_B2, Motor_Low);
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	66 e0       	ldi	r22, 0x06	; 6
 5bc:	83 e0       	ldi	r24, 0x03	; 3
 5be:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
			break;
 5c2:	0a c0       	rjmp	.+20     	; 0x5d8 <Motor_Start+0x8c>
			case Motor_CCW:
			DIO_SetPin_Value(Motor_DataPort, Motor_B1, Motor_Low);
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	63 e0       	ldi	r22, 0x03	; 3
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
			DIO_SetPin_Value(Motor_DataPort, Motor_B2, Motor_High);
 5ce:	41 e0       	ldi	r20, 0x01	; 1
 5d0:	66 e0       	ldi	r22, 0x06	; 6
 5d2:	83 e0       	ldi	r24, 0x03	; 3
 5d4:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
			break;
		}
		break;
	}
}
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

000005dc <Motor_Stop>:
void Motor_Stop(Motor motor)
{
	switch(motor)//Switch on which motor you want to start
 5dc:	88 23       	and	r24, r24
 5de:	19 f0       	breq	.+6      	; 0x5e6 <Motor_Stop+0xa>
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	89 f0       	breq	.+34     	; 0x606 <Motor_Stop+0x2a>
 5e4:	08 95       	ret
	{
		case Motor1:
		DIO_SetPin_Value(Motor_ControlPort, Motor_EN1, Motor_Off);
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	64 e0       	ldi	r22, 0x04	; 4
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
		DIO_SetPin_Value(Motor_DataPort, Motor_A1, Motor_Low);
 5f0:	40 e0       	ldi	r20, 0x00	; 0
 5f2:	62 e0       	ldi	r22, 0x02	; 2
 5f4:	83 e0       	ldi	r24, 0x03	; 3
 5f6:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
		DIO_SetPin_Value(Motor_DataPort, Motor_A2, Motor_Low);
 5fa:	40 e0       	ldi	r20, 0x00	; 0
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	83 e0       	ldi	r24, 0x03	; 3
 600:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
		break;
 604:	08 95       	ret
		case Motor2:
		DIO_SetPin_Value(Motor_ControlPort, Motor_EN2, Motor_Off);
 606:	40 e0       	ldi	r20, 0x00	; 0
 608:	65 e0       	ldi	r22, 0x05	; 5
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
		DIO_SetPin_Value(Motor_DataPort, Motor_B1, Motor_Low);
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	63 e0       	ldi	r22, 0x03	; 3
 614:	83 e0       	ldi	r24, 0x03	; 3
 616:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
		DIO_SetPin_Value(Motor_DataPort, Motor_B2, Motor_Low);
 61a:	40 e0       	ldi	r20, 0x00	; 0
 61c:	66 e0       	ldi	r22, 0x06	; 6
 61e:	83 e0       	ldi	r24, 0x03	; 3
 620:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
 624:	08 95       	ret

00000626 <ServoMotor_Initialization>:
#include "Servo_Motor.h"

void ServoMotor_Initialization(void)
{
	//Define Direction of OC1A
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
 626:	81 b3       	in	r24, 0x11	; 17
 628:	80 62       	ori	r24, 0x20	; 32
 62a:	81 bb       	out	0x11, r24	; 17
	TCNT1 = 0;			/* Set timer1 count zero */
 62c:	1d bc       	out	0x2d, r1	; 45
 62e:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
 630:	83 ec       	ldi	r24, 0xC3	; 195
 632:	99 e0       	ldi	r25, 0x09	; 9
 634:	97 bd       	out	0x27, r25	; 39
 636:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
 638:	82 e8       	ldi	r24, 0x82	; 130
 63a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
 63c:	8b e1       	ldi	r24, 0x1B	; 27
 63e:	8e bd       	out	0x2e, r24	; 46
 640:	08 95       	ret

00000642 <ServoMotor_Rotate>:
}
void ServoMotor_Rotate(uint8_t angle)
{
	OCR1A = angle;
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	9b bd       	out	0x2b, r25	; 43
 646:	8a bd       	out	0x2a, r24	; 42
 648:	08 95       	ret

0000064a <LED1_Initialize>:
	*/
	DIO_SetPin_Value(LED1_PRT, LED1, LED1_LOW);
}
void LED1_TGL(void)
{
	DIO_TglPin_Value(LED1_PRT, LED1);
 64a:	41 e0       	ldi	r20, 0x01	; 1
 64c:	66 e0       	ldi	r22, 0x06	; 6
 64e:	83 e0       	ldi	r24, 0x03	; 3
 650:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
 654:	08 95       	ret

00000656 <LED1_ON>:
 656:	41 e0       	ldi	r20, 0x01	; 1
 658:	66 e0       	ldi	r22, 0x06	; 6
 65a:	83 e0       	ldi	r24, 0x03	; 3
 65c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
 660:	08 95       	ret

00000662 <LED1_OFF>:
 662:	40 e0       	ldi	r20, 0x00	; 0
 664:	66 e0       	ldi	r22, 0x06	; 6
 666:	83 e0       	ldi	r24, 0x03	; 3
 668:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
 66c:	08 95       	ret

0000066e <Room1_status>:
}

uint8_t Room1_status(void){
	uint8_t x=DIO_GetPin_Value(LED1_PRT,LED1);
 66e:	66 e0       	ldi	r22, 0x06	; 6
 670:	83 e0       	ldi	r24, 0x03	; 3
 672:	0e 94 56 05 	call	0xaac	; 0xaac <DIO_GetPin_Value>
	if(x==1)return ROOM1_ON;
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	19 f0       	breq	.+6      	; 0x680 <Room1_status+0x12>
	else if(x==0)return ROOM1_OFF;
 67a:	88 23       	and	r24, r24
 67c:	19 f0       	breq	.+6      	; 0x684 <Room1_status+0x16>
}
 67e:	08 95       	ret
	DIO_TglPin_Value(LED1_PRT, LED1);
}

uint8_t Room1_status(void){
	uint8_t x=DIO_GetPin_Value(LED1_PRT,LED1);
	if(x==1)return ROOM1_ON;
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	08 95       	ret
	else if(x==0)return ROOM1_OFF;
 684:	80 e0       	ldi	r24, 0x00	; 0
}
 686:	08 95       	ret

00000688 <LED0_Initialize>:
{
	/*
	set_bit(DDRC, PC2);
	set_bit(LED0_DDR, LED0);
	*/
	DIO_SetPin_Direction(LED0_PRT, LED0, LED0_OUT);
 688:	41 e0       	ldi	r20, 0x01	; 1
 68a:	67 e0       	ldi	r22, 0x07	; 7
 68c:	83 e0       	ldi	r24, 0x03	; 3
 68e:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
 692:	08 95       	ret

00000694 <LED2_Initialize>:
	*/
	DIO_SetPin_Value(LED2_PRT, LED2, LED2_LOW);
}
void LED2_TGL(void)
{
	DIO_TglPin_Value(LED2_PRT, LED2);
 694:	41 e0       	ldi	r20, 0x01	; 1
 696:	67 e0       	ldi	r22, 0x07	; 7
 698:	83 e0       	ldi	r24, 0x03	; 3
 69a:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_SetPin_Direction>
 69e:	08 95       	ret

000006a0 <LED2_OFF>:
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	67 e0       	ldi	r22, 0x07	; 7
 6a4:	83 e0       	ldi	r24, 0x03	; 3
 6a6:	0e 94 e6 04 	call	0x9cc	; 0x9cc <DIO_SetPin_Value>
 6aa:	08 95       	ret

000006ac <Room2_status>:
}
uint8_t Room2_status(void){
	uint8_t x=DIO_GetPin_Value(LED2_PRT,LED2);
 6ac:	67 e0       	ldi	r22, 0x07	; 7
 6ae:	83 e0       	ldi	r24, 0x03	; 3
 6b0:	0e 94 56 05 	call	0xaac	; 0xaac <DIO_GetPin_Value>
	if(x==1)return 1;
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	19 f0       	breq	.+6      	; 0x6be <Room2_status+0x12>
	else if(x==0)return 0;
 6b8:	88 23       	and	r24, r24
 6ba:	19 f0       	breq	.+6      	; 0x6c2 <Room2_status+0x16>
}
 6bc:	08 95       	ret
{
	DIO_TglPin_Value(LED2_PRT, LED2);
}
uint8_t Room2_status(void){
	uint8_t x=DIO_GetPin_Value(LED2_PRT,LED2);
	if(x==1)return 1;
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	08 95       	ret
	else if(x==0)return 0;
 6c2:	80 e0       	ldi	r24, 0x00	; 0
}
 6c4:	08 95       	ret

000006c6 <ADC_Initialization>:
#include "ADC_Private.h"

void ADC_Initialization(ADC_Vref vref, ADC_Prescaler prescaler)
{
	// Choose voltage reference
	switch(vref)
 6c6:	81 30       	cpi	r24, 0x01	; 1
 6c8:	59 f0       	breq	.+22     	; 0x6e0 <ADC_Initialization+0x1a>
 6ca:	18 f0       	brcs	.+6      	; 0x6d2 <ADC_Initialization+0xc>
 6cc:	82 30       	cpi	r24, 0x02	; 2
 6ce:	79 f0       	breq	.+30     	; 0x6ee <ADC_Initialization+0x28>
 6d0:	14 c0       	rjmp	.+40     	; 0x6fa <ADC_Initialization+0x34>
	{
		case AREF:
		clr_bit(ADMUX, REFS1);clr_bit(ADMUX, REFS0);
 6d2:	87 b1       	in	r24, 0x07	; 7
 6d4:	8f 77       	andi	r24, 0x7F	; 127
 6d6:	87 b9       	out	0x07, r24	; 7
 6d8:	87 b1       	in	r24, 0x07	; 7
 6da:	8f 7b       	andi	r24, 0xBF	; 191
 6dc:	87 b9       	out	0x07, r24	; 7
		break;
 6de:	0d c0       	rjmp	.+26     	; 0x6fa <ADC_Initialization+0x34>
		case AVCC:
		clr_bit(ADMUX, REFS1);set_bit(ADMUX, REFS0);
 6e0:	87 b1       	in	r24, 0x07	; 7
 6e2:	8f 77       	andi	r24, 0x7F	; 127
 6e4:	87 b9       	out	0x07, r24	; 7
 6e6:	87 b1       	in	r24, 0x07	; 7
 6e8:	80 64       	ori	r24, 0x40	; 64
 6ea:	87 b9       	out	0x07, r24	; 7
		break;
 6ec:	06 c0       	rjmp	.+12     	; 0x6fa <ADC_Initialization+0x34>
		case INTERNAL:
		set_bit(ADMUX, REFS1);set_bit(ADMUX, REFS0);
 6ee:	87 b1       	in	r24, 0x07	; 7
 6f0:	80 68       	ori	r24, 0x80	; 128
 6f2:	87 b9       	out	0x07, r24	; 7
 6f4:	87 b1       	in	r24, 0x07	; 7
 6f6:	80 64       	ori	r24, 0x40	; 64
 6f8:	87 b9       	out	0x07, r24	; 7
		break;
	}
	// Choose prescaler
	switch (prescaler)
 6fa:	86 2f       	mov	r24, r22
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	88 30       	cpi	r24, 0x08	; 8
 700:	91 05       	cpc	r25, r1
 702:	08 f0       	brcs	.+2      	; 0x706 <ADC_Initialization+0x40>
 704:	54 c0       	rjmp	.+168    	; 0x7ae <ADC_Initialization+0xe8>
 706:	fc 01       	movw	r30, r24
 708:	e6 5d       	subi	r30, 0xD6	; 214
 70a:	ff 4f       	sbci	r31, 0xFF	; 255
 70c:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__tablejump2__>
	{
		case ADC_PRE1:
		clr_bit(ADCSRA, ADPS2);clr_bit(ADCSRA, ADPS1);clr_bit(ADCSRA, ADPS0);
 710:	86 b1       	in	r24, 0x06	; 6
 712:	8b 7f       	andi	r24, 0xFB	; 251
 714:	86 b9       	out	0x06, r24	; 6
 716:	86 b1       	in	r24, 0x06	; 6
 718:	8d 7f       	andi	r24, 0xFD	; 253
 71a:	86 b9       	out	0x06, r24	; 6
 71c:	86 b1       	in	r24, 0x06	; 6
 71e:	8e 7f       	andi	r24, 0xFE	; 254
 720:	86 b9       	out	0x06, r24	; 6
		break;
 722:	45 c0       	rjmp	.+138    	; 0x7ae <ADC_Initialization+0xe8>
		case ADC_PRE2:
		clr_bit(ADCSRA, ADPS2);clr_bit(ADCSRA, ADPS1);set_bit(ADCSRA, ADPS0);
 724:	86 b1       	in	r24, 0x06	; 6
 726:	8b 7f       	andi	r24, 0xFB	; 251
 728:	86 b9       	out	0x06, r24	; 6
 72a:	86 b1       	in	r24, 0x06	; 6
 72c:	8d 7f       	andi	r24, 0xFD	; 253
 72e:	86 b9       	out	0x06, r24	; 6
 730:	86 b1       	in	r24, 0x06	; 6
 732:	81 60       	ori	r24, 0x01	; 1
 734:	86 b9       	out	0x06, r24	; 6
		break;
 736:	3b c0       	rjmp	.+118    	; 0x7ae <ADC_Initialization+0xe8>
		case ADC_PRE4:
		clr_bit(ADCSRA, ADPS2);set_bit(ADCSRA, ADPS1);clr_bit(ADCSRA, ADPS0);
 738:	86 b1       	in	r24, 0x06	; 6
 73a:	8b 7f       	andi	r24, 0xFB	; 251
 73c:	86 b9       	out	0x06, r24	; 6
 73e:	86 b1       	in	r24, 0x06	; 6
 740:	82 60       	ori	r24, 0x02	; 2
 742:	86 b9       	out	0x06, r24	; 6
 744:	86 b1       	in	r24, 0x06	; 6
 746:	8e 7f       	andi	r24, 0xFE	; 254
 748:	86 b9       	out	0x06, r24	; 6
		break;
 74a:	31 c0       	rjmp	.+98     	; 0x7ae <ADC_Initialization+0xe8>
		case ADC_PRE8:
		clr_bit(ADCSRA, ADPS2);set_bit(ADCSRA, ADPS1);set_bit(ADCSRA, ADPS0);
 74c:	86 b1       	in	r24, 0x06	; 6
 74e:	8b 7f       	andi	r24, 0xFB	; 251
 750:	86 b9       	out	0x06, r24	; 6
 752:	86 b1       	in	r24, 0x06	; 6
 754:	82 60       	ori	r24, 0x02	; 2
 756:	86 b9       	out	0x06, r24	; 6
 758:	86 b1       	in	r24, 0x06	; 6
 75a:	81 60       	ori	r24, 0x01	; 1
 75c:	86 b9       	out	0x06, r24	; 6
		break;
 75e:	27 c0       	rjmp	.+78     	; 0x7ae <ADC_Initialization+0xe8>
		case ADC_PRE16:
		set_bit(ADCSRA, ADPS2);clr_bit(ADCSRA, ADPS1);clr_bit(ADCSRA, ADPS0);
 760:	86 b1       	in	r24, 0x06	; 6
 762:	84 60       	ori	r24, 0x04	; 4
 764:	86 b9       	out	0x06, r24	; 6
 766:	86 b1       	in	r24, 0x06	; 6
 768:	8d 7f       	andi	r24, 0xFD	; 253
 76a:	86 b9       	out	0x06, r24	; 6
 76c:	86 b1       	in	r24, 0x06	; 6
 76e:	8e 7f       	andi	r24, 0xFE	; 254
 770:	86 b9       	out	0x06, r24	; 6
		break;
 772:	1d c0       	rjmp	.+58     	; 0x7ae <ADC_Initialization+0xe8>
		case ADC_PRE32:
		set_bit(ADCSRA, ADPS2);clr_bit(ADCSRA, ADPS1);set_bit(ADCSRA, ADPS0);
 774:	86 b1       	in	r24, 0x06	; 6
 776:	84 60       	ori	r24, 0x04	; 4
 778:	86 b9       	out	0x06, r24	; 6
 77a:	86 b1       	in	r24, 0x06	; 6
 77c:	8d 7f       	andi	r24, 0xFD	; 253
 77e:	86 b9       	out	0x06, r24	; 6
 780:	86 b1       	in	r24, 0x06	; 6
 782:	81 60       	ori	r24, 0x01	; 1
 784:	86 b9       	out	0x06, r24	; 6
		break;
 786:	13 c0       	rjmp	.+38     	; 0x7ae <ADC_Initialization+0xe8>
		case ADC_PRE64:
		set_bit(ADCSRA, ADPS2);set_bit(ADCSRA, ADPS1);clr_bit(ADCSRA, ADPS0);
 788:	86 b1       	in	r24, 0x06	; 6
 78a:	84 60       	ori	r24, 0x04	; 4
 78c:	86 b9       	out	0x06, r24	; 6
 78e:	86 b1       	in	r24, 0x06	; 6
 790:	82 60       	ori	r24, 0x02	; 2
 792:	86 b9       	out	0x06, r24	; 6
 794:	86 b1       	in	r24, 0x06	; 6
 796:	8e 7f       	andi	r24, 0xFE	; 254
 798:	86 b9       	out	0x06, r24	; 6
		break;
 79a:	09 c0       	rjmp	.+18     	; 0x7ae <ADC_Initialization+0xe8>
		case ADC_PRE128:
		set_bit(ADCSRA, ADPS2);set_bit(ADCSRA, ADPS1);set_bit(ADCSRA, ADPS0);
 79c:	86 b1       	in	r24, 0x06	; 6
 79e:	84 60       	ori	r24, 0x04	; 4
 7a0:	86 b9       	out	0x06, r24	; 6
 7a2:	86 b1       	in	r24, 0x06	; 6
 7a4:	82 60       	ori	r24, 0x02	; 2
 7a6:	86 b9       	out	0x06, r24	; 6
 7a8:	86 b1       	in	r24, 0x06	; 6
 7aa:	81 60       	ori	r24, 0x01	; 1
 7ac:	86 b9       	out	0x06, r24	; 6
		break;
	}
	// ADC Enable
	set_bit(ADCSRA, ADEN);
 7ae:	86 b1       	in	r24, 0x06	; 6
 7b0:	80 68       	ori	r24, 0x80	; 128
 7b2:	86 b9       	out	0x06, r24	; 6
	// ADC interrupt disable
	clr_bit(ADCSRA, ADIE);
 7b4:	86 b1       	in	r24, 0x06	; 6
 7b6:	87 7f       	andi	r24, 0xF7	; 247
 7b8:	86 b9       	out	0x06, r24	; 6
	// ADC auto trigger enable
	set_bit(ADCSRA, ADATE);
 7ba:	86 b1       	in	r24, 0x06	; 6
 7bc:	80 62       	ori	r24, 0x20	; 32
 7be:	86 b9       	out	0x06, r24	; 6
	// ADC Right adjust
	clr_bit(ADMUX, ADLAR);
 7c0:	87 b1       	in	r24, 0x07	; 7
 7c2:	8f 7d       	andi	r24, 0xDF	; 223
 7c4:	87 b9       	out	0x07, r24	; 7
 7c6:	08 95       	ret

000007c8 <ADC_Read>:
}
uint16_t ADC_Read(ADC_Channel channel)
{
	uint16_t reading = 0;
	// Choose channel
	switch (channel)
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	88 30       	cpi	r24, 0x08	; 8
 7cc:	91 05       	cpc	r25, r1
 7ce:	08 f0       	brcs	.+2      	; 0x7d2 <ADC_Read+0xa>
 7d0:	84 c0       	rjmp	.+264    	; 0x8da <__stack+0x7b>
 7d2:	fc 01       	movw	r30, r24
 7d4:	ee 5c       	subi	r30, 0xCE	; 206
 7d6:	ff 4f       	sbci	r31, 0xFF	; 255
 7d8:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__tablejump2__>
	{
		case ADC_CH0:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);clr_bit(ADMUX, MUX2);clr_bit(ADMUX, MUX1);clr_bit(ADMUX, MUX0);// 0 0 0 0 0
 7dc:	87 b1       	in	r24, 0x07	; 7
 7de:	8f 7e       	andi	r24, 0xEF	; 239
 7e0:	87 b9       	out	0x07, r24	; 7
 7e2:	87 b1       	in	r24, 0x07	; 7
 7e4:	87 7f       	andi	r24, 0xF7	; 247
 7e6:	87 b9       	out	0x07, r24	; 7
 7e8:	87 b1       	in	r24, 0x07	; 7
 7ea:	8b 7f       	andi	r24, 0xFB	; 251
 7ec:	87 b9       	out	0x07, r24	; 7
 7ee:	87 b1       	in	r24, 0x07	; 7
 7f0:	8d 7f       	andi	r24, 0xFD	; 253
 7f2:	87 b9       	out	0x07, r24	; 7
 7f4:	87 b1       	in	r24, 0x07	; 7
 7f6:	8e 7f       	andi	r24, 0xFE	; 254
 7f8:	87 b9       	out	0x07, r24	; 7
		break;
 7fa:	6f c0       	rjmp	.+222    	; 0x8da <__stack+0x7b>
		case ADC_CH1:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);clr_bit(ADMUX, MUX2);clr_bit(ADMUX, MUX1);set_bit(ADMUX, MUX0);// 0 0 0 0 1
 7fc:	87 b1       	in	r24, 0x07	; 7
 7fe:	8f 7e       	andi	r24, 0xEF	; 239
 800:	87 b9       	out	0x07, r24	; 7
 802:	87 b1       	in	r24, 0x07	; 7
 804:	87 7f       	andi	r24, 0xF7	; 247
 806:	87 b9       	out	0x07, r24	; 7
 808:	87 b1       	in	r24, 0x07	; 7
 80a:	8b 7f       	andi	r24, 0xFB	; 251
 80c:	87 b9       	out	0x07, r24	; 7
 80e:	87 b1       	in	r24, 0x07	; 7
 810:	8d 7f       	andi	r24, 0xFD	; 253
 812:	87 b9       	out	0x07, r24	; 7
 814:	87 b1       	in	r24, 0x07	; 7
 816:	81 60       	ori	r24, 0x01	; 1
 818:	87 b9       	out	0x07, r24	; 7
		break;
 81a:	5f c0       	rjmp	.+190    	; 0x8da <__stack+0x7b>
		case ADC_CH2:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);clr_bit(ADMUX, MUX2);set_bit(ADMUX, MUX1);clr_bit(ADMUX, MUX0);// 0 0 0 1 0
 81c:	87 b1       	in	r24, 0x07	; 7
 81e:	8f 7e       	andi	r24, 0xEF	; 239
 820:	87 b9       	out	0x07, r24	; 7
 822:	87 b1       	in	r24, 0x07	; 7
 824:	87 7f       	andi	r24, 0xF7	; 247
 826:	87 b9       	out	0x07, r24	; 7
 828:	87 b1       	in	r24, 0x07	; 7
 82a:	8b 7f       	andi	r24, 0xFB	; 251
 82c:	87 b9       	out	0x07, r24	; 7
 82e:	87 b1       	in	r24, 0x07	; 7
 830:	82 60       	ori	r24, 0x02	; 2
 832:	87 b9       	out	0x07, r24	; 7
 834:	87 b1       	in	r24, 0x07	; 7
 836:	8e 7f       	andi	r24, 0xFE	; 254
 838:	87 b9       	out	0x07, r24	; 7
		break;
 83a:	4f c0       	rjmp	.+158    	; 0x8da <__stack+0x7b>
		case ADC_CH3:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);clr_bit(ADMUX, MUX2);set_bit(ADMUX, MUX1);set_bit(ADMUX, MUX0);// 0 0 0 1 1
 83c:	87 b1       	in	r24, 0x07	; 7
 83e:	8f 7e       	andi	r24, 0xEF	; 239
 840:	87 b9       	out	0x07, r24	; 7
 842:	87 b1       	in	r24, 0x07	; 7
 844:	87 7f       	andi	r24, 0xF7	; 247
 846:	87 b9       	out	0x07, r24	; 7
 848:	87 b1       	in	r24, 0x07	; 7
 84a:	8b 7f       	andi	r24, 0xFB	; 251
 84c:	87 b9       	out	0x07, r24	; 7
 84e:	87 b1       	in	r24, 0x07	; 7
 850:	82 60       	ori	r24, 0x02	; 2
 852:	87 b9       	out	0x07, r24	; 7
 854:	87 b1       	in	r24, 0x07	; 7
 856:	81 60       	ori	r24, 0x01	; 1
 858:	87 b9       	out	0x07, r24	; 7
		break;
 85a:	3f c0       	rjmp	.+126    	; 0x8da <__stack+0x7b>
		case ADC_CH4:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);set_bit(ADMUX, MUX2);clr_bit(ADMUX, MUX1);clr_bit(ADMUX, MUX0);// 0 0 1 0 0
 85c:	87 b1       	in	r24, 0x07	; 7
 85e:	8f 7e       	andi	r24, 0xEF	; 239
 860:	87 b9       	out	0x07, r24	; 7
 862:	87 b1       	in	r24, 0x07	; 7
 864:	87 7f       	andi	r24, 0xF7	; 247
 866:	87 b9       	out	0x07, r24	; 7
 868:	87 b1       	in	r24, 0x07	; 7
 86a:	84 60       	ori	r24, 0x04	; 4
 86c:	87 b9       	out	0x07, r24	; 7
 86e:	87 b1       	in	r24, 0x07	; 7
 870:	8d 7f       	andi	r24, 0xFD	; 253
 872:	87 b9       	out	0x07, r24	; 7
 874:	87 b1       	in	r24, 0x07	; 7
 876:	8e 7f       	andi	r24, 0xFE	; 254
 878:	87 b9       	out	0x07, r24	; 7
		break;
 87a:	2f c0       	rjmp	.+94     	; 0x8da <__stack+0x7b>
		case ADC_CH5:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);set_bit(ADMUX, MUX2);clr_bit(ADMUX, MUX1);set_bit(ADMUX, MUX0);// 0 0 1 0 1
 87c:	87 b1       	in	r24, 0x07	; 7
 87e:	8f 7e       	andi	r24, 0xEF	; 239
 880:	87 b9       	out	0x07, r24	; 7
 882:	87 b1       	in	r24, 0x07	; 7
 884:	87 7f       	andi	r24, 0xF7	; 247
 886:	87 b9       	out	0x07, r24	; 7
 888:	87 b1       	in	r24, 0x07	; 7
 88a:	84 60       	ori	r24, 0x04	; 4
 88c:	87 b9       	out	0x07, r24	; 7
 88e:	87 b1       	in	r24, 0x07	; 7
 890:	8d 7f       	andi	r24, 0xFD	; 253
 892:	87 b9       	out	0x07, r24	; 7
 894:	87 b1       	in	r24, 0x07	; 7
 896:	81 60       	ori	r24, 0x01	; 1
 898:	87 b9       	out	0x07, r24	; 7
		break;
 89a:	1f c0       	rjmp	.+62     	; 0x8da <__stack+0x7b>
		case ADC_CH6:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);set_bit(ADMUX, MUX2);set_bit(ADMUX, MUX1);clr_bit(ADMUX, MUX0);// 0 0 1 1 0
 89c:	87 b1       	in	r24, 0x07	; 7
 89e:	8f 7e       	andi	r24, 0xEF	; 239
 8a0:	87 b9       	out	0x07, r24	; 7
 8a2:	87 b1       	in	r24, 0x07	; 7
 8a4:	87 7f       	andi	r24, 0xF7	; 247
 8a6:	87 b9       	out	0x07, r24	; 7
 8a8:	87 b1       	in	r24, 0x07	; 7
 8aa:	84 60       	ori	r24, 0x04	; 4
 8ac:	87 b9       	out	0x07, r24	; 7
 8ae:	87 b1       	in	r24, 0x07	; 7
 8b0:	82 60       	ori	r24, 0x02	; 2
 8b2:	87 b9       	out	0x07, r24	; 7
 8b4:	87 b1       	in	r24, 0x07	; 7
 8b6:	8e 7f       	andi	r24, 0xFE	; 254
 8b8:	87 b9       	out	0x07, r24	; 7
		break;
 8ba:	0f c0       	rjmp	.+30     	; 0x8da <__stack+0x7b>
		case ADC_CH7:
		clr_bit(ADMUX, MUX4);clr_bit(ADMUX, MUX3);set_bit(ADMUX, MUX2);set_bit(ADMUX, MUX1);set_bit(ADMUX, MUX0);// 0 0 1 1 1
 8bc:	87 b1       	in	r24, 0x07	; 7
 8be:	8f 7e       	andi	r24, 0xEF	; 239
 8c0:	87 b9       	out	0x07, r24	; 7
 8c2:	87 b1       	in	r24, 0x07	; 7
 8c4:	87 7f       	andi	r24, 0xF7	; 247
 8c6:	87 b9       	out	0x07, r24	; 7
 8c8:	87 b1       	in	r24, 0x07	; 7
 8ca:	84 60       	ori	r24, 0x04	; 4
 8cc:	87 b9       	out	0x07, r24	; 7
 8ce:	87 b1       	in	r24, 0x07	; 7
 8d0:	82 60       	ori	r24, 0x02	; 2
 8d2:	87 b9       	out	0x07, r24	; 7
 8d4:	87 b1       	in	r24, 0x07	; 7
 8d6:	81 60       	ori	r24, 0x01	; 1
 8d8:	87 b9       	out	0x07, r24	; 7
		break;
	}
	// ADC Start conversion 
	set_bit(ADCSRA, ADSC);
 8da:	86 b1       	in	r24, 0x06	; 6
 8dc:	80 64       	ori	r24, 0x40	; 64
 8de:	86 b9       	out	0x06, r24	; 6
	// wait until conversion finish
	while (ADCSRA & (1<<ADSC));
 8e0:	36 99       	sbic	0x06, 6	; 6
 8e2:	fe cf       	rjmp	.-4      	; 0x8e0 <__stack+0x81>
	reading = ADC;
 8e4:	84 b1       	in	r24, 0x04	; 4
 8e6:	95 b1       	in	r25, 0x05	; 5
	return reading;
 8e8:	08 95       	ret

000008ea <DIO_SetPin_Direction>:
			break;
			case DIO_PORTC:
			DDRC = 0xFF;
			break;
			case DIO_PORTD:
			DDRD = 0xFF;
 8ea:	44 23       	and	r20, r20
 8ec:	b9 f1       	breq	.+110    	; 0x95c <DIO_SetPin_Direction+0x72>
 8ee:	41 30       	cpi	r20, 0x01	; 1
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <DIO_SetPin_Direction+0xa>
 8f2:	6b c0       	rjmp	.+214    	; 0x9ca <DIO_SetPin_Direction+0xe0>
 8f4:	81 30       	cpi	r24, 0x01	; 1
 8f6:	89 f0       	breq	.+34     	; 0x91a <DIO_SetPin_Direction+0x30>
 8f8:	28 f0       	brcs	.+10     	; 0x904 <DIO_SetPin_Direction+0x1a>
 8fa:	82 30       	cpi	r24, 0x02	; 2
 8fc:	c9 f0       	breq	.+50     	; 0x930 <DIO_SetPin_Direction+0x46>
 8fe:	83 30       	cpi	r24, 0x03	; 3
 900:	11 f1       	breq	.+68     	; 0x946 <DIO_SetPin_Direction+0x5c>
 902:	08 95       	ret
 904:	2a b3       	in	r18, 0x1a	; 26
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	02 c0       	rjmp	.+4      	; 0x910 <DIO_SetPin_Direction+0x26>
 90c:	88 0f       	add	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	6a 95       	dec	r22
 912:	e2 f7       	brpl	.-8      	; 0x90c <DIO_SetPin_Direction+0x22>
 914:	82 2b       	or	r24, r18
 916:	8a bb       	out	0x1a, r24	; 26
 918:	08 95       	ret
 91a:	27 b3       	in	r18, 0x17	; 23
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <DIO_SetPin_Direction+0x3c>
 922:	88 0f       	add	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	6a 95       	dec	r22
 928:	e2 f7       	brpl	.-8      	; 0x922 <DIO_SetPin_Direction+0x38>
 92a:	82 2b       	or	r24, r18
 92c:	87 bb       	out	0x17, r24	; 23
 92e:	08 95       	ret
 930:	24 b3       	in	r18, 0x14	; 20
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	02 c0       	rjmp	.+4      	; 0x93c <DIO_SetPin_Direction+0x52>
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	6a 95       	dec	r22
 93e:	e2 f7       	brpl	.-8      	; 0x938 <DIO_SetPin_Direction+0x4e>
 940:	82 2b       	or	r24, r18
 942:	84 bb       	out	0x14, r24	; 20
 944:	08 95       	ret
 946:	21 b3       	in	r18, 0x11	; 17
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	02 c0       	rjmp	.+4      	; 0x952 <DIO_SetPin_Direction+0x68>
 94e:	88 0f       	add	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	6a 95       	dec	r22
 954:	e2 f7       	brpl	.-8      	; 0x94e <DIO_SetPin_Direction+0x64>
 956:	82 2b       	or	r24, r18
 958:	81 bb       	out	0x11, r24	; 17
 95a:	08 95       	ret
 95c:	81 30       	cpi	r24, 0x01	; 1
 95e:	91 f0       	breq	.+36     	; 0x984 <DIO_SetPin_Direction+0x9a>
 960:	28 f0       	brcs	.+10     	; 0x96c <DIO_SetPin_Direction+0x82>
 962:	82 30       	cpi	r24, 0x02	; 2
 964:	d9 f0       	breq	.+54     	; 0x99c <DIO_SetPin_Direction+0xb2>
 966:	83 30       	cpi	r24, 0x03	; 3
 968:	29 f1       	breq	.+74     	; 0x9b4 <DIO_SetPin_Direction+0xca>
 96a:	08 95       	ret
 96c:	2a b3       	in	r18, 0x1a	; 26
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	02 c0       	rjmp	.+4      	; 0x978 <DIO_SetPin_Direction+0x8e>
 974:	88 0f       	add	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	6a 95       	dec	r22
 97a:	e2 f7       	brpl	.-8      	; 0x974 <DIO_SetPin_Direction+0x8a>
 97c:	80 95       	com	r24
 97e:	82 23       	and	r24, r18
 980:	8a bb       	out	0x1a, r24	; 26
 982:	08 95       	ret
 984:	27 b3       	in	r18, 0x17	; 23
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	02 c0       	rjmp	.+4      	; 0x990 <DIO_SetPin_Direction+0xa6>
 98c:	88 0f       	add	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	6a 95       	dec	r22
 992:	e2 f7       	brpl	.-8      	; 0x98c <DIO_SetPin_Direction+0xa2>
 994:	80 95       	com	r24
 996:	82 23       	and	r24, r18
 998:	87 bb       	out	0x17, r24	; 23
 99a:	08 95       	ret
 99c:	24 b3       	in	r18, 0x14	; 20
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <DIO_SetPin_Direction+0xbe>
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	6a 95       	dec	r22
 9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <DIO_SetPin_Direction+0xba>
 9ac:	80 95       	com	r24
 9ae:	82 23       	and	r24, r18
 9b0:	84 bb       	out	0x14, r24	; 20
 9b2:	08 95       	ret
 9b4:	21 b3       	in	r18, 0x11	; 17
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <DIO_SetPin_Direction+0xd6>
 9bc:	88 0f       	add	r24, r24
 9be:	99 1f       	adc	r25, r25
 9c0:	6a 95       	dec	r22
 9c2:	e2 f7       	brpl	.-8      	; 0x9bc <DIO_SetPin_Direction+0xd2>
 9c4:	80 95       	com	r24
 9c6:	82 23       	and	r24, r18
 9c8:	81 bb       	out	0x11, r24	; 17
 9ca:	08 95       	ret

000009cc <DIO_SetPin_Value>:
 9cc:	41 30       	cpi	r20, 0x01	; 1
 9ce:	a1 f5       	brne	.+104    	; 0xa38 <DIO_SetPin_Value+0x6c>
 9d0:	81 30       	cpi	r24, 0x01	; 1
 9d2:	89 f0       	breq	.+34     	; 0x9f6 <DIO_SetPin_Value+0x2a>
 9d4:	28 f0       	brcs	.+10     	; 0x9e0 <DIO_SetPin_Value+0x14>
 9d6:	82 30       	cpi	r24, 0x02	; 2
 9d8:	c9 f0       	breq	.+50     	; 0xa0c <DIO_SetPin_Value+0x40>
 9da:	83 30       	cpi	r24, 0x03	; 3
 9dc:	11 f1       	breq	.+68     	; 0xa22 <DIO_SetPin_Value+0x56>
 9de:	08 95       	ret
 9e0:	2b b3       	in	r18, 0x1b	; 27
 9e2:	81 e0       	ldi	r24, 0x01	; 1
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <DIO_SetPin_Value+0x20>
 9e8:	88 0f       	add	r24, r24
 9ea:	99 1f       	adc	r25, r25
 9ec:	6a 95       	dec	r22
 9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <DIO_SetPin_Value+0x1c>
 9f0:	82 2b       	or	r24, r18
 9f2:	8b bb       	out	0x1b, r24	; 27
 9f4:	08 95       	ret
 9f6:	28 b3       	in	r18, 0x18	; 24
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <DIO_SetPin_Value+0x36>
 9fe:	88 0f       	add	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	6a 95       	dec	r22
 a04:	e2 f7       	brpl	.-8      	; 0x9fe <DIO_SetPin_Value+0x32>
 a06:	82 2b       	or	r24, r18
 a08:	88 bb       	out	0x18, r24	; 24
 a0a:	08 95       	ret
 a0c:	25 b3       	in	r18, 0x15	; 21
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <DIO_SetPin_Value+0x4c>
 a14:	88 0f       	add	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	6a 95       	dec	r22
 a1a:	e2 f7       	brpl	.-8      	; 0xa14 <DIO_SetPin_Value+0x48>
 a1c:	82 2b       	or	r24, r18
 a1e:	85 bb       	out	0x15, r24	; 21
 a20:	08 95       	ret
 a22:	22 b3       	in	r18, 0x12	; 18
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <DIO_SetPin_Value+0x62>
 a2a:	88 0f       	add	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	6a 95       	dec	r22
 a30:	e2 f7       	brpl	.-8      	; 0xa2a <DIO_SetPin_Value+0x5e>
 a32:	82 2b       	or	r24, r18
 a34:	82 bb       	out	0x12, r24	; 18
 a36:	08 95       	ret
 a38:	41 11       	cpse	r20, r1
 a3a:	37 c0       	rjmp	.+110    	; 0xaaa <DIO_SetPin_Value+0xde>
 a3c:	81 30       	cpi	r24, 0x01	; 1
 a3e:	91 f0       	breq	.+36     	; 0xa64 <DIO_SetPin_Value+0x98>
 a40:	28 f0       	brcs	.+10     	; 0xa4c <DIO_SetPin_Value+0x80>
 a42:	82 30       	cpi	r24, 0x02	; 2
 a44:	d9 f0       	breq	.+54     	; 0xa7c <DIO_SetPin_Value+0xb0>
 a46:	83 30       	cpi	r24, 0x03	; 3
 a48:	29 f1       	breq	.+74     	; 0xa94 <DIO_SetPin_Value+0xc8>
 a4a:	08 95       	ret
 a4c:	2b b3       	in	r18, 0x1b	; 27
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <DIO_SetPin_Value+0x8c>
 a54:	88 0f       	add	r24, r24
 a56:	99 1f       	adc	r25, r25
 a58:	6a 95       	dec	r22
 a5a:	e2 f7       	brpl	.-8      	; 0xa54 <DIO_SetPin_Value+0x88>
 a5c:	80 95       	com	r24
 a5e:	82 23       	and	r24, r18
 a60:	8b bb       	out	0x1b, r24	; 27
 a62:	08 95       	ret
 a64:	28 b3       	in	r18, 0x18	; 24
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	02 c0       	rjmp	.+4      	; 0xa70 <DIO_SetPin_Value+0xa4>
 a6c:	88 0f       	add	r24, r24
 a6e:	99 1f       	adc	r25, r25
 a70:	6a 95       	dec	r22
 a72:	e2 f7       	brpl	.-8      	; 0xa6c <DIO_SetPin_Value+0xa0>
 a74:	80 95       	com	r24
 a76:	82 23       	and	r24, r18
 a78:	88 bb       	out	0x18, r24	; 24
 a7a:	08 95       	ret
 a7c:	25 b3       	in	r18, 0x15	; 21
 a7e:	81 e0       	ldi	r24, 0x01	; 1
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <DIO_SetPin_Value+0xbc>
 a84:	88 0f       	add	r24, r24
 a86:	99 1f       	adc	r25, r25
 a88:	6a 95       	dec	r22
 a8a:	e2 f7       	brpl	.-8      	; 0xa84 <DIO_SetPin_Value+0xb8>
 a8c:	80 95       	com	r24
 a8e:	82 23       	and	r24, r18
 a90:	85 bb       	out	0x15, r24	; 21
 a92:	08 95       	ret
 a94:	22 b3       	in	r18, 0x12	; 18
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <DIO_SetPin_Value+0xd4>
 a9c:	88 0f       	add	r24, r24
 a9e:	99 1f       	adc	r25, r25
 aa0:	6a 95       	dec	r22
 aa2:	e2 f7       	brpl	.-8      	; 0xa9c <DIO_SetPin_Value+0xd0>
 aa4:	80 95       	com	r24
 aa6:	82 23       	and	r24, r18
 aa8:	82 bb       	out	0x12, r24	; 18
 aaa:	08 95       	ret

00000aac <DIO_GetPin_Value>:
}

Uint8_t DIO_GetPin_Value(DIO_PORT PORT, DIO_PIN PIN)
{
	uint8_t reading = 0;
	switch(PORT)
 aac:	81 30       	cpi	r24, 0x01	; 1
 aae:	79 f0       	breq	.+30     	; 0xace <DIO_GetPin_Value+0x22>
 ab0:	28 f0       	brcs	.+10     	; 0xabc <DIO_GetPin_Value+0x10>
 ab2:	82 30       	cpi	r24, 0x02	; 2
 ab4:	a9 f0       	breq	.+42     	; 0xae0 <DIO_GetPin_Value+0x34>
 ab6:	83 30       	cpi	r24, 0x03	; 3
 ab8:	e1 f0       	breq	.+56     	; 0xaf2 <DIO_GetPin_Value+0x46>
 aba:	24 c0       	rjmp	.+72     	; 0xb04 <DIO_GetPin_Value+0x58>
	{
		case DIO_PORTA:
		reading = get_bit(PINA, PIN);
 abc:	89 b3       	in	r24, 0x19	; 25
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_GetPin_Value+0x1a>
 ac2:	95 95       	asr	r25
 ac4:	87 95       	ror	r24
 ac6:	6a 95       	dec	r22
 ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_GetPin_Value+0x16>
 aca:	81 70       	andi	r24, 0x01	; 1
		break;
 acc:	08 95       	ret
		case DIO_PORTB:
		reading = get_bit(PINB, PIN);
 ace:	86 b3       	in	r24, 0x16	; 22
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <DIO_GetPin_Value+0x2c>
 ad4:	95 95       	asr	r25
 ad6:	87 95       	ror	r24
 ad8:	6a 95       	dec	r22
 ada:	e2 f7       	brpl	.-8      	; 0xad4 <DIO_GetPin_Value+0x28>
 adc:	81 70       	andi	r24, 0x01	; 1
		break;
 ade:	08 95       	ret
		case DIO_PORTC:
		reading = get_bit(PINC, PIN);
 ae0:	83 b3       	in	r24, 0x13	; 19
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	02 c0       	rjmp	.+4      	; 0xaea <DIO_GetPin_Value+0x3e>
 ae6:	95 95       	asr	r25
 ae8:	87 95       	ror	r24
 aea:	6a 95       	dec	r22
 aec:	e2 f7       	brpl	.-8      	; 0xae6 <DIO_GetPin_Value+0x3a>
 aee:	81 70       	andi	r24, 0x01	; 1
		break;
 af0:	08 95       	ret
		case DIO_PORTD:
		reading = get_bit(PIND, PIN);
 af2:	80 b3       	in	r24, 0x10	; 16
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	02 c0       	rjmp	.+4      	; 0xafc <DIO_GetPin_Value+0x50>
 af8:	95 95       	asr	r25
 afa:	87 95       	ror	r24
 afc:	6a 95       	dec	r22
 afe:	e2 f7       	brpl	.-8      	; 0xaf8 <DIO_GetPin_Value+0x4c>
 b00:	81 70       	andi	r24, 0x01	; 1
		break;
 b02:	08 95       	ret
	}
}

Uint8_t DIO_GetPin_Value(DIO_PORT PORT, DIO_PIN PIN)
{
	uint8_t reading = 0;
 b04:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTD:
		reading = get_bit(PIND, PIN);
		break;
	}
	return reading;
}
 b06:	08 95       	ret

00000b08 <PWM_init>:


void PWM_init()
{
	/*set fast PWM mode with non-inverted output*/
	TCCR2 = (1<<WGM20) | (1<<WGM20) | (1<<COM21) | (1<<CS20);
 b08:	81 e6       	ldi	r24, 0x61	; 97
 b0a:	85 bd       	out	0x25, r24	; 37
	DDRD|=(1<<PD7);  /*set OC0 pin as output*/
 b0c:	81 b3       	in	r24, 0x11	; 17
 b0e:	80 68       	ori	r24, 0x80	; 128
 b10:	81 bb       	out	0x11, r24	; 17
 b12:	08 95       	ret

00000b14 <FAST_PWM_set_duty>:
	//TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
	//DDRB|=(1<<PB3);  /*set OC0 pin as output*/
}
void FAST_PWM_set_duty(FAST_Mode mode , uint8_t duty_cycle){

	switch(mode)
 b14:	81 30       	cpi	r24, 0x01	; 1
 b16:	69 f0       	breq	.+26     	; 0xb32 <FAST_PWM_set_duty+0x1e>
 b18:	28 f0       	brcs	.+10     	; 0xb24 <FAST_PWM_set_duty+0x10>
 b1a:	82 30       	cpi	r24, 0x02	; 2
 b1c:	89 f0       	breq	.+34     	; 0xb40 <FAST_PWM_set_duty+0x2c>
 b1e:	83 30       	cpi	r24, 0x03	; 3
 b20:	01 f1       	breq	.+64     	; 0xb62 <FAST_PWM_set_duty+0x4e>
 b22:	08 95       	ret
	{
		case FAST_OC0_Disconnected:
		clr_bit(TCCR2,COM21) ; clr_bit(TCCR2,COM20) ;
 b24:	85 b5       	in	r24, 0x25	; 37
 b26:	8f 7d       	andi	r24, 0xDF	; 223
 b28:	85 bd       	out	0x25, r24	; 37
 b2a:	85 b5       	in	r24, 0x25	; 37
 b2c:	8f 7e       	andi	r24, 0xEF	; 239
 b2e:	85 bd       	out	0x25, r24	; 37
		break;
 b30:	08 95       	ret
		case FAST_OC0_RESERVED:
		clr_bit(TCCR2,COM21) ; set_bit(TCCR2,COM20) ;
 b32:	85 b5       	in	r24, 0x25	; 37
 b34:	8f 7d       	andi	r24, 0xDF	; 223
 b36:	85 bd       	out	0x25, r24	; 37
 b38:	85 b5       	in	r24, 0x25	; 37
 b3a:	80 61       	ori	r24, 0x10	; 16
 b3c:	85 bd       	out	0x25, r24	; 37
		break;
 b3e:	08 95       	ret

		case FAST_OC0_NON_INVERTING:{
		set_bit(TCCR2,COM21) ; clr_bit(TCCR2,COM20) ;
 b40:	85 b5       	in	r24, 0x25	; 37
 b42:	80 62       	ori	r24, 0x20	; 32
 b44:	85 bd       	out	0x25, r24	; 37
 b46:	85 b5       	in	r24, 0x25	; 37
 b48:	8f 7e       	andi	r24, 0xEF	; 239
 b4a:	85 bd       	out	0x25, r24	; 37
		OCR2=(((256-duty_cycle)/100)-1);
 b4c:	80 e0       	ldi	r24, 0x00	; 0
 b4e:	91 e0       	ldi	r25, 0x01	; 1
 b50:	86 1b       	sub	r24, r22
 b52:	91 09       	sbc	r25, r1
 b54:	64 e6       	ldi	r22, 0x64	; 100
 b56:	70 e0       	ldi	r23, 0x00	; 0
 b58:	0e 94 72 07 	call	0xee4	; 0xee4 <__divmodhi4>
 b5c:	61 50       	subi	r22, 0x01	; 1
 b5e:	63 bd       	out	0x23, r22	; 35
		}
		break;
 b60:	08 95       	ret
		case FAST_OC0_INVERTING:
		{
		set_bit(TCCR2,COM21) ; set_bit(TCCR2,COM20) ;
 b62:	85 b5       	in	r24, 0x25	; 37
 b64:	80 62       	ori	r24, 0x20	; 32
 b66:	85 bd       	out	0x25, r24	; 37
 b68:	85 b5       	in	r24, 0x25	; 37
 b6a:	80 61       	ori	r24, 0x10	; 16
 b6c:	85 bd       	out	0x25, r24	; 37
		OCR2=(256-1)-(((256-duty_cycle)/100)-1);
 b6e:	80 e0       	ldi	r24, 0x00	; 0
 b70:	91 e0       	ldi	r25, 0x01	; 1
 b72:	86 1b       	sub	r24, r22
 b74:	91 09       	sbc	r25, r1
 b76:	64 e6       	ldi	r22, 0x64	; 100
 b78:	70 e0       	ldi	r23, 0x00	; 0
 b7a:	0e 94 72 07 	call	0xee4	; 0xee4 <__divmodhi4>
 b7e:	61 95       	neg	r22
 b80:	63 bd       	out	0x23, r22	; 35
 b82:	08 95       	ret

00000b84 <SPI_SLave_Initialize>:
uint8_t SPI_Receive(void)
{
	//Two Lines
	while (get_bit(SPSR, SPIF) != 1);
	return SPDR;
}
 b84:	87 b3       	in	r24, 0x17	; 23
 b86:	8f 7d       	andi	r24, 0xDF	; 223
 b88:	87 bb       	out	0x17, r24	; 23
 b8a:	87 b3       	in	r24, 0x17	; 23
 b8c:	80 64       	ori	r24, 0x40	; 64
 b8e:	87 bb       	out	0x17, r24	; 23
 b90:	87 b3       	in	r24, 0x17	; 23
 b92:	8f 77       	andi	r24, 0x7F	; 127
 b94:	87 bb       	out	0x17, r24	; 23
 b96:	87 b3       	in	r24, 0x17	; 23
 b98:	8f 7e       	andi	r24, 0xEF	; 239
 b9a:	87 bb       	out	0x17, r24	; 23
 b9c:	83 e4       	ldi	r24, 0x43	; 67
 b9e:	8d b9       	out	0x0d, r24	; 13
 ba0:	08 95       	ret

00000ba2 <SPI_TranCeive>:
uint8_t SPI_TranCeive(uint8_t data)
{
	SPDR = data;
 ba2:	8f b9       	out	0x0f, r24	; 15
	while (get_bit(SPSR, SPIF) != 1);
 ba4:	77 9b       	sbis	0x0e, 7	; 14
 ba6:	fe cf       	rjmp	.-4      	; 0xba4 <SPI_TranCeive+0x2>
	return SPDR;
 ba8:	8f b1       	in	r24, 0x0f	; 15
}
 baa:	08 95       	ret

00000bac <__divsf3>:
 bac:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__divsf3x>
 bb0:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__fp_round>
 bb4:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fp_pscB>
 bb8:	58 f0       	brcs	.+22     	; 0xbd0 <__divsf3+0x24>
 bba:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__fp_pscA>
 bbe:	40 f0       	brcs	.+16     	; 0xbd0 <__divsf3+0x24>
 bc0:	29 f4       	brne	.+10     	; 0xbcc <__divsf3+0x20>
 bc2:	5f 3f       	cpi	r21, 0xFF	; 255
 bc4:	29 f0       	breq	.+10     	; 0xbd0 <__divsf3+0x24>
 bc6:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_inf>
 bca:	51 11       	cpse	r21, r1
 bcc:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_szero>
 bd0:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_nan>

00000bd4 <__divsf3x>:
 bd4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fp_split3>
 bd8:	68 f3       	brcs	.-38     	; 0xbb4 <__divsf3+0x8>

00000bda <__divsf3_pse>:
 bda:	99 23       	and	r25, r25
 bdc:	b1 f3       	breq	.-20     	; 0xbca <__divsf3+0x1e>
 bde:	55 23       	and	r21, r21
 be0:	91 f3       	breq	.-28     	; 0xbc6 <__divsf3+0x1a>
 be2:	95 1b       	sub	r25, r21
 be4:	55 0b       	sbc	r21, r21
 be6:	bb 27       	eor	r27, r27
 be8:	aa 27       	eor	r26, r26
 bea:	62 17       	cp	r22, r18
 bec:	73 07       	cpc	r23, r19
 bee:	84 07       	cpc	r24, r20
 bf0:	38 f0       	brcs	.+14     	; 0xc00 <__divsf3_pse+0x26>
 bf2:	9f 5f       	subi	r25, 0xFF	; 255
 bf4:	5f 4f       	sbci	r21, 0xFF	; 255
 bf6:	22 0f       	add	r18, r18
 bf8:	33 1f       	adc	r19, r19
 bfa:	44 1f       	adc	r20, r20
 bfc:	aa 1f       	adc	r26, r26
 bfe:	a9 f3       	breq	.-22     	; 0xbea <__divsf3_pse+0x10>
 c00:	35 d0       	rcall	.+106    	; 0xc6c <__divsf3_pse+0x92>
 c02:	0e 2e       	mov	r0, r30
 c04:	3a f0       	brmi	.+14     	; 0xc14 <__divsf3_pse+0x3a>
 c06:	e0 e8       	ldi	r30, 0x80	; 128
 c08:	32 d0       	rcall	.+100    	; 0xc6e <__divsf3_pse+0x94>
 c0a:	91 50       	subi	r25, 0x01	; 1
 c0c:	50 40       	sbci	r21, 0x00	; 0
 c0e:	e6 95       	lsr	r30
 c10:	00 1c       	adc	r0, r0
 c12:	ca f7       	brpl	.-14     	; 0xc06 <__divsf3_pse+0x2c>
 c14:	2b d0       	rcall	.+86     	; 0xc6c <__divsf3_pse+0x92>
 c16:	fe 2f       	mov	r31, r30
 c18:	29 d0       	rcall	.+82     	; 0xc6c <__divsf3_pse+0x92>
 c1a:	66 0f       	add	r22, r22
 c1c:	77 1f       	adc	r23, r23
 c1e:	88 1f       	adc	r24, r24
 c20:	bb 1f       	adc	r27, r27
 c22:	26 17       	cp	r18, r22
 c24:	37 07       	cpc	r19, r23
 c26:	48 07       	cpc	r20, r24
 c28:	ab 07       	cpc	r26, r27
 c2a:	b0 e8       	ldi	r27, 0x80	; 128
 c2c:	09 f0       	breq	.+2      	; 0xc30 <__divsf3_pse+0x56>
 c2e:	bb 0b       	sbc	r27, r27
 c30:	80 2d       	mov	r24, r0
 c32:	bf 01       	movw	r22, r30
 c34:	ff 27       	eor	r31, r31
 c36:	93 58       	subi	r25, 0x83	; 131
 c38:	5f 4f       	sbci	r21, 0xFF	; 255
 c3a:	3a f0       	brmi	.+14     	; 0xc4a <__divsf3_pse+0x70>
 c3c:	9e 3f       	cpi	r25, 0xFE	; 254
 c3e:	51 05       	cpc	r21, r1
 c40:	78 f0       	brcs	.+30     	; 0xc60 <__divsf3_pse+0x86>
 c42:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_inf>
 c46:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_szero>
 c4a:	5f 3f       	cpi	r21, 0xFF	; 255
 c4c:	e4 f3       	brlt	.-8      	; 0xc46 <__divsf3_pse+0x6c>
 c4e:	98 3e       	cpi	r25, 0xE8	; 232
 c50:	d4 f3       	brlt	.-12     	; 0xc46 <__divsf3_pse+0x6c>
 c52:	86 95       	lsr	r24
 c54:	77 95       	ror	r23
 c56:	67 95       	ror	r22
 c58:	b7 95       	ror	r27
 c5a:	f7 95       	ror	r31
 c5c:	9f 5f       	subi	r25, 0xFF	; 255
 c5e:	c9 f7       	brne	.-14     	; 0xc52 <__divsf3_pse+0x78>
 c60:	88 0f       	add	r24, r24
 c62:	91 1d       	adc	r25, r1
 c64:	96 95       	lsr	r25
 c66:	87 95       	ror	r24
 c68:	97 f9       	bld	r25, 7
 c6a:	08 95       	ret
 c6c:	e1 e0       	ldi	r30, 0x01	; 1
 c6e:	66 0f       	add	r22, r22
 c70:	77 1f       	adc	r23, r23
 c72:	88 1f       	adc	r24, r24
 c74:	bb 1f       	adc	r27, r27
 c76:	62 17       	cp	r22, r18
 c78:	73 07       	cpc	r23, r19
 c7a:	84 07       	cpc	r24, r20
 c7c:	ba 07       	cpc	r27, r26
 c7e:	20 f0       	brcs	.+8      	; 0xc88 <__divsf3_pse+0xae>
 c80:	62 1b       	sub	r22, r18
 c82:	73 0b       	sbc	r23, r19
 c84:	84 0b       	sbc	r24, r20
 c86:	ba 0b       	sbc	r27, r26
 c88:	ee 1f       	adc	r30, r30
 c8a:	88 f7       	brcc	.-30     	; 0xc6e <__divsf3_pse+0x94>
 c8c:	e0 95       	com	r30
 c8e:	08 95       	ret

00000c90 <__fixunssfsi>:
 c90:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_splitA>
 c94:	88 f0       	brcs	.+34     	; 0xcb8 <__fixunssfsi+0x28>
 c96:	9f 57       	subi	r25, 0x7F	; 127
 c98:	98 f0       	brcs	.+38     	; 0xcc0 <__fixunssfsi+0x30>
 c9a:	b9 2f       	mov	r27, r25
 c9c:	99 27       	eor	r25, r25
 c9e:	b7 51       	subi	r27, 0x17	; 23
 ca0:	b0 f0       	brcs	.+44     	; 0xcce <__fixunssfsi+0x3e>
 ca2:	e1 f0       	breq	.+56     	; 0xcdc <__fixunssfsi+0x4c>
 ca4:	66 0f       	add	r22, r22
 ca6:	77 1f       	adc	r23, r23
 ca8:	88 1f       	adc	r24, r24
 caa:	99 1f       	adc	r25, r25
 cac:	1a f0       	brmi	.+6      	; 0xcb4 <__fixunssfsi+0x24>
 cae:	ba 95       	dec	r27
 cb0:	c9 f7       	brne	.-14     	; 0xca4 <__fixunssfsi+0x14>
 cb2:	14 c0       	rjmp	.+40     	; 0xcdc <__fixunssfsi+0x4c>
 cb4:	b1 30       	cpi	r27, 0x01	; 1
 cb6:	91 f0       	breq	.+36     	; 0xcdc <__fixunssfsi+0x4c>
 cb8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fp_zero>
 cbc:	b1 e0       	ldi	r27, 0x01	; 1
 cbe:	08 95       	ret
 cc0:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__fp_zero>
 cc4:	67 2f       	mov	r22, r23
 cc6:	78 2f       	mov	r23, r24
 cc8:	88 27       	eor	r24, r24
 cca:	b8 5f       	subi	r27, 0xF8	; 248
 ccc:	39 f0       	breq	.+14     	; 0xcdc <__fixunssfsi+0x4c>
 cce:	b9 3f       	cpi	r27, 0xF9	; 249
 cd0:	cc f3       	brlt	.-14     	; 0xcc4 <__fixunssfsi+0x34>
 cd2:	86 95       	lsr	r24
 cd4:	77 95       	ror	r23
 cd6:	67 95       	ror	r22
 cd8:	b3 95       	inc	r27
 cda:	d9 f7       	brne	.-10     	; 0xcd2 <__fixunssfsi+0x42>
 cdc:	3e f4       	brtc	.+14     	; 0xcec <__fixunssfsi+0x5c>
 cde:	90 95       	com	r25
 ce0:	80 95       	com	r24
 ce2:	70 95       	com	r23
 ce4:	61 95       	neg	r22
 ce6:	7f 4f       	sbci	r23, 0xFF	; 255
 ce8:	8f 4f       	sbci	r24, 0xFF	; 255
 cea:	9f 4f       	sbci	r25, 0xFF	; 255
 cec:	08 95       	ret

00000cee <__floatunsisf>:
 cee:	e8 94       	clt
 cf0:	09 c0       	rjmp	.+18     	; 0xd04 <__floatsisf+0x12>

00000cf2 <__floatsisf>:
 cf2:	97 fb       	bst	r25, 7
 cf4:	3e f4       	brtc	.+14     	; 0xd04 <__floatsisf+0x12>
 cf6:	90 95       	com	r25
 cf8:	80 95       	com	r24
 cfa:	70 95       	com	r23
 cfc:	61 95       	neg	r22
 cfe:	7f 4f       	sbci	r23, 0xFF	; 255
 d00:	8f 4f       	sbci	r24, 0xFF	; 255
 d02:	9f 4f       	sbci	r25, 0xFF	; 255
 d04:	99 23       	and	r25, r25
 d06:	a9 f0       	breq	.+42     	; 0xd32 <__floatsisf+0x40>
 d08:	f9 2f       	mov	r31, r25
 d0a:	96 e9       	ldi	r25, 0x96	; 150
 d0c:	bb 27       	eor	r27, r27
 d0e:	93 95       	inc	r25
 d10:	f6 95       	lsr	r31
 d12:	87 95       	ror	r24
 d14:	77 95       	ror	r23
 d16:	67 95       	ror	r22
 d18:	b7 95       	ror	r27
 d1a:	f1 11       	cpse	r31, r1
 d1c:	f8 cf       	rjmp	.-16     	; 0xd0e <__floatsisf+0x1c>
 d1e:	fa f4       	brpl	.+62     	; 0xd5e <__floatsisf+0x6c>
 d20:	bb 0f       	add	r27, r27
 d22:	11 f4       	brne	.+4      	; 0xd28 <__floatsisf+0x36>
 d24:	60 ff       	sbrs	r22, 0
 d26:	1b c0       	rjmp	.+54     	; 0xd5e <__floatsisf+0x6c>
 d28:	6f 5f       	subi	r22, 0xFF	; 255
 d2a:	7f 4f       	sbci	r23, 0xFF	; 255
 d2c:	8f 4f       	sbci	r24, 0xFF	; 255
 d2e:	9f 4f       	sbci	r25, 0xFF	; 255
 d30:	16 c0       	rjmp	.+44     	; 0xd5e <__floatsisf+0x6c>
 d32:	88 23       	and	r24, r24
 d34:	11 f0       	breq	.+4      	; 0xd3a <__floatsisf+0x48>
 d36:	96 e9       	ldi	r25, 0x96	; 150
 d38:	11 c0       	rjmp	.+34     	; 0xd5c <__floatsisf+0x6a>
 d3a:	77 23       	and	r23, r23
 d3c:	21 f0       	breq	.+8      	; 0xd46 <__floatsisf+0x54>
 d3e:	9e e8       	ldi	r25, 0x8E	; 142
 d40:	87 2f       	mov	r24, r23
 d42:	76 2f       	mov	r23, r22
 d44:	05 c0       	rjmp	.+10     	; 0xd50 <__floatsisf+0x5e>
 d46:	66 23       	and	r22, r22
 d48:	71 f0       	breq	.+28     	; 0xd66 <__floatsisf+0x74>
 d4a:	96 e8       	ldi	r25, 0x86	; 134
 d4c:	86 2f       	mov	r24, r22
 d4e:	70 e0       	ldi	r23, 0x00	; 0
 d50:	60 e0       	ldi	r22, 0x00	; 0
 d52:	2a f0       	brmi	.+10     	; 0xd5e <__floatsisf+0x6c>
 d54:	9a 95       	dec	r25
 d56:	66 0f       	add	r22, r22
 d58:	77 1f       	adc	r23, r23
 d5a:	88 1f       	adc	r24, r24
 d5c:	da f7       	brpl	.-10     	; 0xd54 <__floatsisf+0x62>
 d5e:	88 0f       	add	r24, r24
 d60:	96 95       	lsr	r25
 d62:	87 95       	ror	r24
 d64:	97 f9       	bld	r25, 7
 d66:	08 95       	ret

00000d68 <__fp_inf>:
 d68:	97 f9       	bld	r25, 7
 d6a:	9f 67       	ori	r25, 0x7F	; 127
 d6c:	80 e8       	ldi	r24, 0x80	; 128
 d6e:	70 e0       	ldi	r23, 0x00	; 0
 d70:	60 e0       	ldi	r22, 0x00	; 0
 d72:	08 95       	ret

00000d74 <__fp_nan>:
 d74:	9f ef       	ldi	r25, 0xFF	; 255
 d76:	80 ec       	ldi	r24, 0xC0	; 192
 d78:	08 95       	ret

00000d7a <__fp_pscA>:
 d7a:	00 24       	eor	r0, r0
 d7c:	0a 94       	dec	r0
 d7e:	16 16       	cp	r1, r22
 d80:	17 06       	cpc	r1, r23
 d82:	18 06       	cpc	r1, r24
 d84:	09 06       	cpc	r0, r25
 d86:	08 95       	ret

00000d88 <__fp_pscB>:
 d88:	00 24       	eor	r0, r0
 d8a:	0a 94       	dec	r0
 d8c:	12 16       	cp	r1, r18
 d8e:	13 06       	cpc	r1, r19
 d90:	14 06       	cpc	r1, r20
 d92:	05 06       	cpc	r0, r21
 d94:	08 95       	ret

00000d96 <__fp_round>:
 d96:	09 2e       	mov	r0, r25
 d98:	03 94       	inc	r0
 d9a:	00 0c       	add	r0, r0
 d9c:	11 f4       	brne	.+4      	; 0xda2 <__fp_round+0xc>
 d9e:	88 23       	and	r24, r24
 da0:	52 f0       	brmi	.+20     	; 0xdb6 <__fp_round+0x20>
 da2:	bb 0f       	add	r27, r27
 da4:	40 f4       	brcc	.+16     	; 0xdb6 <__fp_round+0x20>
 da6:	bf 2b       	or	r27, r31
 da8:	11 f4       	brne	.+4      	; 0xdae <__fp_round+0x18>
 daa:	60 ff       	sbrs	r22, 0
 dac:	04 c0       	rjmp	.+8      	; 0xdb6 <__fp_round+0x20>
 dae:	6f 5f       	subi	r22, 0xFF	; 255
 db0:	7f 4f       	sbci	r23, 0xFF	; 255
 db2:	8f 4f       	sbci	r24, 0xFF	; 255
 db4:	9f 4f       	sbci	r25, 0xFF	; 255
 db6:	08 95       	ret

00000db8 <__fp_split3>:
 db8:	57 fd       	sbrc	r21, 7
 dba:	90 58       	subi	r25, 0x80	; 128
 dbc:	44 0f       	add	r20, r20
 dbe:	55 1f       	adc	r21, r21
 dc0:	59 f0       	breq	.+22     	; 0xdd8 <__fp_splitA+0x10>
 dc2:	5f 3f       	cpi	r21, 0xFF	; 255
 dc4:	71 f0       	breq	.+28     	; 0xde2 <__fp_splitA+0x1a>
 dc6:	47 95       	ror	r20

00000dc8 <__fp_splitA>:
 dc8:	88 0f       	add	r24, r24
 dca:	97 fb       	bst	r25, 7
 dcc:	99 1f       	adc	r25, r25
 dce:	61 f0       	breq	.+24     	; 0xde8 <__fp_splitA+0x20>
 dd0:	9f 3f       	cpi	r25, 0xFF	; 255
 dd2:	79 f0       	breq	.+30     	; 0xdf2 <__fp_splitA+0x2a>
 dd4:	87 95       	ror	r24
 dd6:	08 95       	ret
 dd8:	12 16       	cp	r1, r18
 dda:	13 06       	cpc	r1, r19
 ddc:	14 06       	cpc	r1, r20
 dde:	55 1f       	adc	r21, r21
 de0:	f2 cf       	rjmp	.-28     	; 0xdc6 <__fp_split3+0xe>
 de2:	46 95       	lsr	r20
 de4:	f1 df       	rcall	.-30     	; 0xdc8 <__fp_splitA>
 de6:	08 c0       	rjmp	.+16     	; 0xdf8 <__fp_splitA+0x30>
 de8:	16 16       	cp	r1, r22
 dea:	17 06       	cpc	r1, r23
 dec:	18 06       	cpc	r1, r24
 dee:	99 1f       	adc	r25, r25
 df0:	f1 cf       	rjmp	.-30     	; 0xdd4 <__fp_splitA+0xc>
 df2:	86 95       	lsr	r24
 df4:	71 05       	cpc	r23, r1
 df6:	61 05       	cpc	r22, r1
 df8:	08 94       	sec
 dfa:	08 95       	ret

00000dfc <__fp_zero>:
 dfc:	e8 94       	clt

00000dfe <__fp_szero>:
 dfe:	bb 27       	eor	r27, r27
 e00:	66 27       	eor	r22, r22
 e02:	77 27       	eor	r23, r23
 e04:	cb 01       	movw	r24, r22
 e06:	97 f9       	bld	r25, 7
 e08:	08 95       	ret

00000e0a <__mulsf3>:
 e0a:	0e 94 18 07 	call	0xe30	; 0xe30 <__mulsf3x>
 e0e:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__fp_round>
 e12:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__fp_pscA>
 e16:	38 f0       	brcs	.+14     	; 0xe26 <__mulsf3+0x1c>
 e18:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fp_pscB>
 e1c:	20 f0       	brcs	.+8      	; 0xe26 <__mulsf3+0x1c>
 e1e:	95 23       	and	r25, r21
 e20:	11 f0       	breq	.+4      	; 0xe26 <__mulsf3+0x1c>
 e22:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_inf>
 e26:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_nan>
 e2a:	11 24       	eor	r1, r1
 e2c:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_szero>

00000e30 <__mulsf3x>:
 e30:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fp_split3>
 e34:	70 f3       	brcs	.-36     	; 0xe12 <__mulsf3+0x8>

00000e36 <__mulsf3_pse>:
 e36:	95 9f       	mul	r25, r21
 e38:	c1 f3       	breq	.-16     	; 0xe2a <__mulsf3+0x20>
 e3a:	95 0f       	add	r25, r21
 e3c:	50 e0       	ldi	r21, 0x00	; 0
 e3e:	55 1f       	adc	r21, r21
 e40:	62 9f       	mul	r22, r18
 e42:	f0 01       	movw	r30, r0
 e44:	72 9f       	mul	r23, r18
 e46:	bb 27       	eor	r27, r27
 e48:	f0 0d       	add	r31, r0
 e4a:	b1 1d       	adc	r27, r1
 e4c:	63 9f       	mul	r22, r19
 e4e:	aa 27       	eor	r26, r26
 e50:	f0 0d       	add	r31, r0
 e52:	b1 1d       	adc	r27, r1
 e54:	aa 1f       	adc	r26, r26
 e56:	64 9f       	mul	r22, r20
 e58:	66 27       	eor	r22, r22
 e5a:	b0 0d       	add	r27, r0
 e5c:	a1 1d       	adc	r26, r1
 e5e:	66 1f       	adc	r22, r22
 e60:	82 9f       	mul	r24, r18
 e62:	22 27       	eor	r18, r18
 e64:	b0 0d       	add	r27, r0
 e66:	a1 1d       	adc	r26, r1
 e68:	62 1f       	adc	r22, r18
 e6a:	73 9f       	mul	r23, r19
 e6c:	b0 0d       	add	r27, r0
 e6e:	a1 1d       	adc	r26, r1
 e70:	62 1f       	adc	r22, r18
 e72:	83 9f       	mul	r24, r19
 e74:	a0 0d       	add	r26, r0
 e76:	61 1d       	adc	r22, r1
 e78:	22 1f       	adc	r18, r18
 e7a:	74 9f       	mul	r23, r20
 e7c:	33 27       	eor	r19, r19
 e7e:	a0 0d       	add	r26, r0
 e80:	61 1d       	adc	r22, r1
 e82:	23 1f       	adc	r18, r19
 e84:	84 9f       	mul	r24, r20
 e86:	60 0d       	add	r22, r0
 e88:	21 1d       	adc	r18, r1
 e8a:	82 2f       	mov	r24, r18
 e8c:	76 2f       	mov	r23, r22
 e8e:	6a 2f       	mov	r22, r26
 e90:	11 24       	eor	r1, r1
 e92:	9f 57       	subi	r25, 0x7F	; 127
 e94:	50 40       	sbci	r21, 0x00	; 0
 e96:	9a f0       	brmi	.+38     	; 0xebe <__mulsf3_pse+0x88>
 e98:	f1 f0       	breq	.+60     	; 0xed6 <__mulsf3_pse+0xa0>
 e9a:	88 23       	and	r24, r24
 e9c:	4a f0       	brmi	.+18     	; 0xeb0 <__mulsf3_pse+0x7a>
 e9e:	ee 0f       	add	r30, r30
 ea0:	ff 1f       	adc	r31, r31
 ea2:	bb 1f       	adc	r27, r27
 ea4:	66 1f       	adc	r22, r22
 ea6:	77 1f       	adc	r23, r23
 ea8:	88 1f       	adc	r24, r24
 eaa:	91 50       	subi	r25, 0x01	; 1
 eac:	50 40       	sbci	r21, 0x00	; 0
 eae:	a9 f7       	brne	.-22     	; 0xe9a <__mulsf3_pse+0x64>
 eb0:	9e 3f       	cpi	r25, 0xFE	; 254
 eb2:	51 05       	cpc	r21, r1
 eb4:	80 f0       	brcs	.+32     	; 0xed6 <__mulsf3_pse+0xa0>
 eb6:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_inf>
 eba:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_szero>
 ebe:	5f 3f       	cpi	r21, 0xFF	; 255
 ec0:	e4 f3       	brlt	.-8      	; 0xeba <__mulsf3_pse+0x84>
 ec2:	98 3e       	cpi	r25, 0xE8	; 232
 ec4:	d4 f3       	brlt	.-12     	; 0xeba <__mulsf3_pse+0x84>
 ec6:	86 95       	lsr	r24
 ec8:	77 95       	ror	r23
 eca:	67 95       	ror	r22
 ecc:	b7 95       	ror	r27
 ece:	f7 95       	ror	r31
 ed0:	e7 95       	ror	r30
 ed2:	9f 5f       	subi	r25, 0xFF	; 255
 ed4:	c1 f7       	brne	.-16     	; 0xec6 <__mulsf3_pse+0x90>
 ed6:	fe 2b       	or	r31, r30
 ed8:	88 0f       	add	r24, r24
 eda:	91 1d       	adc	r25, r1
 edc:	96 95       	lsr	r25
 ede:	87 95       	ror	r24
 ee0:	97 f9       	bld	r25, 7
 ee2:	08 95       	ret

00000ee4 <__divmodhi4>:
 ee4:	97 fb       	bst	r25, 7
 ee6:	07 2e       	mov	r0, r23
 ee8:	16 f4       	brtc	.+4      	; 0xeee <__divmodhi4+0xa>
 eea:	00 94       	com	r0
 eec:	07 d0       	rcall	.+14     	; 0xefc <__divmodhi4_neg1>
 eee:	77 fd       	sbrc	r23, 7
 ef0:	09 d0       	rcall	.+18     	; 0xf04 <__divmodhi4_neg2>
 ef2:	0e 94 8c 07 	call	0xf18	; 0xf18 <__udivmodhi4>
 ef6:	07 fc       	sbrc	r0, 7
 ef8:	05 d0       	rcall	.+10     	; 0xf04 <__divmodhi4_neg2>
 efa:	3e f4       	brtc	.+14     	; 0xf0a <__divmodhi4_exit>

00000efc <__divmodhi4_neg1>:
 efc:	90 95       	com	r25
 efe:	81 95       	neg	r24
 f00:	9f 4f       	sbci	r25, 0xFF	; 255
 f02:	08 95       	ret

00000f04 <__divmodhi4_neg2>:
 f04:	70 95       	com	r23
 f06:	61 95       	neg	r22
 f08:	7f 4f       	sbci	r23, 0xFF	; 255

00000f0a <__divmodhi4_exit>:
 f0a:	08 95       	ret

00000f0c <__tablejump2__>:
 f0c:	ee 0f       	add	r30, r30
 f0e:	ff 1f       	adc	r31, r31
 f10:	05 90       	lpm	r0, Z+
 f12:	f4 91       	lpm	r31, Z
 f14:	e0 2d       	mov	r30, r0
 f16:	09 94       	ijmp

00000f18 <__udivmodhi4>:
 f18:	aa 1b       	sub	r26, r26
 f1a:	bb 1b       	sub	r27, r27
 f1c:	51 e1       	ldi	r21, 0x11	; 17
 f1e:	07 c0       	rjmp	.+14     	; 0xf2e <__udivmodhi4_ep>

00000f20 <__udivmodhi4_loop>:
 f20:	aa 1f       	adc	r26, r26
 f22:	bb 1f       	adc	r27, r27
 f24:	a6 17       	cp	r26, r22
 f26:	b7 07       	cpc	r27, r23
 f28:	10 f0       	brcs	.+4      	; 0xf2e <__udivmodhi4_ep>
 f2a:	a6 1b       	sub	r26, r22
 f2c:	b7 0b       	sbc	r27, r23

00000f2e <__udivmodhi4_ep>:
 f2e:	88 1f       	adc	r24, r24
 f30:	99 1f       	adc	r25, r25
 f32:	5a 95       	dec	r21
 f34:	a9 f7       	brne	.-22     	; 0xf20 <__udivmodhi4_loop>
 f36:	80 95       	com	r24
 f38:	90 95       	com	r25
 f3a:	bc 01       	movw	r22, r24
 f3c:	cd 01       	movw	r24, r26
 f3e:	08 95       	ret

00000f40 <ltoa>:
 f40:	25 32       	cpi	r18, 0x25	; 37
 f42:	31 05       	cpc	r19, r1
 f44:	20 f4       	brcc	.+8      	; 0xf4e <ltoa+0xe>
 f46:	22 30       	cpi	r18, 0x02	; 2
 f48:	10 f0       	brcs	.+4      	; 0xf4e <ltoa+0xe>
 f4a:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__ltoa_ncheck>
 f4e:	fa 01       	movw	r30, r20
 f50:	10 82       	st	Z, r1
 f52:	ca 01       	movw	r24, r20
 f54:	08 95       	ret

00000f56 <__ltoa_ncheck>:
 f56:	bb 27       	eor	r27, r27
 f58:	2a 30       	cpi	r18, 0x0A	; 10
 f5a:	51 f4       	brne	.+20     	; 0xf70 <__ltoa_ncheck+0x1a>
 f5c:	99 23       	and	r25, r25
 f5e:	42 f4       	brpl	.+16     	; 0xf70 <__ltoa_ncheck+0x1a>
 f60:	bd e2       	ldi	r27, 0x2D	; 45
 f62:	90 95       	com	r25
 f64:	80 95       	com	r24
 f66:	70 95       	com	r23
 f68:	61 95       	neg	r22
 f6a:	7f 4f       	sbci	r23, 0xFF	; 255
 f6c:	8f 4f       	sbci	r24, 0xFF	; 255
 f6e:	9f 4f       	sbci	r25, 0xFF	; 255
 f70:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__ultoa_common>

00000f74 <__ultoa_ncheck>:
 f74:	bb 27       	eor	r27, r27

00000f76 <__ultoa_common>:
 f76:	fa 01       	movw	r30, r20
 f78:	a6 2f       	mov	r26, r22
 f7a:	62 17       	cp	r22, r18
 f7c:	71 05       	cpc	r23, r1
 f7e:	81 05       	cpc	r24, r1
 f80:	91 05       	cpc	r25, r1
 f82:	33 0b       	sbc	r19, r19
 f84:	30 fb       	bst	r19, 0
 f86:	66 f0       	brts	.+24     	; 0xfa0 <__ultoa_common+0x2a>
 f88:	aa 27       	eor	r26, r26
 f8a:	66 0f       	add	r22, r22
 f8c:	77 1f       	adc	r23, r23
 f8e:	88 1f       	adc	r24, r24
 f90:	99 1f       	adc	r25, r25
 f92:	aa 1f       	adc	r26, r26
 f94:	a2 17       	cp	r26, r18
 f96:	10 f0       	brcs	.+4      	; 0xf9c <__ultoa_common+0x26>
 f98:	a2 1b       	sub	r26, r18
 f9a:	63 95       	inc	r22
 f9c:	38 50       	subi	r19, 0x08	; 8
 f9e:	a9 f7       	brne	.-22     	; 0xf8a <__ultoa_common+0x14>
 fa0:	a0 5d       	subi	r26, 0xD0	; 208
 fa2:	aa 33       	cpi	r26, 0x3A	; 58
 fa4:	08 f0       	brcs	.+2      	; 0xfa8 <__ultoa_common+0x32>
 fa6:	a9 5d       	subi	r26, 0xD9	; 217
 fa8:	a1 93       	st	Z+, r26
 faa:	36 f7       	brtc	.-52     	; 0xf78 <__ultoa_common+0x2>
 fac:	b1 11       	cpse	r27, r1
 fae:	b1 93       	st	Z+, r27
 fb0:	10 82       	st	Z, r1
 fb2:	ca 01       	movw	r24, r20
 fb4:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <strrev>

00000fb8 <strrev>:
 fb8:	dc 01       	movw	r26, r24
 fba:	fc 01       	movw	r30, r24
 fbc:	67 2f       	mov	r22, r23
 fbe:	71 91       	ld	r23, Z+
 fc0:	77 23       	and	r23, r23
 fc2:	e1 f7       	brne	.-8      	; 0xfbc <strrev+0x4>
 fc4:	32 97       	sbiw	r30, 0x02	; 2
 fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <strrev+0x18>
 fc8:	7c 91       	ld	r23, X
 fca:	6d 93       	st	X+, r22
 fcc:	70 83       	st	Z, r23
 fce:	62 91       	ld	r22, -Z
 fd0:	ae 17       	cp	r26, r30
 fd2:	bf 07       	cpc	r27, r31
 fd4:	c8 f3       	brcs	.-14     	; 0xfc8 <strrev+0x10>
 fd6:	08 95       	ret

00000fd8 <_exit>:
 fd8:	f8 94       	cli

00000fda <__stop_program>:
 fda:	ff cf       	rjmp	.-2      	; 0xfda <__stop_program>
